COMMENT @%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1992 -- All Rights Reserved

PROJECT:	PC GEOS
MODULE:		PCCom library
FILE:		pccomConstants.def

AUTHOR:		Cassie Hartzog, Nov 10, 1993

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	Cassie	11/10/93	Initial revision


DESCRIPTION:
	
		
	$Id: pccomConstants.def,v 1.1 97/04/05 01:25:58 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%@


;----------------------------------------------------------------------------
;
;			CONSTANTS
;
;----------------------------------------------------------------------------

ifndef	HARDWARE_TYPE
    HARDWARE_TYPE 	equ 	<PC>
endif

;;;;;;;;;;;; _DEBUG must be defined, 0 means no debugging ;;;;;;;;;;;;;;;;

ifdef	DEBUG
	_DEBUG	equ	1
else
	_DEBUG	equ	0
endif	

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;File sending stuff;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FILE_SEND_NORMAL	equ	0
FILE_SEND_RAW		equ	1
FILE_SEND_ACTIVE	equ	2

SEEK_START		equ	0
SEEK_CURRENT		equ	1
SEEK_END		equ	2

ACK		equ	0		; everything OK
NAK		equ	1		; not OK, try again
NAK_QUIT	equ	2		; not OK, give up
SYNC		equ	0ffh

BLOCK_START		equ	01h
BLOCK_END		equ	02h
BLOCK_QUOTE		equ	03h
BLOCK_START_DATA	equ	04h
BLOCK_END_DATA		equ	05h
BLOCK_QUOTE_DATA	equ	06h
BLOCK_FILENAME		equ	07h	; block contains filename

ROBUST_START_EVEN	equ	0
ROBUST_START_ODD	equ	1
ROBUST_END		equ	2
ROBUST_NAK_QUIT		equ	3
ROBUST_ACK_EVEN		equ	4
ROBUST_ACK_ODD		equ	5
ROBUST_QUOTE		equ	149	; statistically good choice..

MAX_TRIES		equ	3 	; max # of tries at a resend

BUFFER_SIZE		equ	1024
TEMP_BUFFER_SIZE	equ	560	; more than 512 so that we can
					; get most packets into just 2 blocks
FILE_LIST_RECORD_SIZE	equ	36

FETCH_RAW_COMMAND	equ	4	; receive a file in raw mode (pcget)
RECV_VARIABLE		equ	3	; receive a variable-length file.
END_COMMAND		equ	2	; transfer complete
RECV_COMMAND		equ	1	; receive file (pcsend)
FETCH_COMMAND		equ	0	; send file (com43)


;
; Command Sequences
;
ROBUST_NEGOTIATION	equ	('B' shl 8) or 'R'
ROBUST_ACKNOWLEDGEMENT	equ	('A' shl 8) or 'R'
ECHOBACK_COMMAND	equ	('B' shl 8) or 'E'
FREESPACE_COMMAND	equ	('S' shl 8) or 'F'
FILE_TRANSFER_COMMAND	equ	('F' shl 8) or 'X'
ACKNOWLEDGMENT_COMMAND	equ	('K' shl 8) or 'A'
AVAILABLE_DRIVE_COMMAND equ	('D' shl 8) or 'A'
CHANGE_DIR_COMMAND	equ	('D' shl 8) or 'C'
MAKE_DIR_COMMAND	equ	('D' shl 8) or 'M'
REMARK_COMMAND		equ	('E' shl 8) or 'R'
DATA_COMMAND		equ	('A' shl 8) or 'D'

;
; Useful characters
;
cr			equ  C_ENTER		; carriage return
DEFAULT_DELIMITER  	equ  '!'		; the default argument delimter
FIRST_DELIMITER		equ  '!'		; first valid delimiter char
LAST_DELIMITER		equ  '~'		; last valid delimiter char

;
; default com port and baud rate to use
;
DEFAULT_PORT	equ		SERIAL_COM2
DEFAULT_BAUD	equ		SB_38400

NO_PORT		   equ 	-1	; value for serialPort when no port initialized
ERROR_BAD_ARGUMENT equ	-2	; internal Error value for FileFileError

;
; Command exit status
;
PccomCommandExitType	etype	word, 0, 1
	PCET_NORMAL	enum	PccomCommandExitType
	PCET_ERROR	enum	PccomCommandExitType

;
; Ls Options
;
LsOption		etype	word, 0, 2
	LO_short	enum	LsOption
	LO_medium	enum	LsOption
	LO_long		enum	LsOption	

;
; When performing a file manipulation such as MV, RF, CP, etc.,
; This etype determines which, if any, of the files being operated
; upon should be shut down by IACP before performing the operation.
;
IACPRegisterType	record	
	IACP_RT_SOURCE:1			; check the source file
	IACP_RT_DESTINATION:1			; check the destination file
IACPRegisterType	end


;
;	Fatal Errors
;
SEGMENT_REGISTER_NOT_DGROUP			enum FatalErrors
INVALID_SERIAL_MODE				enum FatalErrors
MISSING_FILE_ENUM_ATTR				enum FatalErrors
NEGATIVE_FILE_SIZE_COUNT			enum FatalErrors
INVALID_SERIAL_PORT				enum FatalErrors
PROCESS_AND_CLIENT_DIFFER			enum FatalErrors
STRING_BLOCK_OVERFLOW				enum FatalErrors
TOO_MANY_FILES_IN_FILE_ENUM			enum FatalErrors
INVALID_PCCOM_COMMAND_EXIT_TYPE			enum FatalErrors
INVALID_PACKET_NUMBER				enum FatalErrors
YOU_HAVE_NOT_EATEN_EVERYTHING_YET		enum FatalErrors
SHOULD_NOT_BE_IN_ROBUST_MODE_AT_THIS_POINT	enum FatalErrors
ALREADY_IN_BURST_MODE				enum FatalErrors
BURST_MODE_SHOULD_BE_OFF			enum FatalErrors
MISC_ERROR					enum FatalErrors
FILE_NAME_NOT_NULL_TERMINATED			enum FatalErrors
CORRUPT_INPUT_BUFFER_POINTERS			enum FatalErrors
	; Input buffer failed the following check:
	; 	offset robustInputBuffer <= Start 
	; 	Start <= End 
	;	End <= (offset robustInputBuffer + BUFFER_SIZE)
	; 
FSM_BOGUS_CONTROL_BITFIELDS			enum FatalErrors
	; The control bitfield in al failed to match up with any of
	; those in HLCSwitchTable.
	;
FSM_IMPROPER_CONTROL_BITFIELDS_FOR_ROUTINE	enum FatalErrors
	; The control bitfield doesn't correspond to this routine.
	;
INVALID_REMARK_STRING				enum FatalErrors


;
;	Warnings
;
ENCOUNTERED_NON_DATA_PACKET			enum Warnings
FSM_POSSIBLE_RACE_CONDITION			enum Warnings
	; Got a new data packet while waiting for an ACK packet, ie.
	; they haven't received our DATA packet and/or we haven't
	; received their ACK packet.
	;
FSM_GOT_EMPTY_DATA_PACKET			enum Warnings
	; How can a data packet be NULL, ie. just header and CRC?
	;
FSM_GOT_OLD_DATA_PACKET				enum Warnings
	; Indicating retransmittal by other side
	;
FSM_GOT_GIBBERISH_ACK_PACKET			enum Warnings
	; Got an ACK packet while reading, ie. not waiting for ACK
	; packet.
	;
FSM_GOT_BOGUS_CONTROL_CHARACTER			enum Warnings
	; Got a quote character followed by garbage, so FSM ignored it
	; and attempted to get a new header.
	;
FSM_FAILED_CRC					enum Warnings
	; The CRC for the packet doesn't matchup.
	;
FSM_DATA_BUFFER_OVERFLOW			enum Warnings
	; We've read in more chars than we can allow - something is
	; wrong.  Possible protocol violation.
	;
FSM_GOT_OLD_ACK_PACKET				enum Warnings
FSM_COMPLEX_ABORTING				enum Warnings
FSM_SIMPLE_ABORTING				enum Warnings
FSM_GOT_ABORT_PACKET				enum Warnings
INVALID_PCCOM_ABORT_TYPE			enum Warnings
PROTOCOL_EXPECTING_ABORT_TYPE			enum Warnings
ATTEMPTING_COM_READ_WRITE_WITH_ERROR_SET	enum Warnings
	; This warning is given when both SF_EXIT and err is set, and
	; the programmer is trying to do com read/write or other
	; communications.  If SF_EXIT and err are set, this indicates
	; the library has encountered and error and already aborted so
	; no futher attempts of communication should happen.
	;

;----------------------------------------------------------------------------
;
;		STRUCTURES and RECORDS
;
;----------------------------------------------------------------------------

FileSendReturnAttrs	struct
    FSRA_name		FileLongName
    FSRA_dosname	DosDotFileName
    FSRA_size		dword
    FSRA_type		GeosFileType
FileSendReturnAttrs	ends

LSReturnAttrs	struct
    LSRA_name		DosDotFileName		<>
    LSRA_attrs		FileAttrs		<>
    LSRA_size		dword			<>
    LSRA_modified 	FileDateAndTime		<>
    LSRA_geosFileType	GeosFileType		<>
    LSRA_longName	FileLongName		<>
    LSRA_release	ReleaseNumber 		<0,0,0,0>
    LSRA_protocol	ProtocolNumber 		<1,0>
    LSRA_token		GeodeToken 		<<0,0,0,0>,0>
    LSRA_creator	GeodeToken		<<0,0,0,0>,0>
LSReturnAttrs	ends

;
;
;
SysFlags	record	
	SF_NOTIFY_OUTPUT:1,	; send output notification to caller
	SF_NOTIFY_EXIT:1,	; send exit notification to caller
	SF_EXIT:1, 		; exit the library (stop the file transfer)
	SF_SUSPEND_INPUT:1,	; don't call input handler
	SF_FIRST_BLOCK:1	; first block is being read
	SF_READ_FILENAME:1	; check block containing filename
	SF_BAD_FILENAME:1	; first filename sent is bad
	SF_SCREXIT:1		; set if called from ScrExit
	SF_GEOS_FILE:1		; set if file being received is a GEOS file
	SF_FIRST_DATA_BLOCK:1	; first *data* block is being read 
	SF_JUST_GET_SIZE:1	; abort the get after we get the size
	SF_INITIALIZING:1	; set if we don't own a desired port yet
	SF_USE_DOS_NAME:1	; set if we want to ignore geos long
				; names while recieving
	SF_COLLECT_OUTPUT:1	; set if we want all the output to be
				; collected into packets
	:2
SysFlags	end

RESET_SYSFLAGS_MASK		equ \
		mask SF_NOTIFY_OUTPUT or \
		mask SF_NOTIFY_EXIT or \
		mask SF_SCREXIT

RESET_FILE_TRANSFER_FLAGS_MASK	equ \
		mask SF_READ_FILENAME or \
		mask SF_BAD_FILENAME or \
		mask SF_FIRST_BLOCK or \
		mask SF_GEOS_FILE

;
; String Block structure
;
STRING_BLOCK_MAX_SIZE		equ	1000
STRING_BLOCK_DEFAULT_SIZE	equ 	1200

StringBlock	struct
	SB_handle	hptr	0
	SB_size		word	0
	SB_currentPos	word	0
StringBlock	ends

PCComNegotiationStatus	etype	byte
	PNS_UNDECIDED			enum	PCComNegotiationStatus
	PNS_BASE			enum	PCComNegotiationStatus
	PNS_ROBUST			enum	PCComNegotiationStatus
	PNS_DEAD			enum	PCComNegotiationStatus

CharSetTranslationType	etype	byte
	CSTT_NO_TRANSLATION		enum	CharSetTranslationType
	CSTT_GEOS_TO_DOS		enum	CharSetTranslationType
	CSTT_DOS_TO_GEOS		enum	CharSetTranslationType


NEGOTIATION_ATTEMPTS	equ	1
CHAR_RESEND_ATTEMPTS	equ	3
BLOCK_RESEND_ATTEMPTS	equ	6
IR_BLOCK_RESEND_ATTEMPTS	equ	3
DEFAULT_TIMEOUT		equ	180	; ticks, about 3 seconds
					; under GEOS the interrupt rate is 
					; 60/per second)
DEFAULT_IR_TIMEOUT	equ	2400	; ticks, about 40 seconds


PCCOM_TRANSFER_THRESHOLD equ	1000h	; arbitrarily large number to
					; prevent us from getting
					; notification messages

;
; Local variable used by PCComFileEnum.
;
PFELocals	struct
	PFEL_dirBuffer	hptr	; handle of buffer used to store
				; incoming data from PCComDir
	PFEL_retBuffer	hptr	; handle of buffer used to return the
				; FileEnum-like return data.
		;
		; The offsets into the return records where we should
		; store these things..  if they shouldn't be returned,
		; this offset will be 0xFFFF
	PFEL_nameOffset		word
	PFEL_nameSize		word
	PFEL_dosNameOffset	word
	PFEL_dosNameSize	word
	PFEL_sizeOffset		word
	PFEL_sizeSize		word
	PFEL_creationOffset	word
	PFEL_creationSize	word
	PFEL_modificationOffset	word
	PFEL_modificationSize	word
	PFEL_fileAttrOffset	word
	PFEL_fileAttrSize	word
	PFEL_entriesCounted	word	; the number of dir entries
					; we've worked
	PFEL_dirSize		word	; the size of the DirBuffer
					; block in bytes
PFELocals	ends

PCComRobustStateFlags	record
	PCCRSF_WRITE:1		; The original op causing the reading was
				; either a write (waiting for the
				; ackback) or a read (duh..  reading)
	PCCRSF_COMPLEX_ABORT:1	; If we were to receive an abort right
	PCCRSF_SIMPLE_ABORT:1	; now, would it be a complex (set for
				; abort and send char, waiting for
				; ack) or simple (acknowledge the
				; abort by sending an ack and set for
				; abort)
	PCCRSF_DOING_COMPLEX:1	; We're actually attempting a complex
				; abort
	PCCRSF_DOING_SIMPLE:1	; and doing a simple abort
	PCCRSF_OLD:1		; Is the current packet old or new?
	PCCRSF_ACK:1		; Is the current packet an ACK or is
				; it data?
	:1
PCComRobustStateFlags	end
