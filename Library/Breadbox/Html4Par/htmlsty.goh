/***********************************************************************
 *
 * PROJECT:       HTML3Par
 * FILE:          htmlsty.goh
 *
 * AUTHOR:    Marcus Grï¿½ber
 *
 * NOTES:         Default style sheet and parsing table for HTML.
 *                Also includes ISO Latin character set and color table.
 *
 ***********************************************************************/

@start StyleResource, data;

@chunk CharStyleDelta vcdNone =        {0,0,0,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdReset =       {CSD_RESET,0,0,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdH1 =          {CSD_SIZE,0,7,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH2 =          {CSD_SIZE,0,6,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH3 =          {CSD_SIZE,0,5,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH4 =          {CSD_SIZE,0,4,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH5 =          {CSD_SIZE,0,3,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdH6 =          {CSD_SIZE,0,2,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdBold =        {0,0,0,{0,0,0,0},TS_BOLD,0};
@chunk CharStyleDelta vcdItalic =      {0,0,0,{0,0,0,0},TS_ITALIC,0};
@chunk CharStyleDelta vcdUnderline =   {0,0,0,{0,0,0,0},TS_UNDERLINE,0};
@chunk CharStyleDelta vcdStrike =      {0,0,0,{0,0,0,0},TS_STRIKE_THRU,0};
@chunk CharStyleDelta vcdSuperscript = {0,0,0,{0,0,0,0},TS_SUPERSCRIPT,0};
@chunk CharStyleDelta vcdSubscript =   {0,0,0,{0,0,0,0},TS_SUBSCRIPT,0};
@chunk CharStyleDelta vcdBig =         {CSD_SIZE,0,4,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdSmall =       {CSD_SIZE,0,2,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdMono =  {CSD_BASE,CSD_BASE_EXAMPLE,0,{0,0,0,0},0,0};
@chunk CharStyleDelta vcdNOBR =  {CSD_EXTENDED,0,0,{0,0,0,0},0,VTES_NOWRAP};

/******************************************************************************/

@chunk ParaStyleDelta vpdNone       = {0,0,0,0,0};
@chunk ParaStyleDelta vpdReset      = {PSD_RESET,0,0,0,0};
@chunk ParaStyleDelta vpdPre        = {PSD_SPACING,0,0,0,0};
@chunk ParaStyleDelta vpdHeading    = {PSD_SPACING,0,0,0,
                                       VTPAA_KEEP_PARA_WITH_NEXT};
@chunk ParaStyleDelta vpdCenter     = {PSD_JUSTIFY,0,0,0,
                                       J_CENTER<<VTPAA_JUSTIFICATION_OFFSET};
@chunk ParaStyleDelta vpdBlockquote = {PSD_MARGINS_ADD | PSD_SPACING,
                                       5*PIXELS_PER_INCH,5*PIXELS_PER_INCH,0,0};
@chunk ParaStyleDelta vpdDefList    = {PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,0};
@chunk ParaStyleDelta vpdDefTerm    = {PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,VTPAA_KEEP_PARA_WITH_NEXT};
@chunk ParaStyleDelta vpdDefDef     = {PSD_MARGINS_ADD|PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,0};
@chunk ParaStyleDelta vpdMenu       = {PSD_MARGINS_ADD | PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,0};
@chunk ParaStyleDelta vpdListItem   = {PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,0,0};
@chunk ParaStyleDelta vpdList       = {PSD_MARGINS_ADD | PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,
                                       -2*PIXELS_PER_INCH,0};
@chunk ParaStyleDelta vpdUList      = {PSD_MARGINS_ADD | PSD_SPACING,
                                       5*PIXELS_PER_INCH,0,-2*PIXELS_PER_INCH,0};

/******************************************************************************/

@chunk HTMLStylesTable HTMLStylesChunk[] =
{
  {"",          OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_PAR_SPACING,
        },

  {"A",         OptrToChunk(@vcdNone),   OptrToChunk(@vpdNone),
    SPEC_A,
    TAG_IS_CHAR_STYLE,
        },

  /*** ABBR: ignored ***/
  /*** ACRONYM: ignored ***/

  {"ADDRESS",   OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"APPLET",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"AREA",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_AREA,
        0,
        },
  {"B",         OptrToChunk(@vcdBold),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"BASE",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_BASE,
        0,
        },
  {"BASEFONT",  OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_BASEFONT,
        0,
        },

  /*** BDO: ignored ***/

  {"BIG",       OptrToChunk(@vcdBig), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"BLOCKQUOTE",OptrToChunk(@vcdNone), OptrToChunk(@vpdBlockquote),
    SPEC_BLOCKQUOTE,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE,
        },
  {"BODY",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_BODY,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"BR",        OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_BR,
        0,
        },

  /*** BUTTON: to be implemented ***/
  /*** CAPTION: to be implemented ***/

  {"CENTER",    OptrToChunk(@vcdNone), OptrToChunk(@vpdCenter),
    SPEC_NONE,
    TAG_IS_PAR_STYLE,
        },
  {"CITE",      OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"CODE",      OptrToChunk(@vcdMono),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },

  /*** COL: to be implemented ***/
  /*** COLGROUP: to be implemented ***/

  {"DD",        OptrToChunk(@vcdNone), OptrToChunk(@vpdDefDef),
        SPEC_DTDD,
        TAG_IS_PAR_STYLE,
        },

  /*** DEL: to be implemented ***/

  {"DFN",       OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"DIR",       OptrToChunk(@vcdNone), OptrToChunk(@vpdMenu),
    SPEC_NONE,
    TAG_IS_PAR_STYLE,
        },
  {"DIV",       OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_DIV,
        TAG_IS_PAR_STYLE,
        },
  {"DL",        OptrToChunk(@vcdNone), OptrToChunk(@vpdDefList),
        SPEC_DL,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE,
        },
  {"DT",        OptrToChunk(@vcdNone), OptrToChunk(@vpdDefTerm),
        SPEC_DTDD,
        TAG_IS_PAR_STYLE,
        },
  {"EM",        OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
#if EMBED_SUPPORT
  {"EMBED",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_EMBED,
        TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
#endif

  /*** FIELDSET: to be implemented ***/

  {"FONT",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_FONT,
    TAG_IS_CHAR_STYLE,
        },
  {"FORM",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_FORM,
        TAG_IS_PAR_STYLE,
        },
  {"FRAME",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_FRAME,
        0,
        },
  {"FRAMESET",  OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_FRAMESET,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"H1",        OptrToChunk(@vcdH1),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H2",        OptrToChunk(@vcdH2),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H3",        OptrToChunk(@vcdH3),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H4",        OptrToChunk(@vcdH4),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H5",        OptrToChunk(@vcdH5),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"H6",        OptrToChunk(@vcdH6),     OptrToChunk(@vpdHeading),
        SPEC_Hx,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"HEAD",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_HEAD,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"HR",        OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_HR,
    0,
        },
  {"HTML",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_HTML,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"I",         OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },

#if 0  /* ignore IFRAME tag, but obeying
	  contained HTML is the correct behavior */
  {"IFRAME",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT|TAG_IGNORE_TAGS,
        },
#endif

  {"IMAGE",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_IMG,
    0,
        },
  {"IMG",       OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_IMG,
    0,
        },
  {"INPUT",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_INPUT,
    0,
        },

  /*** INS: to be implemented ***/
  /*** ISINDEX: to be implemented. ***/

  {"KBD",       OptrToChunk(@vcdMono),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },

  /*** LABEL: to be implemented ***/
  /*** LEGEND: to be implemented ***/

  {"LI",        OptrToChunk(@vcdNone), OptrToChunk(@vpdListItem),
    SPEC_LI,
        TAG_IS_PAR_STYLE|TAG_PREPEND,
        },
  {"LISTING",   OptrToChunk(@vcdMono), OptrToChunk(@vpdPre),
        SPEC_PRE,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },

  /*** LINK: to be implemented? ***/

  {"MAP",       OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_MAP,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },
  {"MENU",      OptrToChunk(@vcdNone), OptrToChunk(@vpdMenu),
    SPEC_MENU,
    TAG_IS_PAR_STYLE,
        },
  {"META",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_META,
        0,
        },

  {"NOBR",         OptrToChunk(@vcdNOBR),   OptrToChunk(@vpdNone),
        SPEC_NONE,
        TAG_IS_CHAR_STYLE,
        },

  /* if inside OBJECT, ignore NOEMBED */
  {"NOEMBED",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_NOEMBED,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },

  /*** NOFRAME: ignored ***/

  {"NOSCRIPT",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_NOSCRIPT,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT|TAG_IGNORE_TAGS,
        },

  /* just keep track of being in OBJECT state */
  {"OBJECT",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_OBJECT,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING,
        },

  {"OL",        OptrToChunk(@vcdNone), OptrToChunk(@vpdList),
        SPEC_OL,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE|TAG_PREPEND,
        },                            /* ensure it's indented even w/o <LI> */

  /*** OPTGROUP: to be implemented ***/

  {"OPTION",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_OPTION,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"P",         OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_P,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE|TAG_IMPLICIT_TERM|TAG_PREPEND_MAYBE,
        },

  /*** PARAM: ignored ***/

  {"PLAINTEXT", OptrToChunk(@vcdMono), OptrToChunk(@vpdPre),
        SPEC_PLAINTEXT,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"PRE",       OptrToChunk(@vcdMono), OptrToChunk(@vpdPre),
        SPEC_PRE,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },
  {"Q",         OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_Q,
    TAG_IS_CHAR_STYLE,
        },
  {"S",         OptrToChunk(@vcdStrike), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SAMP",      OptrToChunk(@vcdMono),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SCRIPT",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_SCRIPT,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT|TAG_IGNORE_TAGS,
        },
  {"SELECT",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_SELECT,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"SMALL",     OptrToChunk(@vcdSmall), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SPAN",      OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_CONTAIN,
    TAG_IS_CHAR_STYLE,
        },
  {"STRIKE",    OptrToChunk(@vcdStrike), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"STRONG",    OptrToChunk(@vcdBold),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"STYLE",    OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_STYLE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"SUB",       OptrToChunk(@vcdSubscript), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"SUP",       OptrToChunk(@vcdSuperscript), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"TABLE",     OptrToChunk(@vcdReset), OptrToChunk(@vpdReset),
        SPEC_TABLE,
        TAG_IS_PAR_STYLE,
        },

  /*** TBODY: to be implemented ***/

  {"TD",        OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_TD,
        TAG_IS_PAR_STYLE,
        },
  {"TEXTAREA",  OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_TEXTAREA,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },

  /*** TFOOT: to be implemented ***/

  {"TH",        OptrToChunk(@vcdBold), OptrToChunk(@vpdCenter),
        SPEC_TD,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE|TAG_IS_CHAR_STYLE,
        },

  /*** THEAD: to be implemented ***/

  {"TITLE",     OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
    SPEC_TITLE,
        TAG_IS_PAR_STYLE|TAG_NO_FORMATTING|TAG_FLUSH_TEXT,
        },
  {"TR",        OptrToChunk(@vcdNone), OptrToChunk(@vpdNone),
        SPEC_TR,
        TAG_IS_PAR_STYLE,
        },
  {"TT",        OptrToChunk(@vcdMono),   OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"U",         OptrToChunk(@vcdUnderline), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"UL",        OptrToChunk(@vcdNone), OptrToChunk(@vpdUList),
        SPEC_UL,
        TAG_PAR_SPACING|TAG_IS_PAR_STYLE|TAG_PREPEND,
        },                            /* ensure it's indented even w/o <LI> */
  {"VAR",       OptrToChunk(@vcdItalic), OptrToChunk(@vpdNone),
    SPEC_NONE,
    TAG_IS_CHAR_STYLE,
        },
  {"XMP",       OptrToChunk(@vcdMono), OptrToChunk(@vpdPre),
        SPEC_PRE,
        TAG_PAR_SPACING|TAG_IS_BOTH,
        },

  /*** End Of List */
  {"*", OptrToChunk(@vcdNone), OptrToChunk(@vpdNone), SPEC_NONE, 0, }
};

@end StyleResource;


/**************************************************************************
 *              Entity names
 * 11/2022: Adding some more recent entity names to the table
 * https://www.key-shortcut.com/html-entities/alle-entitaeten/
 * https://www.w3.org/wiki/Common_HTML_entities_used_for_typography
 * https://www.code-knacker.de/ansi.htm
 **************************************************************************/

@start EntityResource, data;

@ifdef DO_DBCS
@chunk HTMLEntityTable xlateTable[] =
{
  /* regular ASCII characters which have an entity name */
  {9,   "tab",   C_HORIZONTAL_TABULATION   },
  {34,  "quot",  C_QUOTATION_MARK },
  {38,  "amp",   C_AMPERSAND },
  {60,  "lt",    C_LESS_THAN_SIGN },
  {62,  "gt",    C_GREATER_THAN_SIGN },

  /* Extensions based on Windows/ANSI characters set */
  {130, "",      0xE2},   /* single opening quote, low */
  {131, "",      0xC4},   /* italic "f" currency symbol (?) */
  {132, "",      0xE3},   /* double opening quote, low */
  {133, "",      C_HORIZONTAL_ELLIPSIS},   /* ellipsis */
  {134, "",      C_DAGGER},   /* dagger */
  {135, "",      C_DOUBLE_DAGGER},   /* double dagger */
  {136, "",      0xF6},   /* circonflex */
  {137, "",      C_PER_MILLE_SIGN},   /* "per mille" symbol */
  {138, "",      C_LATIN_CAPITAL_LETTER_S_HACEK },   /* S-hacek */
  {139, "",      0xDC},   /* single opening french quote */
  {140, "",      C_LATIN_CAPITAL_LETTER_O_E},   /* OE ligature */
  {145, "",      C_SINGLE_TURNED_COMMA_QUOTATION_MARK},   /* single opening quote, high */
  {146, "",      C_SINGLE_COMMA_QUOTATION_MARK},   /* single closing quote, high */
  {8217, "",     C_SINGLE_COMMA_QUOTATION_MARK},   /* add'l single closing quote, high (apostrophe) */
  {147, "",      C_DOUBLE_TURNED_COMMA_QUOTATION_MARK},   /* double opening quote, high */
  {148, "",      C_DOUBLE_COMMA_QUOTATION_MARK},   /* double closing quote */
//  {149, "",      C_BULLET},   /* bullet */
//  {8226, "",     C_BULLET},   /* additional bullet */
//C_BULLET don't exist in DBCS encodings, use alternative
  {149, "",      C_KATAKANA_MIDDLE_DOT},   /* bullet */
  {8226, "",     C_KATAKANA_MIDDLE_DOT},   /* additional bullet */
  {150, "",      C_EN_DASH},   /* En dash */
  {151, "",      C_EM_DASH},   /* Em dash */
  {8212, "",     C_EM_DASH},   /* additional Em dash */
  {152, "",      0xF7},   /* tilde accent (?) */
  {153, "",      C_TRADEMARK},   /* trademark symbol */
  {154, "",      C_LATIN_SMALL_LETTER_S_HACEK },   /* s-hacek */
  {155, "",      0xDD},   /* single closing french quote */
  {156, "",      C_LATIN_SMALL_LETTER_O_E},   /* oe ligature */
  {159, "",      C_LATIN_CAPITAL_LETTER_Y_DIAERESIS},   /* Y-umlaut (?) */

  /* Regular ISO Latin character set */
  {160, "nbsp",  C_NON_BREAKING_SPACE},
  {161, "iexcl", C_INVERTED_EXCLAMATION_MARK},
  {162, "cent",  C_CENT_SIGN},
  {163, "pound", C_POUND_SIGN},
  {164, "curren",C_CURRENCY_SIGN},
  {165, "yen",   C_YEN_SIGN},
  {166, "brvbar",C_BROKEN_VERTICAL_BAR},
  {167, "sect",  C_SECTION_SIGN},
  {168, "uml",   C_SPACING_DIAERESIS},
  {169, "copy",  C_COPYRIGHT_SIGN},
  {170, "ordf",  C_FEMININE_ORDINAL_INDICATOR},
  {171, "laquo", C_LEFT_POINTING_GUILLEMET},
  {172, "not",   C_NOT_SIGN},
  {173, "shy",   C_SOFT_HYPHEN},
  {174, "reg",   C_REGISTERED_TRADE_MARK_SIGN},
  {175, "macro", C_SPACING_MACRON},
  {176, "deg",   C_DEGREE_SIGN},
  {177, "plusm", C_PLUS_OR_MINUS_SIGN},
//{178, "sup2",  C_SUPERSCRIPT_DIGIT_TWO },
//{179, "sup3",  C_SUPERSCRIPT_DIGIT_TRHEE },
  {180, "acute", C_SPACING_ACUTE},
  {181, "micro", C_MICRO_SIGN},
  {182, "para",  C_PARAGRAPH_SIGN},
  {183, "middot",C_MIDDLE_DOT},
  {184, "cedil", C_SPACING_CEDILLA},
//{185, "sup1",  C_SUPERSCRIPT_DIGIT_ONE },
  {186, "ordm",  C_MASCULINE_ORDINAL_INDICATOR},
  {187, "raquo", C_RIGHT_POINTING_GUILLEMET},
//{188, "frac14",C_FRACTION_ONE_QUARTER },
//{189, "frac12",C_FRACTION_ONE_HALF },
//{190, "frac34",C_FRACTION_THREE_QUARTERS },
  {191, "iquest",C_INVERTED_QUESTION_MARK},
  {192, "Agrave",C_LATIN_CAPITAL_LETTER_A_GRAVE},
  {193, "Aacute",C_LATIN_CAPITAL_LETTER_A_ACUTE},
  {194, "Acirc", C_LATIN_CAPITAL_LETTER_A_CIRCUMFLEX},
  {195, "Atilde",C_LATIN_CAPITAL_LETTER_A_TILDE},
  {196, "Auml",  C_LATIN_CAPITAL_LETTER_A_DIAERESIS},
  {197, "Aring", C_LATIN_CAPITAL_LETTER_A_RING},
  {198, "AElig", C_LATIN_CAPITAL_LETTER_A_E},
  {199, "Ccedil",C_LATIN_CAPITAL_LETTER_C_CEDILLA},
  {200, "Egrave",C_LATIN_CAPITAL_LETTER_E_GRAVE},
  {201, "Eacute",C_LATIN_CAPITAL_LETTER_E_ACUTE},
  {202, "Ecirc", C_LATIN_CAPITAL_LETTER_E_CIRCUMFLEX},
  {203, "Euml",  C_LATIN_CAPITAL_LETTER_E_DIAERESIS},
  {204, "Igrave",C_LATIN_CAPITAL_LETTER_I_GRAVE},
  {205, "Iacute",C_LATIN_CAPITAL_LETTER_I_ACUTE},
  {206, "Icirc", C_LATIN_CAPITAL_LETTER_I_CIRCUMFLEX},
  {207, "Iuml",  C_LATIN_CAPITAL_LETTER_I_DIAERESIS},
//{208, "ETH",   C_LATIN_CAPITAL_LETTER_ETH },
  {209, "Ntilde",C_LATIN_CAPITAL_LETTER_N_TILDE},
  {210, "Ograve",C_LATIN_CAPITAL_LETTER_O_GRAVE},
  {211, "Oacute",C_LATIN_CAPITAL_LETTER_O_ACUTE},
  {212, "Ocirc", C_LATIN_CAPITAL_LETTER_O_CIRCUMFLEX},
  {213, "Otilde",C_LATIN_CAPITAL_LETTER_O_TILDE},
  {214, "Ouml",  C_LATIN_CAPITAL_LETTER_O_DIAERESIS},
//{215, "times", C_MULTIPLICATION_SIGN},
  {216, "Oslash",C_LATIN_CAPITAL_LETTER_O_SLASH},
  {217, "Ugrave",C_LATIN_CAPITAL_LETTER_O_GRAVE},
  {218, "Uacute",C_LATIN_CAPITAL_LETTER_U_ACUTE},
  {219, "Ucirc", C_LATIN_CAPITAL_LETTER_U_CIRCUMFLEX},
  {220, "Uuml",  C_LATIN_CAPITAL_LETTER_U_DIAERESIS},
  {221, "Yacute",C_LATIN_CAPITAL_LETTER_Y_ACUTE},
//{222, "THORN", C_LATIN_CAPITAL_LETTER_THORN },
  {223, "szlig", C_LATIN_SMALL_LETTER_SHARP_S},
  {224, "agrave",C_LATIN_SMALL_LETTER_A_GRAVE},
  {225, "aacute",C_LATIN_SMALL_LETTER_A_ACUTE},
  {226, "acirc", C_LATIN_SMALL_LETTER_A_CIRCUMFLEX},
  {227, "atilde",C_LATIN_SMALL_LETTER_A_TILDE},
  {228, "auml",  C_LATIN_SMALL_LETTER_A_DIAERESIS},
  {229, "aring", C_LATIN_SMALL_LETTER_A_RING},
  {230, "aelig", C_LATIN_SMALL_LETTER_A_E},
  {231, "ccedil",C_LATIN_SMALL_LETTER_C_CEDILLA},
  {232, "egrave",C_LATIN_SMALL_LETTER_E_GRAVE},
  {233, "eacute",C_LATIN_SMALL_LETTER_E_ACUTE},
  {234, "ecirc", C_LATIN_SMALL_LETTER_E_CIRCUMFLEX},
  {235, "euml",  C_LATIN_SMALL_LETTER_E_DIAERESIS},
  {236, "igrave",C_LATIN_SMALL_LETTER_I_GRAVE},
  {237, "iacute",C_LATIN_SMALL_LETTER_I_ACUTE},
  {238, "icirc", C_LATIN_SMALL_LETTER_I_CIRCUMFLEX},
  {239, "iuml",  C_LATIN_SMALL_LETTER_I_DIAERESIS},
//{240, "eth",   C_LATIN_SMALL_LETTER_ETH },
  {241, "ntilde",C_LATIN_SMALL_LETTER_N_TILDE},
  {242, "ograve",C_LATIN_SMALL_LETTER_O_GRAVE},
  {243, "oacute",C_LATIN_SMALL_LETTER_O_ACUTE},
  {244, "ocirc", C_LATIN_SMALL_LETTER_O_CIRCUMFLEX},
  {245, "otilde",C_LATIN_SMALL_LETTER_O_TILDE},
  {246, "ouml",  C_LATIN_SMALL_LETTER_O_DIAERESIS},
  {247, "divide",C_DIVISION_SIGN},
  {248, "oslash",C_LATIN_SMALL_LETTER_O_SLASH},
  {249, "ugrave",C_LATIN_SMALL_LETTER_U_GRAVE},
  {250, "uacute",C_LATIN_SMALL_LETTER_U_ACUTE},
  {251, "ucirc", C_LATIN_SMALL_LETTER_U_CIRCUMFLEX},
  {252, "uuml",  C_LATIN_SMALL_LETTER_U_DIAERESIS},
  {253, "yacute",C_LATIN_SMALL_LETTER_Y_ACUTE},
//{254, "thorn", C_LATIN_SMALL_LETTER_THORN },
  {255, "yuml",  C_LATIN_SMALL_LETTER_Y_DIAERESIS},

  /* Fake characters that get expanded into strings */
  {175, "macr", HTML_SPECIAL_ENTITY_BASE},
  {185, "sup1", HTML_SPECIAL_ENTITY_BASE+2},
  {178, "sup2", HTML_SPECIAL_ENTITY_BASE+3},
  {179, "sup3", HTML_SPECIAL_ENTITY_BASE+4},
  {188, "frac14", HTML_SPECIAL_ENTITY_BASE+5},
  {189, "frac12", HTML_SPECIAL_ENTITY_BASE+6},
  {190, "frac34", HTML_SPECIAL_ENTITY_BASE+7},
  {208, "ETH", HTML_SPECIAL_ENTITY_BASE+8},
  {240, "eth", HTML_SPECIAL_ENTITY_BASE+9},
  {222, "THORN", HTML_SPECIAL_ENTITY_BASE+10},
  {254, "thorn", HTML_SPECIAL_ENTITY_BASE+11},
  {215, "times", HTML_SPECIAL_ENTITY_BASE+12},

  {0,   "",      0   }    /* end of list */
};
@else
@chunk HTMLEntityTable xlateTable[] =
{
  /* regular ASCII characters which have an entity name */
  {9,   "tab",   9   },
  {34,  "quot",  '"' },
  {38,  "amp",   '&' },
  {60,  "lt",    '<' },
  {62,  "gt",    '>' },

  /* Extensions based on Windows/ANSI characters set */
  {130, "sbquo",      0xE2},   /* single opening quote, low */
  {131, "fnof",      0xC4},   /* italic "f" currency symbol (?) */
  {132, "bdquo",      0xE3},   /* double opening quote, low */
  {133, "hellip",      0xC9},   /* ellipsis */
  {134, "dagger",      0xA0},   /* dagger */
  {135, "Dagger",      0xE0},   /* double dagger */
  {136, "circ",      0xF6},   /* circonflex */
  {137, "permil",      0xE4},   /* "per mille" symbol */
//{138, "",      '?' },   /* S-hacek (?) */
  {139, "lsaquo",      0xDC},   /* single opening french quote */
  {140, "OElig",      0xCE},   /* OE ligature */
  {145, "lsquo",      0xD4},   /* single opening quote, high */
  {146, "rsquo",      0xD5},   /* single closing quote, high */
// {8217, "",      0xD5},   /* add'l single closing quote, high (apostrophe) */
  {147, "ldquo",      0xD2},   /* double opening quote, high */
  {148, "rdquo",      0xD3},   /* double closing quote */
  {149, "bull",      0xA5},   /* bullet */
//  {8226, "",      0xA5},   /* additional bullet */
  {150, "ndash",      0xD0},   /* En dash */
  {151, "mdash",      0xD1},   /* Em dash */
// {8212, "",      0xD1},   /* additional Em dash */
  {152, "tilde",      0xF7},   /* tilde accent (?) */
  {153, "trade",      0xAA},   /* trademark symbol */
//{154, "",      '?' },   /* s-hacek (?) */
  {155, "rsaquo",      0xDD},   /* single closing french quote */
  {156, "oelig",      0xCF},   /* oe ligature */
  {159, "Yuml",      0xD9},   /* Y-umlaut (?) */

  /* Regular ISO Latin character set */
  {160, "nbsp",  0xCA},
  {161, "iexcl", 0xC1},
  {162, "cent",  0xA2},
  {163, "pound", 0xA3},
  {164, "curren",0xDB},
  {165, "yen",   0xB4},
  {166, "brvbar",0x7C},
  {167, "sect",  0xA4},
  {168, "uml",   0xFD},
  {169, "copy",  0xA9},
  {170, "ordf",  0xBB},
  {171, "laquo", 0xC7},
  {172, "not",   0xC2},
  {173, "shy",   0x1F},
  {174, "reg",   0xA8},
  {175, "macro", 0xF8},
  {176, "deg",   0xA1},
  {177, "plusm", 0xB1},
//{178, "sup2",  '?' },   /* ??? */
//{179, "sup3",  '?' },   /* ??? */
  {180, "acute", 0xAB},
  {181, "micro", 0xB5},
  {182, "para",  0xA6},
  {183, "middot",0xE1},
  {184, "cedil", 0xFE},
//{185, "sup1",  '?' },   /* ??? */
  {186, "ordm",  0xBC},
  {187, "raquo", 0xC8},
//{188, "frac14",'?' },   /* ??? */
//{189, "frac12",'?' },   /* ??? */
//{190, "frac34",'?' },   /* ??? */
  {191, "iquest",0xC0},
  {192, "Agrave",0xCB},
  {193, "Aacute",0xE7},
  {194, "Acirc", 0xE5},
  {195, "Atilde",0xCC},
  {196, "Auml",  0x80},
  {197, "Aring", 0x81},
  {198, "AElig", 0xAE},
  {199, "Ccedil",0x82},
  {200, "Egrave",0xE9},
  {201, "Eacute",0x83},
  {202, "Ecirc", 0xE6},
  {203, "Euml",  0xE8},
  {204, "Igrave",0xED},
  {205, "Iacute",0xEA},
  {206, "Icirc", 0xEB},
  {207, "Iuml",  0xEC},
//{208, "ETH",   '?' },   /* ??? */
  {209, "Ntilde",0x84},
  {210, "Ograve",0xF1},
  {211, "Oacute",0xEE},
  {212, "Ocirc", 0xEF},
  {213, "Otilde",0xCD},
  {214, "Ouml",  0x85},
//{215, "times", 0x78},   /* ??? */
  {216, "Oslash",0xAF},
  {217, "Ugrave",0xF4},
  {218, "Uacute",0xF2},
  {219, "Ucirc", 0xF3},
  {220, "Uuml",  0x86},
  {221, "Yacute",0xDF},
//{222, "THORN", '?' },   /* ??? */
  {223, "szlig", 0xA7},
  {224, "agrave",0x88},
  {225, "aacute",0x87},
  {226, "acirc", 0x89},
  {227, "atilde",0x8B},
  {228, "auml",  0x8A},
  {229, "aring", 0x8C},
  {230, "aelig", 0xBE},
  {231, "ccedil",0x8D},
  {232, "egrave",0x8F},
  {233, "eacute",0x8E},
  {234, "ecirc", 0x90},
  {235, "euml",  0x91},
  {236, "igrave",0x93},
  {237, "iacute",0x92},
  {238, "icirc", 0x94},
  {239, "iuml",  0x95},
//{240, "eth",   '?' },   /* ??? */
  {241, "ntilde",0x96},
  {242, "ograve",0x98},
  {243, "oacute",0x97},
  {244, "ocirc", 0x99},
  {245, "otilde",0x9B},
  {246, "ouml",  0x9A},
  {247, "divide",0xD6},
  {248, "oslash",0xBF},
  {249, "ugrave",0x9D},
  {250, "uacute",0x9C},
  {251, "ucirc", 0x9E},
  {252, "uuml",  0x9F},
  {253, "yacute",0xDE},
//{254, "thorn", '?' },   /* ??? */
  {255, "yuml",  0xD8},

  /* Fake characters that get expanded into strings */
  {175, "macr", HTML_SPECIAL_ENTITY_BASE},
  {185, "sup1", HTML_SPECIAL_ENTITY_BASE+2},
  {178, "sup2", HTML_SPECIAL_ENTITY_BASE+3},
  {179, "sup3", HTML_SPECIAL_ENTITY_BASE+4},
  {188, "frac14", HTML_SPECIAL_ENTITY_BASE+5},
  {189, "frac12", HTML_SPECIAL_ENTITY_BASE+6},
  {190, "frac34", HTML_SPECIAL_ENTITY_BASE+7},
  {208, "ETH", HTML_SPECIAL_ENTITY_BASE+8},
  {240, "eth", HTML_SPECIAL_ENTITY_BASE+9},
  {222, "THORN", HTML_SPECIAL_ENTITY_BASE+10},
  {254, "thorn", HTML_SPECIAL_ENTITY_BASE+11},
  {215, "times", HTML_SPECIAL_ENTITY_BASE+12},

  {0,   "",      0   }    /* end of list */
};
@endif

@chunk HTMLEntityString EntityStringArray[] = {
    { "-"   },   /* &macr */
    { "+/-" },   /* &plusmn */
    { "1"   },   /* &sup1 */
    { "2"   },   /* &sup2 */
    { "3"   },   /* &sup3 */
    { "1/4" },   /* &frac14 */
    { "1/2" },   /* &frac12 */
    { "3/4" },   /* &frac34 */
    { "D"   },   /* &ETH */
    { "d"   },   /* &eth */
    { "P"   },   /* &THORN */
    { "p"   },   /* &thorn */
    { "x"   }    /* &times */
} ;


@end EntityResource;
