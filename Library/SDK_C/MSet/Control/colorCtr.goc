/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		colorCtr.goc

AUTHOR:		Tom Lester, Aug  6, 1993

METHODS:

Name				Description
----				-----------
MSG_GEN_CONTROL_GET_INFO	Provide the system with the information
				necessary to manage the Color Controller.

MSG_GEN_CONTROL_UPDATE_UI	Update the display objects expressing the
				state of the currently selected MSet object.

MSG_MSCC_SET_COLOR_SCHEME	Send message to MSet object when user 
				selects new color scheme.

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TL	8/ 6/93   	Initial version.

DESCRIPTION:
	This file declares the UI objects and methods for the 
	MSetColorControlClass. The UI objects are contained in 
	two resource segments: MSetColorControlUI for the feature
	objects and MSetColorControlToolUI for the tool objects.

	These resources are declared in the mset.gp file
	as "read-only" and "shared" because they are just duplicated
	when an instance of the MSetColorControlClass is created in 
	an application.

	$Id: colorCtr.goc,v 1.1 97/04/07 10:43:50 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#ifndef __MSET_COLOR_CONTROL_GOC
#define __MSET_COLOR_CONTROL_GOC

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <Ansi/string.h>

#include <geoworks.h>			/* defines MANUFACTURER_ID_SDK */
#include <SDK_C/SDK.h>			/* SDK app local notification lists */
@include <Objects/SDK_C/msetC.goh>	/* MSetClass definition */
@include <SDK_C/mset.goh>		/* MSet structure definitions */
@include <Objects/SDK_C/msColCC.goh>	/* MSetColorControlClass definition */

#include "msFatErr.h"			/* fatal errors */
@include "Local/strings.goh"		/* extern chunk declarations */
@include "Art/mkrCtrl.goh"		/* visMonikers for Controllers */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@classdecl	MSetColorControlClass ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

/*
 * Color control
 */

@start MSetColorControlUI, notDetachable ;
/*
 * Define the features UI resource. The resource is set notDetachable so
 * that the feature objects will not be saved to a state file. This resource
 * can contain any objects that may typically appear in a menu
 * (e.g. GenInteractions, GenTriggers, and list objects). For the
 * ColorControl features we are using a single list object.
 */
@object GenItemGroupClass ColorList = {
	GI_states = @default & ~GS_USABLE;	/* Set the list not usable */
		/* The children of the list are defined below. Each 
		 * entry in the list will appear as a single menu item. 
		 */
	GI_comp = @CountEntry, @BrightEntry, @GreyEntry, @ContrastEntry,
		  @DougEntry;
		/* The "apply" message will be sent to the destination
		 * specified in the GIGI_destination field. 
		 */
	GIGI_applyMsg = MSG_MSCC_SET_COLOR_SCHEME;
		/* The destination is defined as the TravelOption 
		 * TO_OBJ_BLOCK_OUTPUT. This will send the apply message 
		 * to the controller's output object which is set by the
		 * controller to be itself.
		 */
	GIGI_destination = (TO_OBJ_BLOCK_OUTPUT);
}

/* 
 * Define the GenItems for the ColorList. 
 */
@object GenItemClass CountEntry = {
	GI_visMoniker = 'C', "Count";
	GII_identifier = MSC_COUNT;
}

@object GenItemClass BrightEntry = {
	GI_visMoniker = 'B', "Bright";
	GII_identifier = MSC_BRIGHT;
}

@object GenItemClass GreyEntry = {
	GI_visMoniker = 'G', "Greys";
	GII_identifier = MSC_GREY;
}

@object GenItemClass ContrastEntry = {
	GI_visMoniker = 'o', "Contrast";
	GII_identifier = MSC_CONTRAST;
}

@object GenItemClass DougEntry = {
	GI_visMoniker = 'D', "Doug\'s";
	GII_identifier = MSC_DOUG;
}

@end MSetColorControlUI


/*
 * Toolbox UI
 */

@start MSetColorControlToolUI, notDetachable ;
/* 
 * Define the Tools UI resource. This follows exactly the same rules as the
 * Features UI resource above, but it represents the UI gadgetry that will
 * appear in the controller's tool boxes rather than its default menus. For
 * the ColorControl Toolbox features we are using a single list object with
 * the hint HINT_TOOLBOX.
 */

@object GenItemGroupClass ColorToolList = {
	GI_states = @default & ~GS_USABLE;	/* Set the list not usable */
		/* The children of the list are defined below. Each 
		 * entry in the list will appear as a single menu item. 
		 */
	GI_comp = @CountToolEntry, @BrightToolEntry, @GreyToolEntry, 
		  @ContrastToolEntry, @DougToolEntry;
		/* The "apply" message will be sent to the destination
		 * specified in the GIGI_destination field. 
		 */
	GIGI_applyMsg = MSG_MSCC_SET_COLOR_SCHEME;
		/* The destination is defined as the TravelOption 
		 * TO_OBJ_BLOCK_OUTPUT. This will send the apply message 
		 * to the controller's output object which is set by the
		 * controller to be itself.
		 */
	GIGI_destination = (TO_OBJ_BLOCK_OUTPUT);
	HINT_TOOLBOX;
}

/* Define the GenItems for the ColorToolList. 
 */
@object GenItemClass CountToolEntry = {
	GI_visMoniker = list {
	    @CountToolTCMoniker,
	    @CountToolTMMoniker
	}
	GII_identifier = MSC_COUNT;
}

@object GenItemClass BrightToolEntry = {
	GI_visMoniker = list {
	    @BrightToolTCMoniker,
	    @BrightToolTMMoniker
	}
	GII_identifier = MSC_BRIGHT;
}

@object GenItemClass GreyToolEntry = {
	GI_visMoniker = list {
	    @GreyToolTCMoniker,
	    @GreyToolTMMoniker
	}
	GII_identifier = MSC_GREY;
}

@object GenItemClass ContrastToolEntry = {
	GI_visMoniker = list {
	    @ContrastToolTCMoniker,
	    @ContrastToolTMMoniker
	}
	GII_identifier = MSC_CONTRAST;
}

@object GenItemClass DougToolEntry = {
	GI_visMoniker = list {
	    @DougToolTCMoniker,
	    @DougToolTMMoniker
	}
	GII_identifier = MSC_DOUG;
}

@end MSetColorControlToolUI

/*
 ***************************************************************************
 *		Code for MSetColorControlClass
 ***************************************************************************
 */


/***********************************************************************
 *		MSG_GEN_CONTROL_GET_INFO for MSetColorControlClass
 ***********************************************************************
 * SYNOPSIS:	return information about the controler
 * PARAMETERS:	void (GenControlBuildInfo *info)
 * SIDE EFFECTS: none
 *
 * DESCRIPTION:
 *	Every controller must handle MSG_GEN_CONTROL_GET_INFO. This 
 *	message is sent to the controller in several circumstances, 
 *	and it must return critical information about the controller's 
 *	state and configuration. It takes a pointer to an empty 
 *	GenControlBuildInfo structure and must fill in all the 
 *	structure's fields before returning. 
 *
 * STRATEGY:	
 *	Fill in the GenControlBuildInfo structure and return it.
 *	We have a number of static local variables with the base
 *	information and set the structure to these variables.
 *	Then we fill in a couple of fields manually.
 * 
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/ 6/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetColorControlClass, MSG_GEN_CONTROL_GET_INFO
{
	/* General information constants */

    static const char MSCC_IniFileKey[] = "MSetColorScheme";
    static const GCNListType MSCC_gcnList[] = {
	{MANUFACTURER_ID_SDK, SDK_GAGCNLT_APP_TARGET_NOTIFY_MSET_ATTR_CHANGE}
    };

    static const NotificationType MSCC_notifyTypeList[] = {
	{MANUFACTURER_ID_SDK, SDK_NT_MSET_ATTR_CHANGE}
    };

	/* Features information constants */

    static const GenControlChildInfo MSCC_childList[] = {
	{OptrToChunk(@ColorList), (MSCCF_COUNT | MSCCF_BRIGHT | MSCCF_GREY | 
				   MSCCF_CONTRAST | MSCCF_DOUG), 0}
    };

	/*
	* Controller features information.
	* Careful, this table is in the *opposite* order of the bit-flags to
	* which it corresponds.
	*/
    static const GenControlFeaturesInfo MSCC_featuresList[] = {
	{OptrToChunk(@DougEntry), @DougName, 0},
	{OptrToChunk(@ContrastEntry), @ContrastName, 0},
	{OptrToChunk(@GreyEntry), @GreyName, 0},
	{OptrToChunk(@BrightEntry), @BrightName, 0},
	{OptrToChunk(@CountEntry), @CountName, 0}
    };

	/* Tools information constants */

    static const GenControlChildInfo MSCC_toolList[] = {
	{OptrToChunk(@ColorToolList), (MSCCTF_COUNT | MSCCTF_BRIGHT | 
				       MSCCTF_GREY | MSCCTF_CONTRAST | 
				       MSCCTF_DOUG), 0}
    };

	/*
	* Controller toolbox features information.
	* Careful, this table is in the *opposite* order of the bit-flags to
	* which it corresponds.
	*/
    static const GenControlFeaturesInfo MSCC_toolFeaturesList[] = {
	{OptrToChunk(@DougToolEntry), @DougName, 0},
	{OptrToChunk(@ContrastToolEntry), @ContrastName, 0},
	{OptrToChunk(@GreyToolEntry), @GreyName, 0},
	{OptrToChunk(@BrightToolEntry), @BrightName, 0},
	{OptrToChunk(@CountToolEntry), @CountName, 0}
    };

	/* Our constant for the GenControlBuildInfo structure.
	 * Fields with a ## marker to the left of their names are
	 * filled in dynamically by the handler following the
	 * constant definition. */
    static const GenControlBuildInfo MSCC_dupInfo = {
	GCBF_SUSPEND_ON_APPLY,			/* GCBI_flags */
	MSCC_IniFileKey,			/* GCBI_initFileKey */
	MSCC_gcnList,				/* GCBI_gcnList */
	ARRAY_LEN(MSCC_gcnList, GCNListType), 	/* GCBI_gcnCount */
	MSCC_notifyTypeList,			/* GCBI_notificationList */
	ARRAY_LEN(MSCC_notifyTypeList, NotificationType),
						/* GCBI_notificationCount */
	@MSCCName,				/* GCBI_controllerName */

	/*##*/	NullHandle,			/* GCBI_dupBlock */
	MSCC_childList,				/* GCBI_childList */
	ARRAY_LEN(MSCC_childList, GenControlChildInfo),
						/* GCBI_childCount */
	MSCC_featuresList,			/* GCBI_featuresList */
	ARRAY_LEN(MSCC_featuresList, GenControlFeaturesInfo),
						/* GCBI_featuresCount */
	MSCC_DEFAULT_FEATURES,			/* GCBI_features */

	/*##*/	NullHandle,			/* GCBI_toolBlock */
	MSCC_toolList,				/* GCBI_toolList */
	ARRAY_LEN(MSCC_toolList, GenControlChildInfo),
						/* GCBI_toolCount */
	MSCC_toolFeaturesList,			/* GCBI_toolFeaturesList */
	ARRAY_LEN(MSCC_toolFeaturesList, GenControlFeaturesInfo),
						/* GCBI_toolFeaturesCount */
	MSCC_DEFAULT_TOOLBOX_FEATURES,		/* GCBI_toolFeatures */
    };


	/* Here is the code that fills in the above missing fields and
	 * returns the proper structure. */

    /* Copy the structure containing most of the correct information. */

    memcpy(info, MemLockFixedOrMovable((void*)&MSCC_dupInfo), 
	   sizeof(GenControlBuildInfo));
    MemUnlockFixedOrMovable((void*)&MSCC_dupInfo);

    /* Fill the remaining fields in manually. */
    info->GCBI_dupBlock = HandleOf(@ColorList);	/* Get the handle of the
						 * features UI block. */
    info->GCBI_toolBlock = HandleOf(@ColorToolList);/* Get the handle of the
						 * tool features UI block. */

}	/* End of MSG_GEN_CONTROL_GET_INFO.	*/




/***********************************************************************
 *		MSG_MSCC_SET_COLOR_SCHEME for MSetColorControlClass
 ***********************************************************************
 * SYNOPSIS:	Send message when user selects new color scheme.
 * PARAMETERS:
 *		void (word selection, word numSelections,
 *		      byte stateFlags)
 *
 * SIDE EFFECTS:    
 *
 * STRATEGY:	Record MSG_MSET_SET_COLOR_SCHEME message and then
 * 		send it to the controller output which is set to 
 *              be the application target in the msColCC.goh file.
 *              The application target is the currently selected 
 *              MSet object.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/ 6/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetColorControlClass, MSG_MSCC_SET_COLOR_SCHEME
{
    EventHandle msg;

    msg = @record MSetClass::MSG_MSET_CONTROLLER_SET_COLOR_SCHEME(selection);

    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);

}	/* End of MSG_MSCC_SET_COLOR_SCHEME.	*/



/***********************************************************************
 *		MSG_GEN_CONTROL_UPDATE_UI for MSetColorControlClass
 ***********************************************************************
 * SYNOPSIS:	    Handle notification of attributes change
 *  
 * PARAMETERS:	    
 * 	PASS:	MemHandle	toolBlock	= Handle of block
 *						  containing tools.
 *		MemHandle	childBlock	= Handle of block
 *						  containing UI children.
 *		WordFlags	toolboxFeatures	= Toolbox features flags.
 *		WordFlags	features	= Controller features
 *						  flags.
 *		MemHandle	data		= Handle of block
 *						  containing the data given
 *						  to MSG_META_NOTIFIY_...
 *						  ...WITH_DATA_BLOCK.
 *		word		changeID	= GCN type.
 *		ManufacturerID	manufID		= ID of manufacturer of the
 *						  notify message.
 * 	RETURN:	Void.
 *
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 * 	Extract the data out of the given data block.
 *	Update the regular features (if necessary).
 *	Update the toolbox features (if necessary).
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TL	8/ 9/93   	Initial Revision
 *
 ***********************************************************************/
@method MSetColorControlClass, MSG_GEN_CONTROL_UPDATE_UI
{
	MSetParameters *ndata;
	word colorScheme;

#if ERROR_CHECK
    /* Is this notification for us?	*/
    if ((MANUFACTURER_ID_SDK != manufID) ||
	(SDK_NT_MSET_ATTR_CHANGE != changeID))
	{
	EC_ERROR (ERROR_COLOR_CONTROL_INVALID_CHANGE_ID_IN_UPDATE_UI);
	}
#endif

    /*
     * Get the data that we need to update from the block passed
     */
    ndata = (MSetParameters *) MemLock(data);
    colorScheme = ndata->MSP_colorScheme;
    MemUnlock(data);

    /*
     * Set the color scheme list
     */
    if (features & (MSCCF_COUNT | MSCCF_BRIGHT | MSCCF_GREY | \
		    MSCCF_CONTRAST| MSCCF_DOUG)) {
    	@send childBlock,(ChunkHandle)@ColorList::
		MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(colorScheme, 0);
    }


    /*
     * Set the color scheme tool list
     */
    if (toolboxFeatures & (MSCCTF_COUNT | MSCCTF_BRIGHT | MSCCTF_GREY | \
		    MSCCTF_CONTRAST| MSCCTF_DOUG)) {
    	@send toolBlock,(ChunkHandle)@ColorToolList::
		MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(colorScheme, 0);
    }


}	/* End of MSG_GEN_CONTROL_UPDATE_UI.	*/

#endif	/* __MSET_COLOR_CONTROL_GOC */
