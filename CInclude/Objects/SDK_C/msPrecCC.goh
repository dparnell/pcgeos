/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		msPreCtr.goh

AUTHOR:		Tom Lester, Sept  9, 1993

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TL	9/ 9/93   	Initial version.

DESCRIPTION:
	This file defines the MSetPrecisionControlClass.

	$Id: msPrecCC.goh,v 1.1 97/04/04 15:51:16 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#ifndef __MSET_PRECISION_CONTROL_GOH
#define __MSET_PRECISION_CONTROL_GOH

@deflib mset		/* See msetC.goh for a description of this keyword */

@include <Objects/gCtrlC.goh>		/* include GenControlClass */

/*
 * Define the MSetPrecisionControllerClass
 */
@class	MSetPrecisionControlClass, GenControlClass ;

/***********************************************************************
 *              Internal Messages
 ***********************************************************************/

/*
 * Context:	 send message to MSet object to set precision
 * Source:	 MSetPrecisionControl object
 * Destination:	 output of the controller (a MSet object)
 * Interception: ok, but call superclass
 */
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_MSPC_SET_PRECISION;


/*
 * The GCI_output field contains the optr of the object to which
 * the controller is currently sending its "apply" messages. This
 * field is typically set to a GenTravelOption (such as TO_APP_TARGET)
 * or to a TravelOption (such as TO_OBJ_BLOCK_OUTPUT). 
 * We want to send the messages to the selected MSet object which
 * will be the application target.
 */
@default GCI_output = (TO_APP_TARGET);



/***********************************************************************
 *              Feature and Tool Sets
 ***********************************************************************/

/*
 * Define the Feature set of the controller class. To do this we define
 * a record type of type WordFlags and one flag for each feature. The 
 * record type may be named anything but typically its name will consist
 * of the acronym of the controller class with the suffix "Features."
 * When a flag is set, the feature it represents is turned on; when
 * clear, its feature is off.
 *
 * note: The flags are numbered this way due to assembly language
 *       compatability. They can actually be numbered any way you 
 *       like.
 */

/* MSPCFeatures */
typedef WordFlags MSPCFeatures;
#define MSPCF_16BIT		0x0004
#define MSPCF_48BIT		0x0002
#define MSPCF_FLOATING		0x0001

/*
 * Define the Tool set of the controller. The Tool set is similar to 
 * the Feature set but since the tools are independent of the features,
 * two different sets of flags must be defined. The note about numbering
 * the Feature flags also applies to the Tool flags.
 */

/* MSPCToolboxFeatures */
typedef WordFlags MSPCTFeatures;
#define MSPCTF_16BIT		0x0004
#define MSPCTF_48BIT		0x0002
#define MSPCTF_FLOATING		0x0001

/*
 * Set the default feature and tool sets. These are used in the handler
 * for the controller message MSG_GEN_CONTROLER_GET_INFO
 *
 * NOTE: the floating point calculation is not implemented yet
 */
#define MSPC_DEFAULT_FEATURES (MSPCF_16BIT | MSPCF_48BIT)

#define MSPC_DEFAULT_TOOLBOX_FEATURES (MSPCTF_16BIT | MSPCTF_48BIT)

@endc  /* MSetPrecisionControlClass */

@endlib
#endif  /* __MSET_PRECISION_CONTROL_GOH */
