/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) GeoWorks 1993 -- All Rights Reserved

PROJECT:	PC SDK
MODULE:		Sample Library -- Mandelbrot Set Library
FILE:		colorCtr.goh

AUTHOR:		Tom Lester, Aug  5, 1993

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TL	8/ 5/93   	Initial version.

DESCRIPTION:
	This file defines the MSetColorControlClass.

	$Id: msColCC.goh,v 1.1 97/04/04 15:51:10 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#ifndef __MSET_COLOR_CONTROL_GOH
#define __MSET_COLOR_CONTROL_GOH

@deflib mset		/* See msetC.goh for a description of this keyword */

@include <Objects/gCtrlC.goh>		/* include GenControlClass */

/*
 * Define the MSetColorControllerClass
 */
@class	MSetColorControlClass, GenControlClass ;

/***********************************************************************
 *              Internal Messages
 ***********************************************************************/

/*
 * Context:	 send message to MSet object to set color scheme 
 * Source:	 MSetColorControl object
 * Destination:	 output of the controller (a MSet object)
 * Interception: ok, but call superclass
 */
@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_MSCC_SET_COLOR_SCHEME;


/*
 * The GCI_output field contains the optr of the object to which
 * the controller is currently sending its "apply" messages. This
 * field is typically set to a GenTravelOption (such as TO_APP_TARGET)
 * or to a TravelOption (such as TO_OBJ_BLOCK_OUTPUT). 
 * We want to send the messages to the selected MSet object which
 * will be the application target.
 */
@default GCI_output = (TO_APP_TARGET);



/***********************************************************************
 *              Feature and Tool Sets
 ***********************************************************************/

/*
 * Define the Feature set of the controller class. To do this we define
 * a record type of type WordFlags and one flag for each feature. The 
 * record type may be named anything but typically its name will consist
 * of the acronym of the controller class with the suffix "Features."
 * When a flag is set, the feature it represents is turned on; when
 * clear, its feature is off.
 *
 * note: The flags are numbered this way due to assembly language
 *       compatability. They can actually be numbered any way you 
 *       like.
 */

/* MSCCFeatures */
typedef WordFlags MSCCFeatures;
#define MSCCF_COUNT		0x0010
#define MSCCF_BRIGHT		0x0008
#define MSCCF_GREY		0x0004
#define MSCCF_CONTRAST		0x0002
#define MSCCF_DOUG		0x0001

/*
 * Define the Tool set of the controller. The Tool set is similar to 
 * the Feature set but since the tools are independent of the features,
 * two different sets of flags must be defined. The note about numbering
 * the Feature flags also applies to the Tool flags.
 */

/* MSCCToolboxFeatures */
typedef WordFlags MSCCTFeatures;
#define MSCCTF_COUNT		0x0010
#define MSCCTF_BRIGHT		0x0008
#define MSCCTF_GREY		0x0004
#define MSCCTF_CONTRAST		0x0002
#define MSCCTF_DOUG		0x0001

/*
 * Set the default feature and tool sets. These are used in the handler
 * for the controller message MSG_GEN_CONTROLER_GET_INFO
 */
#define MSCC_DEFAULT_FEATURES (MSCCF_COUNT | MSCCF_BRIGHT | MSCCF_GREY | \
			       MSCCF_CONTRAST| MSCCF_DOUG)

#define MSCC_DEFAULT_TOOLBOX_FEATURES (MSCCTF_COUNT | MSCCTF_BRIGHT | \
				       MSCCTF_GREY | MSCCTF_CONTRAST| \
				       MSCCTF_DOUG)

@endc  /* MSetColorControlClass */

@endlib
#endif  /* __MSET_COLOR_CONTROL_GOH */
