/*
 **************************************************************************
 *  FILE:			app_mtds.goc
 *  PROJECT:		Breadbox Flashcard
 *  DESCRIPTION:	This file has methods
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "flash.goh"
#include <initfile.h>
@include "externs.goh"

/*
 ***************************************************************************
 *		globals declared in goh file
 ***************************************************************************
 */
Boolean	g_newDeck = FALSE;
Boolean	g_newCard = FALSE;
Boolean	g_isYago = FALSE;
Boolean	g_isSPN = FALSE;

FileHandle	g_flashFileHan = NullHandle;
word		g_numCards = 0;
word		g_currentCard = 0;
word		g_shuffled[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				  0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


@extern visMoniker FCDocIconMonikerList;

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_OPEN_APPLICATION for FlashCardProcessClass
 *
 * DESCRIPTION:	 sets the default directory
 *
 *
 ***********************************************************************/
@extern method FlashCardProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
word			size;
Boolean		initReadErr;
char			uiStr[50];
VisTextCharAttr     *attr;
optr			titleAttrs, cardAttrs;


    /* if we're on a Yago machine set the flag */
    initReadErr = InitFileReadStringBuffer("ui",
								 "specific",
								 &uiStr,
								 50,
								 &size);
    if (!initReadErr)  {
	  if (!strcmp(uiStr, "yago.geo")) {
		/* it is a Bro UI...
		 * now check to see if it is BroWorks on a PC */
		initReadErr = InitFileReadStringBuffer("ui",
								 "productName",
								 &uiStr,
								 50,
								 &size);

		if (strcmp(uiStr, "Yago PC-Demo"))  {
		   g_isYago = TRUE;
		   /* are we on the SuperPowerNote? */
		   initReadErr = InitFileReadStringBuffer("screen 0",
								 "driver",
								 &uiStr,
								 50,
								 &size);
		   if (!strcmp(uiStr, "cga.geo")) g_isSPN = TRUE;
		   }
		}
	  }



    if (g_isSPN) {
	  @send FlashCardView::MSG_VIS_SET_SIZE(600, 170);
	  @send FlashCardContent::MSG_VIS_SET_SIZE(600, 170);
	  @send FlashCardTop::MSG_VIS_SET_SIZE(600, 20);
	/*  @send FlashCardDeckButton::MSG_VIS_SET_SIZE(100, 20); */
	  @send FlashCardTitle::MSG_VIS_SET_SIZE(600, 20);
	/*  @send FlashCardExitButton::MSG_VIS_SET_SIZE(100, 20); */
	  @send FlashCardMiddle::MSG_VIS_SET_SIZE(600, 150);
	  @send FlashCardsUsed::MSG_VIS_SET_SIZE(100, 130);
	  @send FlashCardsLeft::MSG_VIS_SET_SIZE(100, 130);
	  @send CurrentFlashCard::MSG_VIS_SET_SIZE(280, 135);
	  @send FlashCardText::MSG_VIS_SET_SIZE(270, 80);
	  titleAttrs = @TitleSPNCharAttrs;
	  cardAttrs = @CardSPNCharAttrs;
	  @call FlashCardTitle::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @call FlashCardTitle::MSG_META_DELETE_VAR_DATA(
					   ATTR_VIS_TEXT_ADD_SPACE_TO_ALL_LINES);
	  @call FlashCardTitle::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else {
	  @send FlashCardView::MSG_VIS_SET_SIZE(600, 400);
	  @send FlashCardContent::MSG_VIS_SET_SIZE(600, 400);
	  @send FlashCardTop::MSG_VIS_SET_SIZE(600, 30);
	/*  @send FlashCardDeckButton::MSG_VIS_SET_SIZE(100, 30); */
	  @send FlashCardTitle::MSG_VIS_SET_SIZE(600, 40);
	/*  @send FlashCardExitButton::MSG_VIS_SET_SIZE(100, 30); */
	  @send FlashCardMiddle::MSG_VIS_SET_SIZE(600, 360);
	  @send FlashCardsUsed::MSG_VIS_SET_SIZE(100, 260);
	  @send FlashCardsLeft::MSG_VIS_SET_SIZE(100, 260);
	  @send CurrentFlashCard::MSG_VIS_SET_SIZE(280, 330);
	  @send FlashCardText::MSG_VIS_SET_SIZE(270, 250);
	  titleAttrs = @TitleCharAttrs;
	  cardAttrs = @CardCharAttrs;
	  }

    MemLock(OptrToHandle(titleAttrs));
    attr = LMemDeref(titleAttrs);
    @call FlashCardTitle::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    @call FlashCardTitle::MSG_VIS_TEXT_SET_CHAR_ATTR(
			 attr,
			 TEXT_ADDRESS_PAST_END,
			 0);
    @call FlashCardTitle::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    attr = LMemDeref(cardAttrs);
    @call FlashCardText::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    @call FlashCardText::MSG_VIS_TEXT_SET_CHAR_ATTR(
			 attr,
			 TEXT_ADDRESS_PAST_END,
			 0);
    @call FlashCardText::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
    MemUnlock(OptrToHandle(titleAttrs));

    @callsuper();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_CLOSE_APPLICATION for FlashCardProcessClass
 *
 * DESCRIPTION:	 does some closing stuff
 *
 *
 ***********************************************************************/
@extern method FlashCardProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{


    @callsuper();

    return(0);

}


/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
 *                                              for FlashCardProcessClass
 *
 * DESCRIPTION:	Creates the new deck and opens the editor
 *
 *
 ***********************************************************************/
@extern method FlashDocumentClass, MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
{
VMFileHandle	vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
word			i;


    /* check for proper password */
    if(!PwdCheckPasswordInINI(
		  "FlashCard",
		  "pword",
		  TRUE,
		  TRUE)) return (TRUE);

    /* assign our file handle */
    g_flashFileHan = pself->GDI_fileHandle;

    /* do the map block */
	 vmbh = VMAlloc(g_flashFileHan, 1024, 0);
	 VMSetMapBlock(g_flashFileHan, vmbh);
	 mapPtr = VMLock(g_flashFileHan, vmbh, &mh);

    /* initialize things */
	 mapPtr->FDMB_version = VER_2;
    MemLock (OptrToHandle(@FullDeckMsg));
	 strcpy(mapPtr->FDMB_questionString, LMemDeref(@QHeader));
	 strcpy(mapPtr->FDMB_answerString, LMemDeref(@AHeader));
	 strcpy(mapPtr->FDMB_descriptString, LMemDeref(@Description));
	 MemUnlock (OptrToHandle(@FullDeckMsg));
    mapPtr->FDMB_numCards = 0;
    g_numCards = 0;
    g_currentCard = 0;
    for (i = 0; i < 100; i++ )  mapPtr->FDMB_cardArray[i] = 0;
    VMDirty(mh);
	 VMUnlock(mh);

    g_newDeck = TRUE;

    return (FALSE);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT for FlashCardProcessClass
 *
 * DESCRIPTION:	Opens the selected card deck
 *
 *
 ***********************************************************************/
@extern method FlashDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
{
VMFileHandle	vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;


    /* assign our file handle */
    g_flashFileHan = pself->GDI_fileHandle;

	 /* this is no longer the file title
	 @call FlashCardTitle::MSG_VIS_TEXT_REPLACE_ALL_PTR(pself->GDI_fileName, 0);*/
	 /* it's the file description */
    /* get our VMmap block */
    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);
	 @call FlashCardTitle::MSG_VIS_TEXT_REPLACE_ALL_PTR(mapPtr->FDMB_descriptString, 0);

	 /* check for the current file version (VER_2 has the file description) */
	 if (mapPtr->FDMB_version != VER_2) {
	  NotifyDBox (@OldVersionMsg);
	  VMUnlock(mh);
	  @call oself::MSG_GEN_DOCUMENT_CLOSE(0);
     return;
	  }

	 VMUnlock(mh);


    if(g_newDeck) @send process::MSG_OPEN_EDITOR();
    /* or show the deck */
    else ShowDeck();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT for GPCBnkrDocumentClass
 *
 * DESCRIPTION:	Called when the doc is closed.
 *              
 *
 ***********************************************************************/

@extern method FlashDocumentClass, MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
{

    g_flashFileHan = NullHandle;



}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED for GPCBnkrDocumentClass
 *
 * DESCRIPTION:	Called on Save As.
 *
 *
 ***********************************************************************/

@extern method FlashDocumentClass, MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED
{

	 g_flashFileHan = pself->GDI_fileHandle;

	 /* this is no longer the file name
	 @call FlashCardTitle::MSG_VIS_TEXT_REPLACE_ALL_PTR(pself->GDI_fileName, 0);
	 */

}
/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR
 *                                             for FlashDocCtrlClass
 *
 * DESCRIPTION:	To direct opens & saves to FlashCard folder.
 *              
 *
 ***********************************************************************/

@extern method FlashDocCtrlClass, MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR
{
 DiskHandle	/*dh,*/ drive;
 Boolean		notThere;


    @callsuper();

    MemLock (OptrToHandle(@DeckFolder));

    if (!g_isYago) {  /* on a PC */
	  notThere = @call fileSelector::MSG_GEN_PATH_SET
					 (LMemDeref(@DeckFolder),
					 SP_DOCUMENT);
	  if(notThere)  @call fileSelector::MSG_GEN_PATH_SET(".", SP_DOCUMENT);
	  }

    else  { /* on a yago */
	  drive = DiskRegisterDiskSilently(5); /* drive F */
	  notThere = @call fileSelector::MSG_GEN_PATH_SET
					    (LMemDeref(@YagoDeckFolder),
					    drive);
	  if (notThere) @call fileSelector::MSG_GEN_PATH_SET
					    (LMemDeref(@YagoDocFolder),
					    drive);
	  }
    MemUnlock (OptrToHandle(@DeckFolder));
/*	  dh = FileSetCurrentPath(SP_DOCUMENT, LMemDeref(@DeckFolder));
*/
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_INSTALL_TOKEN for FlashCardProcessClass
 *
 * DESCRIPTION:	Associates token with docs
 *
 *                  needs token.h include
 ***********************************************************************/

@extern method FlashCardProcessClass, MSG_GEN_PROCESS_INSTALL_TOKEN
{
    dword	FCTokenChars;
    TokenFlags	FCTokenFlags;

    @callsuper();

    FCTokenChars = TOKEN_CHARS('F', 'C', (dword) 'd', (dword) '1');
	/* it won't work w/o the two casts */
    if (!TokenGetTokenInfo(FCTokenChars, 16431, &FCTokenFlags)) {

	  TokenDefineToken(FCTokenChars,
		16431,
		@FCDocIconMonikerList,
		0);
    }
}

/***********************************************************************
 *
 * FUNCTION:	AckDBox 
 *              (char* string1, optr ackMsg)
 * CALLED BY:	
 *      	
 *
 * STRATEGY:    returns user's Yes or No response
 *		
 *
 ***********************************************************************/

word AckDBox (char* string1, optr ackMsg)
{
    char*		msgString;


    MemLock (OptrToHandle(@FullDeckMsg));
    msgString = LMemDeref(ackMsg);
    /* put up an Are you sure box */
    if ((UserStandardDialog((char*)0,
			    (char*)0,
			    (char*)0,
			    string1,
			    msgString,
			    ((CDT_WARNING << CDBF_DIALOG_TYPE_OFFSET) |
			    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
			    ) != IC_YES))  {
	  MemUnlock (OptrToHandle(@FullDeckMsg));
       return(ACK_NO);
       }
	 else  {
	  MemUnlock (OptrToHandle(@FullDeckMsg));
       return(ACK_YES);
       }

}

/***********************************************************************
 *
 * FUNCTION:	NotifyDBox
 *              (optr notifyMsg)
 * CALLED BY:
 *
 *
 * STRATEGY:    Puts up selected notification box
 *
 *
 ***********************************************************************/

void NotifyDBox (optr notifyMsg)
{


    /* put up a notification box */
    MemLock (OptrToHandle(@FullDeckMsg));
    UserStandardDialog((char*)0,
		       (char*)0,
		       (char*)0,
		       (char*)0,
			  LMemDeref(notifyMsg),
		       ((CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
		       (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET)));
    MemUnlock (OptrToHandle(@FullDeckMsg));

}

/***********************************************************************
 *
 * FUNCTION:	ShowDeck
 *              ()
 * CALLED BY:
 *
 *
 * STRATEGY:    shows new (selected) deck
 *
 *
 ***********************************************************************/
void ShowDeck()
{
VMBlockHandle	vmbh;
MemHandle		mh;
FlashDeckMapBlock	*mapPtr;
/*char			fileName[DECK_TITLE_SIZE];*/


    /* get our VMmap block */
    vmbh = VMGetMapBlock(g_flashFileHan);
    mapPtr = VMLock(g_flashFileHan, vmbh, &mh);

    /* store the card info */
    g_numCards = mapPtr->FDMB_numCards;
    VMUnlock(mh);

    /* set the current card */
    g_currentCard = 0;

    /* shuffle the deck */
    Shuffle();
    
    /* and the first card */
    @send CurrentFlashCard::MSG_SET_TO_QUESTION();
    @send CurrentFlashCard::MSG_VIS_REDRAW_ENTIRE_OBJECT();

    /* and redraw the decks */
    @send FlashCardsLeft::MSG_VIS_REDRAW_ENTIRE_OBJECT();
    @send FlashCardsUsed::MSG_VIS_REDRAW_ENTIRE_OBJECT();
}

/***********************************************************************
 *
 * FUNCTION:	Shuffle
 *              ()
 * CALLED BY:
 *
 *
 * STRATEGY:    shuffles the deck
 *
 *
 ***********************************************************************/
void Shuffle()
{
word			unShuffled[100];
word			i, j, max, randNum;


    /* initialize the unshuffled array */
    for (i = 0; i < g_numCards; i++)  {
	  unShuffled[i] = i;
	  }

    max = g_numCards - 1;
    /* initialize randomizer using TimerGetCount as a seed (dword) */
    FloatRandomize(RGIF_USE_SEED, TimerGetCount());
    
    for (i = 0; i < g_numCards; i++)  {
	  if (i == g_numCards - 1)  g_shuffled[i] = unShuffled[0];
	  else {
		/* get a random # between 0(incl) and max(excl) */
		FloatWordToFloat(max + 1);	/* the 1 is to include max */
		FloatRandomN();
		randNum = (word) FloatFloatToDword();
		/* get the ith shuffled card */
		g_shuffled[i] = unShuffled[randNum];
		/* now remove that element from unshuffled array */
		if (randNum < max)  {
		   for (j = randNum; j < max; j++)  {
			 unShuffled[j] = unShuffled[j + 1];
			 }
		   }
		}
	  max--;
       }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_KBD_CHAR for TextEnableClass
 *
 *
 *
 ***********************************************************************/

@extern method TextEnableClass, MSG_META_KBD_CHAR
{
 char		txtString[DECK_TITLE_SIZE];
 word		length;


    @callsuper();

    /* is there text? */
    length = @call self::MSG_VIS_TEXT_GET_ALL_PTR(txtString);
    if (!length) @send pself->TE_button::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
    else  @send pself->TE_button::MSG_GEN_SET_ENABLED(VUM_NOW);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_META_KBD_CHAR for FlashApplicationClass
 *
 *             Does a close/cancel action on the dialog box
 *             when the user presses ESC
 *
 ***********************************************************************/

@extern method FlashApplicationClass, MSG_META_KBD_CHAR
{


    if ((flags & CF_FIRST_PRESS) &&
		 ((character & 0xFF) == C_ESCAPE)) {
	  if (@call EditDBox::MSG_GEN_GET_USABLE())
		@send process::MSG_CLOSE_EDITOR();
	  }
    else  @callsuper();

}
