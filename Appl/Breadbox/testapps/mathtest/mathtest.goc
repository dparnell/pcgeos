/********************************************************************
 *
 * Testprogramm
 *
 *******************************************************************/

@include <stdapp.goh>
#include <math.h>
#include <Ansi/string.h>
#include <Ansi/stdio.h>
#include <Ansi/stdlib.h>


void assignFloatNum(FloatNum *floatNum, double value);
Boolean compareFloatNum(FloatNum *num1, FloatNum *num2);
void clearText();
void appendTextLine(char* textToAppend);
void appendStringErgebnis(char *result);
void appendNewLine();
void appendTopic(char* topic);
void appendResult(Boolean result);


@class MathtestProcessClass, GenProcessClass;

    @message void MSG_RUN_TEST_PUSH_POP();
    @message void MSG_RUN_TEST_COMPESDI();
    @message void MSG_RUN_TEST_ASCII_TO_FLOAT();
    @message void MSG_RUN_TEST_FLOAT_TO_ASCII_STD_FORMAT();
    @message void MSG_RUN_TEST_FLOAT_TO_ASCII();
    @message void MSG_RUN_TEST_FORMAT_NUMBER();

@endc; 
@classdecl MathtestProcessClass, neverSaved;


@start AppResource;

@object GenApplicationClass MathtestApp = {
    GI_visMoniker = list { @TestTextMoniker };
    GI_comp = @TestPrimary;

    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) = @TestPrimary;
}

@visMoniker TestTextMoniker = "Mathtest";

@end AppResource;


@start Interface;

@object GenPrimaryClass TestPrimary  = {
    GI_comp = @TestInteraction;
}

@object GenInteractionClass TestInteraction = {
    GI_comp = @TestButtonPushPop, 
            @TestButtonComp,
            @TestButtonAsciiToFloat,
            @TestButtonFloatToAsciiStdFormat,
            @TestButtonFloatToAscii,
            @TestButtonFormatNumber,
            @TestText;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}

@object GenTriggerClass TestButtonPushPop = {
    GI_visMoniker = "Test FloatPushNumber/FloatPopNumber";
    GTI_actionMsg = MSG_RUN_TEST_PUSH_POP;
	GTI_destination = process;
}

@object GenTriggerClass TestButtonComp = {
    GI_visMoniker = "Test FloatCompESDI";
    GTI_actionMsg = MSG_RUN_TEST_COMPESDI;
	GTI_destination = process;
}

@object GenTriggerClass TestButtonAsciiToFloat = {
    GI_visMoniker = "Test AsciiToFloat";
    GTI_actionMsg = MSG_RUN_TEST_ASCII_TO_FLOAT;
	GTI_destination = process;
}

@object GenTriggerClass TestButtonFloatToAsciiStdFormat = {
    GI_visMoniker = "Test FloatToAsciiStdFormat";
    GTI_actionMsg = MSG_RUN_TEST_FLOAT_TO_ASCII_STD_FORMAT;
	GTI_destination = process;
}

@object GenTriggerClass TestButtonFloatToAscii = {
    GI_visMoniker = "Test FloatToAscii";
    GTI_actionMsg = MSG_RUN_TEST_FLOAT_TO_ASCII;
	GTI_destination = process;
}

@object GenTriggerClass TestButtonFormatNumber = {
    GI_visMoniker = "Test FormatNumber";
    GTI_actionMsg = MSG_RUN_TEST_FORMAT_NUMBER;
	GTI_destination = process;
}

@object GenTextClass TestText = {
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
	HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
}

@end Interface;


@method MathtestProcessClass, MSG_RUN_TEST_PUSH_POP {
    FloatNum floatNum_minus_1;
    FloatNum floatNum_0;
    FloatNum floatNum_1;
    FloatNum floatNum_3141_59;
    FloatNum result;

    assignFloatNum(&floatNum_minus_1, -1.0);
    assignFloatNum(&floatNum_0, 0);
    assignFloatNum(&floatNum_3141_59, 3141.59);

    clearText();
    appendTopic("=== Start FloatPushNumber Test ===" );
    
    appendTextLine(" Push floatNum_minus_1 to fp-stack");
    FloatPushNumber(&floatNum_minus_1);
    appendResult( FloatDepth() == 1);

    appendTextLine(" Push floatNum_0 to fp-stack");
    FloatPushNumber(&floatNum_0);
    appendResult(FloatDepth() == 2);

    appendTextLine(" Push floatNum_1 to sp-stack");
    FloatPushNumber(&floatNum_1);
    appendResult(FloatDepth() == 3);

    appendTextLine(" Push floatNum_3141_59 to fp-stack");
    FloatPushNumber(&floatNum_3141_59);
    appendResult(FloatDepth() == 4);

    appendTopic("=== Ende FloatPushNumber Test ===");


    appendTopic("=== Start FloatPopNumber Test ===");
    
    appendTextLine(" Pop FloatNum from fp-stack");
    FloatPopNumber(&result);
    appendResult(FloatDepth() == 3 && compareFloatNum(&result, &floatNum_3141_59));

    appendTextLine(" Pop FloatNum from fp-stack");
    FloatPopNumber(&result);
    appendResult(FloatDepth() == 2 && compareFloatNum(&result, &floatNum_1));

    appendTextLine(" Pop FloatNum from fp-stack");
    FloatPopNumber(&result);
    appendResult(FloatDepth() == 1 && compareFloatNum(&result, &floatNum_0));

    appendTextLine(" Pop FloatNum from fp-stack");
    FloatPopNumber(&result);
    appendResult(FloatDepth() == 0 && compareFloatNum(&result, &floatNum_minus_1));

    appendTopic("=== Ende FloatPopNumber Test ===" );
}

@method MathtestProcessClass, MSG_RUN_TEST_COMPESDI {
    FloatNum floatNum_minus_1;
    FloatNum floatNum_0;
    FloatNum floatNum_1;

    assignFloatNum(&floatNum_minus_1, -1.0);
    assignFloatNum(&floatNum_0, 0.0);
    assignFloatNum(&floatNum_1, 1.0);

    clearText();
    appendTopic("=== Starte PushCompESDI Test ===" );

    // szenario: floatNum_minus_1 < floatNum_0
    //           ^--stack         ^--param
    appendTextLine(" Push floatNum_minus_1 to fp-stack");
    FloatPushNumber(&floatNum_minus_1);
    appendTextLine(" Compare with floatNum_0");
    appendResult(FloatCompESDI(&floatNum_0) == 1);
    FloatDrop();

    // szenario: floatNum_1 > floatNum_minus_1
    //           ^--stack   ^--param
    appendTextLine(" Push floatNum_1 to fp-stack");
    FloatPushNumber(&floatNum_1);
    appendTextLine(" Compare with floatNum_minus_1");
    appendResult(FloatCompESDI(&floatNum_minus_1) == -1);
    FloatDrop();

    // szenario: floatNum_1 == floatNum_1
    //           ^--stack    ^--param
    appendTextLine(" Push floatNum_1 to fp-stack");
    FloatPushNumber(&floatNum_1);
    appendTextLine(" Compare with floatNum_1");
    appendResult(FloatCompESDI(&floatNum_1) == 0);
    FloatDrop();

    // szenario: floatNum_0 == floatNum_0
    //           ^--stack    ^--param
    appendTextLine(" Push floatNum_0 to fp-stack");
    FloatPushNumber(&floatNum_0);
    appendTextLine(" Compare with floatNum_0");
    appendResult(FloatCompESDI(&floatNum_0) == 0);
    FloatDrop();

    appendTopic("=== Ende FloatCompESDI Test ===" );
}

@method MathtestProcessClass, MSG_RUN_TEST_ASCII_TO_FLOAT {
    FloatNum floatNum_minus_1;
    FloatNum floatNum_0;
    FloatNum floatNum_1;

    char string_minus_1[] = "-1.0";
    char string_0[] = "0.0";
    char string_1[] = "1.0";

    FloatNum result;

    assignFloatNum(&floatNum_minus_1, -1.0);
    assignFloatNum(&floatNum_0, 0.0);
    assignFloatNum(&floatNum_1, 1.0);

    clearText();
    appendTopic("=== Starte AsciiToFloat Test ===" );

    appendTextLine(" Convert -1.0 via fp-stack");
    FloatAsciiToFloat( FAF_PUSH_RESULT, strlen(string_minus_1), string_minus_1, NULL );
    appendResult( FloatCompESDI(&floatNum_minus_1) == 0 );
    FloatDrop();

    appendTextLine(" Convert 0.0 via fp-stack");
    FloatAsciiToFloat( FAF_PUSH_RESULT, strlen(string_0), string_0, NULL );
    appendResult( FloatCompESDI(&floatNum_0) == 0 );
    FloatDrop();

    appendTextLine(" Convert 1.0 via fp-stack");
    FloatAsciiToFloat( FAF_PUSH_RESULT, strlen(string_1), string_1, NULL );
    appendResult( FloatCompESDI(&floatNum_1) == 0 );
    FloatDrop();

    appendTextLine(" Convert -1.0 via pointer");
    FloatAsciiToFloat( FAF_STORE_NUMBER, strlen(string_minus_1), string_minus_1, &result );
    appendResult( compareFloatNum(&result, &floatNum_minus_1 ));

    appendTextLine(" Convert 0.0 via pointer");
    FloatAsciiToFloat( FAF_STORE_NUMBER, strlen(string_0), string_0, &result );
    appendResult( compareFloatNum(&result, &floatNum_0 ));

    appendTextLine(" Convert 1.0 via pointer");
    FloatAsciiToFloat( FAF_STORE_NUMBER, strlen(string_1), string_1, &result );
    appendResult( compareFloatNum(&result, &floatNum_1 ));

    appendTopic("=== Ende AsciiToFloat Test ===" );
}

@method MathtestProcessClass, MSG_RUN_TEST_FLOAT_TO_ASCII_STD_FORMAT {
    FloatNum floatNum_minus_1;
    FloatNum floatNum_0;
    FloatNum floatNum_1;
    FloatNum floatNum_3141_59;
    
    char result[MAX_CHARS_FOR_NORMAL_NUMBER];

    assignFloatNum(&floatNum_minus_1, -1.0);
    assignFloatNum(&floatNum_0, 0.0);
    assignFloatNum(&floatNum_1, 1.0);
    assignFloatNum(&floatNum_3141_59, 3141.59);

    clearText();
    appendTopic("=== Starte FloatToAscii Std Format Test ===" );

    appendTextLine(" Convert -1.0 to String");
    FloatFloatToAscii_StdFormat(result, &floatNum_minus_1, FFAF_FROM_ADDR, 4, 2);
    appendStringErgebnis(result);

    appendTextLine(" Convert 0.0 to String");
    FloatFloatToAscii_StdFormat(result, &floatNum_0, FFAF_FROM_ADDR, 4, 2);
    appendStringErgebnis(result);

    appendTextLine(" Convert 1.0 to String");
    FloatFloatToAscii_StdFormat(result, &floatNum_1, FFAF_FROM_ADDR, 4, 2);
    appendStringErgebnis(result);

    appendTextLine(" Convert 3141.59 to String");
    FloatFloatToAscii_StdFormat(result, &floatNum_3141_59, FFAF_FROM_ADDR, 8, 2);
    appendStringErgebnis(result);

    appendTopic("=== Ende FloatToAscii Std Format Test ===");
}

@method MathtestProcessClass, MSG_RUN_TEST_FLOAT_TO_ASCII {
    FloatNum floatNum_minus_1;
    FloatNum floatNum_0;
    FloatNum floatNum_1;
    FloatNum floatNum_3141_59;
    
    char result[FLOAT_TO_ASCII_NORMAL_BUF_LEN];
    FFA_stackFrame stackFrame;

    assignFloatNum(&floatNum_minus_1, -1.0);
    assignFloatNum(&floatNum_0, 0.0);
    assignFloatNum(&floatNum_1, 1.0);
    assignFloatNum(&floatNum_3141_59, 3141.59);

    stackFrame.FFA_float.FFA_params.formatFlags =
        FFAF_FROM_ADDR |
        FFAF_USE_COMMAS |
        FFAF_NO_TRAIL_ZEROS |
        FFAF_HEADER_PRESENT;
    stackFrame.FFA_float.FFA_params.decimalOffset = 0;
    stackFrame.FFA_float.FFA_params.totalDigits = MAX_DIGITS_FOR_NORMAL_NUMBERS;
    stackFrame.FFA_float.FFA_params.decimalLimit = 8;

    strcpy( stackFrame.FFA_float.FFA_params.preNegative,  "-");
    strcpy( stackFrame.FFA_float.FFA_params.postNegative, "");
    strcpy( stackFrame.FFA_float.FFA_params.prePositive,  "");
    strcpy( stackFrame.FFA_float.FFA_params.postPositive, "");
    strcpy( stackFrame.FFA_float.FFA_params.header,       "");
    strcpy( stackFrame.FFA_float.FFA_params.trailer,      "");

    clearText();
    appendTopic("=== Starte FloatToAscii Test ===");

    appendTextLine(" Convert -1.0 to String");
    FloatFloatToAscii(&stackFrame, result, &floatNum_minus_1);
    appendStringErgebnis(result);

    appendTextLine(" Convert 0.0 to String");
    FloatFloatToAscii(&stackFrame, result, &floatNum_0);
    appendStringErgebnis(result);

    appendTextLine(" Convert 1.0 to String");
    FloatFloatToAscii(&stackFrame, result, &floatNum_1);
    appendStringErgebnis(result);

    appendTextLine(" Convert 3141.59 to String");
    FloatFloatToAscii(&stackFrame, result, &floatNum_3141_59);
    appendStringErgebnis(result);

    appendTopic("=== Ende FloatToAscii Test ===");
}

@method MathtestProcessClass, MSG_RUN_TEST_FORMAT_NUMBER {
    FloatNum floatNum_minus_1;
    FloatNum floatNum_0;
    FloatNum floatNum_1;
    FloatNum floatNum_3141_59;

    char result[FLOAT_TO_ASCII_HUGE_BUF_LEN];

    assignFloatNum(&floatNum_minus_1, -1.0);
    assignFloatNum(&floatNum_0, 0.0);
    assignFloatNum(&floatNum_1, 1.0);
    assignFloatNum(&floatNum_3141_59, 3141.59);

    clearText();
    appendTopic("=== Starte FormatNumber ===" );

    appendTextLine("Format long FloatNum -1.0");
    FloatFormatNumber( FORMAT_ID_FIXED_WITH_COMMAS, NullHandle, NullHandle, &floatNum_minus_1, result);
    appendStringErgebnis(result);

    appendTextLine("Format long FloatNum 1.0");
    FloatFormatNumber( FORMAT_ID_FIXED_WITH_COMMAS, NullHandle, NullHandle, &floatNum_1, result);
    appendStringErgebnis(result);

    appendTextLine("Format long FloatNum 0.0");
    FloatFormatNumber( FORMAT_ID_FIXED_WITH_COMMAS, NullHandle, NullHandle, &floatNum_0, result);
    appendStringErgebnis(result);

    appendTextLine("Format long FloatNum 3141.59");
    FloatFormatNumber( FORMAT_ID_FIXED_WITH_COMMAS, NullHandle, NullHandle, &floatNum_3141_59, result);
    appendStringErgebnis(result);
    
    appendTopic("=== Ende FormatNumber Test ===");
}

void assignFloatNum(FloatNum *floatNum, double value) {
    FloatIEEE64ToGeos80(&value);
    FloatPopNumber(floatNum);
}

Boolean compareFloatNum(FloatNum *num1, FloatNum *num2) {
    if(num1->F_mantissa_wd0 != num2->F_mantissa_wd0)
        return FALSE;
    if(num1->F_mantissa_wd1 != num2->F_mantissa_wd1)
        return FALSE;
    if(num1->F_mantissa_wd2 != num2->F_mantissa_wd2)
        return FALSE;
    if(num1->F_exponent != num2->F_exponent)
        return FALSE;
    return TRUE;
}

void clearText() {
    @call TestText::MSG_VIS_TEXT_DELETE_ALL();
}

void appendText(char* textToAppend) {
   @call TestText::MSG_VIS_TEXT_APPEND_PTR(textToAppend, 0);
}

void appendTextLine(char* textToAppend) {
   appendText(textToAppend);
   appendText("\n\r");
}

void appendResult(Boolean result) {
    if( result )
        appendText("  Expected result occurred.");
    else
        appendText("  Expected result not occurred!");
    appendNewLine();
}

void appendStringErgebnis(char *result) {
    appendText("Result as String: ");
    appendText(result);
    appendText("\r\n"); 
}

void appendNewLine() {
    appendText("\r\n"); 
}

void appendTopic(char* topic) {
    appendNewLine();
    appendTextLine(topic);
    appendNewLine();
}
