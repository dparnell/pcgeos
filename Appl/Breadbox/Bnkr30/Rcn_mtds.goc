
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			rcn_mtds.goc
 *  PROJECT:		GPC Banker
 *  DESCRIPTION:	This file has methods for the reconcile
 *				functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "bnkr30.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */


/****************************************************************************
 *		Code for GPCBnkrProcessClass Reconcile stuff
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_RECONCILE for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Calls the dialog box when the trigger
 *              is clicked 
 *     
 *              
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_OPEN_RECONCILE
{
AcctStruct		*acct;
DBGroupAndItem		mapitem;
DBMapStruct*		mapPtr;
char				bankString[ENTRY_SIZE * 2];
char				dateString[DATE_TIME_BUFFER_SIZE + 1];
TimerDateAndTime	date;
char				amtString[MAX_TEXT_LEN];
FloatNum			balance;
word				daysInMonth;


    /* standard set-up */
    mapitem = DBGetMap(GPCBnkrFile);
    mapPtr = DBLockUngrouped(GPCBnkrFile, mapitem);
    acct = (AcctStruct *) (mapPtr + sizeof(DBMapStruct));

    /* get and show acct info */
    MemLock (OptrToHandle(@ReconMoniker));
    strcpy(bankString, LMemDeref(@ReconMoniker));
    strcat(bankString, acct[currentAcct].AS_bank);
    strcat(bankString, LMemDeref(@spNumSym));
    MemUnlock (OptrToHandle(@ReconMoniker));
    strcat(bankString, acct[currentAcct].AS_number);
    @call ReconcileDBox::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
		    bankString,
		    VUM_NOW);


    /* do the beginning date */
    if (acct[currentAcct].AS_reconYear == 0)  {
	  /* clear the field */
	  @call RCBeginDate::MSG_VIS_TEXT_DELETE_ALL();
	  }
      else  {
	  /* use last stmt date */
       date.TDAT_year = acct[currentAcct].AS_reconYear;
       date.TDAT_month = acct[currentAcct].AS_reconMonth;
       date.TDAT_day = acct[currentAcct].AS_reconDay;
	  /* convert to string and display */
	  LocalFormatDateTime(dateString, DTF_SHORT, &date);
       @call RCBeginDate::MSG_VIS_TEXT_REPLACE_ALL_PTR(dateString, 0);
	  } /* end of new stmt date else */

    /* do the ending date */
    if (acct[currentAcct].AS_reconYear == 0)  {
       /* get the system date */
       TimerGetDateAndTime(&date);
       }
      else  {
       /* calc last stmt date plus one month */
       date.TDAT_year = acct[currentAcct].AS_reconYear;
       date.TDAT_month = acct[currentAcct].AS_reconMonth;
       date.TDAT_day = acct[currentAcct].AS_reconDay;
       date.TDAT_month++;
       if (date.TDAT_month == 13)  {
	  date.TDAT_month = 1;
	  date.TDAT_year++;
	  }
       daysInMonth = LocalCalcDaysInMonth(
                        date.TDAT_year, date.TDAT_month);
       if (date.TDAT_day > daysInMonth)  {
	  date.TDAT_day = daysInMonth;
          }
       } /* end of new stmt date else */
    /* convert to string and display */
    LocalFormatDateTime(dateString, DTF_SHORT, &date);
    @call RCEndDate::MSG_VIS_TEXT_REPLACE_ALL_PTR(dateString, 0);
    @call RCChargeDate::MSG_VIS_TEXT_REPLACE_ALL_PTR(dateString, 0);
    @call RCCreditDate::MSG_VIS_TEXT_REPLACE_ALL_PTR(dateString, 0);

    /* clear charges and credits amounts */
    @send RCChargeAmt::MSG_VIS_TEXT_DELETE_ALL();
    @send RCCreditAmt::MSG_VIS_TEXT_DELETE_ALL();


    /* put in charges and credits categories */
    @call RCChargeCat::MSG_VIS_TEXT_REPLACE_ALL_PTR(
		 acct[currentAcct].AS_reconChgCat, 0);
    @call RCCreditCat::MSG_VIS_TEXT_REPLACE_ALL_PTR(
		 acct[currentAcct].AS_reconCrdtCat, 0);

    /* clear ending balance */
    @send RCEnd::MSG_VIS_TEXT_DELETE_ALL();

    /* get saved starting balance */
    balance = acct[currentAcct].AS_reconStartBal;

    DBUnlock(mapPtr);

    FloatPushNumber(&balance);
    Float0();
    if (!FloatCompAndDrop())  {
       /* show the starting balance */
       FloatFloatToAscii_StdFormat(amtString,
			       &balance,
                               FFAF_FROM_ADDR,
                               14,
                               2);
	  @call RCBegin::MSG_VIS_TEXT_REPLACE_ALL_PTR(amtString, 0);
	  }
    else  @send RCBegin::MSG_VIS_TEXT_DELETE_ALL();

    /* Open the dialog box */
    @call ReconcileDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RECONCILE for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Opens a scrolling dlist for the user to 
 *              	select cleared items.  First inits the dlist
 *              	and inserts working balances.
 *              
 *
 ***********************************************************************/

@extern method GPCBnkrProcessClass, MSG_RECONCILE
{
word                i, numNotCleared = 0;
MemHandle			mh;
TransSortStruct	*trArrayElement;
char				beginInString[DOLLAR_IN_SIZE], amtString[MAX_TEXT_LEN];
char				endInString[DOLLAR_IN_SIZE], amtInString[DOLLAR_IN_SIZE];
char				dateString[DATE_SIZE], cat[CAT_SIZE];
word				length, beginLength, endLength;
FloatNum			clBal, stmtBal, diff, amount;
dword			beginDateNum, endDateNum;
TimerDateAndTime	date;


    /* Exit if dates no good */
    @call RCBeginDate::MSG_VIS_TEXT_GET_ALL_PTR(dateString);
    if (!DateCheck(dateString)) {
	  @send RCBeginDate::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }
    LocalParseDateTime(dateString, DTF_SHORT, &date);
    /* convert to comparison number */
    beginDateNum = MakeDateNum(date);

    @call RCEndDate::MSG_VIS_TEXT_GET_ALL_PTR(dateString);
    if (!DateCheck(dateString)) {
	  @send RCEndDate::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }
    LocalParseDateTime(dateString, DTF_SHORT, &date);
    /* convert to comparison number */
    endDateNum = MakeDateNum(date);

    /* check end before beginning */
    if (beginDateNum > endDateNum)  {  
	  NotifyDBox(0, @ReconEndBeginDateMsg);
	  @send RCBeginDate::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }

    @call RCChargeDate::MSG_VIS_TEXT_GET_ALL_PTR(dateString);
    if (!DateCheck(dateString)) {
	  @send RCChargeDate::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }
    @call RCCreditDate::MSG_VIS_TEXT_GET_ALL_PTR(dateString);
    if (!DateCheck(dateString)) {
	  @send RCCreditDate::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }

    /* check the balances */
    beginLength = @call RCBegin::MSG_VIS_TEXT_GET_ALL_PTR(beginInString);
    /* Exit if balance invalid */
    if (!AmountChecksOK(beginInString, TRUE, TRUE))  {
	  /* send the focus back to the balance field */
	  @send RCBegin::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }
    endLength = @call RCEnd::MSG_VIS_TEXT_GET_ALL_PTR(endInString);
    /* Exit if balance invalid */
    if (!AmountChecksOK(endInString, TRUE, TRUE))  {
	  /* send the focus back to the balance field */
	  @send RCEnd::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }
    if ((beginLength == 0) || (endLength == 0))  {
	  /* put up are you sure box */
	  if (AckDBox(0, 0, @NoReconBalMsg) == ACK_NO) return;
	  }
    length = @call RCChargeAmt::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    if (length) {
	  if (!AmountChecksOK(amtInString, FALSE, TRUE))  {
		/* send the focus back to the field */
		@send RCChargeAmt::MSG_META_GRAB_FOCUS_EXCL();
		return;
		}
	  }
    length = @call RCCreditAmt::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    if (length) {
	  if (!AmountChecksOK(amtInString, FALSE, TRUE))  {
		/* send the focus back to the field */
		@send RCCreditAmt::MSG_META_GRAB_FOCUS_EXCL();
		return;
		}
	  }

    /* check the charges cat */
    length = @call RCChargeCat::MSG_VIS_TEXT_GET_ALL_PTR(cat);
    if (length)  {
	  if (CheckIsNewCat(cat) == FALSE)  {
		/* it was cancel */
		return;
		}
	  /* otherwise the user added the cat or ignored it as new */
	  }

    /* check the credits cat */
    length = @call RCCreditCat::MSG_VIS_TEXT_GET_ALL_PTR(cat);
    if (length)  {
	  if (CheckIsNewCat(cat) == FALSE)  {
		/* it was cancel */
		return;
		}
	  /* otherwise the user added the cat or ignored it as new */
	  }

    /* set reconciliation flag */
    reconcileFlag = TRUE;

    /* get the index array VMBlock */
    transListVMBHandle = VMFind(GPCBnkrFile, NullHandle, (currentAcct*10)+ALLSORT);
    VMLock(GPCBnkrFile, transListVMBHandle ,&mh);

    /* cycle thru the index elements to count uncleared trans */
    for (i=0; i<numTrans; i++)  {
	  trArrayElement = ChunkArrayElementToPtrHandles(
		   mh,
		   transListChunkArray,
		   i,
		   0);
	  if (!trArrayElement->TSS_cleared)  numNotCleared++;
    }  /* end of cycle through for */
    VMUnlock(mh);

    /* initialize the dlist with the number of uncleared trans */
    @send RCLDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numNotCleared);

    /* get and show the balances */
    /* get beginning balance */
    FloatAsciiToFloat(FAF_STORE_NUMBER,
		     beginLength,
		     beginInString,
		     &clBal);
    /* now sub the charges on this stmt */
    length = @call RCChargeAmt::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    /* if any */
    if (*amtInString)  {
       FloatAsciiToFloat(FAF_STORE_NUMBER,
		     length,
		     amtInString,
		     &amount);
       FloatPushNumber(&clBal);
       FloatPushNumber(&amount);
       FloatSub();
       FloatPopNumber(&clBal);
       }

    /* and add the credits on this stmt */
    length = @call RCCreditAmt::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    /* if any */
    if (*amtInString)  {
       FloatAsciiToFloat(FAF_STORE_NUMBER,
		     length,
		     amtInString,
		     &amount);
       FloatPushNumber(&clBal);
       FloatPushNumber(&amount);
       FloatAdd();
       FloatPopNumber(&clBal);
       }

    FloatFormatNumber(FORMAT_ID_FIXED_WITH_COMMAS,
				  NullHandle,
				  NullHandle,
				  &clBal,
				  amtString);

    /* display the cleared balance */
    @call RCLClBal::MSG_VIS_TEXT_REPLACE_ALL_PTR(amtString, 0);


    /* now the ending balance */
    /* convert the amount to a value */
    FloatAsciiToFloat(FAF_STORE_NUMBER,
		     endLength,
		     endInString,
			&stmtBal);
    /* and back to formatted string */
    FloatFormatNumber(FORMAT_ID_FIXED_WITH_COMMAS,
				  NullHandle,
				  NullHandle,
				  &stmtBal,
				  amtString);
    @call RCLStmtBal::MSG_VIS_TEXT_REPLACE_ALL_PTR(amtString, 0);
    FloatPushNumber(&clBal);
    FloatPushNumber(&stmtBal);
    FloatSub();
    FloatPopNumber(&diff);
    FloatFormatNumber(FORMAT_ID_FIXED_WITH_COMMAS,
				  NullHandle,
				  NullHandle,
				  &diff,
				  amtString);

    @call RCLDiff::MSG_VIS_TEXT_REPLACE_ALL_PTR(amtString, 0);

    /* Open the list dialog box */
    @call ReconListDBox::MSG_GEN_INTERACTION_INITIATE();

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RECONCILE_MARK for GPCBnkrProcessClass
 *
 * DESCRIPTION:	When an item is selected the balances are adjusted
 *              and it is toggled cleared or !cleared.  Then since
 *              the list can't tell me which item (of multiple items)
 *              was selected we change the moniker and reset the list
 *			to no selections.
 *
 *
 ***********************************************************************/

@extern method GPCBnkrProcessClass, MSG_RECONCILE_MARK
{
TransStruct		*trans;
DBItem			transItem;
word                i, j, length;
char				amtInString[DOLLAR_IN_SIZE], amtString[MAX_TEXT_LEN];
MemHandle			indexMH;
TransSortStruct	*trArrayElement;
Boolean			isCleared, clear, plusType;
FloatNum			amount, clBal, stmtBal, diff;


    /* get the index array VMBlock */
    transListVMBHandle = VMFind(GPCBnkrFile, NullHandle, (currentAcct*10)+ALLSORT);
    VMLock(GPCBnkrFile, transListVMBHandle ,&indexMH);

    /* cycle thru the index elements to get the selected one */
    j = currentRecon;
    for (i = 0; i < numTrans; i++)  {
	  trArrayElement = ChunkArrayElementToPtrHandles(
				    indexMH,
				    transListChunkArray,
				    i,
				    0);
	  transItem = trArrayElement->TSS_item;
       isCleared = trArrayElement->TSS_cleared;
       if (!isCleared)  {
		if (j == 0)  i = numTrans;
		else  j--;
		}
       }  /* end of cycle thru for */

    /* toggle cleared status */
    if (trArrayElement->TSS_toClear)  {
       trArrayElement->TSS_toClear = FALSE;
       clear = FALSE;
       }
      else  {
       trArrayElement->TSS_toClear = TRUE;
       clear = TRUE;
       }

    VMDirty(indexMH);
    VMUnlock(indexMH);

    /* Lock our transaction item */
    trans = DBLock(GPCBnkrFile, currentAcctGroup, transItem);
    /* get the amount & type */
    amount = trans->TS_amount;
    /* getting the plus trans makes the logic easier for me to follow ;-) */
    if ((trans->TS_type == TRANS_DP)
	    || (trans->TS_type == TRANS_CR)
	    || (trans->TS_type == TRANS_XFP))  {
       plusType = TRUE;
       }
    else  plusType = FALSE;

    DBUnlock(trans);

    /* now adjust the cleared balance and difference */
    /* get the cleared balance */
    length = @call RCLClBal::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    FloatAsciiToFloat(FAF_STORE_NUMBER,
			length,
			amtInString,
			&clBal);

    /* get the statement balance */
    length = @call RCLStmtBal::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    FloatAsciiToFloat(FAF_STORE_NUMBER,
		     length,
		     amtInString,
		     &stmtBal);

    /* here's the fun logic part... */
    if (((clear) && (plusType)) || ((!clear) && (!plusType)))  {
       /* add the amount to cleared balance */
       FloatPushNumber(&clBal);
       FloatPushNumber(&amount);
       FloatAdd();
       FloatPopNumber(&clBal);
       }
      else  {
       /* sub amount from cleared balance */
	  FloatPushNumber(&clBal);
       FloatPushNumber(&amount);
       FloatSub();
       FloatPopNumber(&clBal);
       }

    FloatFormatNumber(FORMAT_ID_FIXED_WITH_COMMAS,
				  NullHandle,
				  NullHandle,
				  &clBal,
				  amtString);
    @call RCLClBal::MSG_VIS_TEXT_REPLACE_ALL_PTR(amtString, 0);

    /* and diff = clBal - stmtBal */
    FloatPushNumber(&clBal);
    FloatPushNumber(&stmtBal);
    FloatSub();
    FloatPopNumber(&diff);
    FloatFormatNumber(FORMAT_ID_FIXED_WITH_COMMAS,
				  NullHandle,
				  NullHandle,
				  &diff,
				  amtString);
    @call RCLDiff::MSG_VIS_TEXT_REPLACE_ALL_PTR(amtString, 0);

    /* now change the moniker in the list */
    @call process::MSG_RECON_DLIST_MONIKER_QUERY(@RCLDList, currentRecon);

    /* and set the list to no selections */
    @call RCLDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RECON_DLIST_MONIKER_QUERY for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Queries for monikers for recon list.
 *
 * PARAMETERS:  	void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/

@extern method GPCBnkrProcessClass, MSG_RECON_DLIST_MONIKER_QUERY
{
TransStruct	*trans;
DBItem		transItem;
word           i, j;
char			amtString[MAX_TEXT_LEN], numString[CKNUM_SIZE];
char			dateString[DATE_SIZE], payee[ENTRY_SIZE];
char			typeString[15];
TimerDateAndTime	date;
MemHandle		indexMH;
TransSortStruct	*trArrayElement;
Boolean		isCleared, toClear;
byte			transType;
ChunkHandle	chunk;
MemHandle		mem;
GStateHandle	gstate;
word			width, amtWidth, eWidth, numChars;
Point		checkPoints[5] =  {{2,6},
						   {5,10},
						   {9,1},
						   {5,7},
						   {2,6}};


    /* set the ellipsis width depending on font size */
    if (sysPointSize == 10) eWidth = 8;
    else if (sysPointSize == 12) eWidth = 10;
    else  eWidth = 12;

    /* get the index array VMBlock */
    transListVMBHandle = VMFind(GPCBnkrFile, NullHandle, (currentAcct*10)+ALLSORT);
    VMLock(GPCBnkrFile, transListVMBHandle ,&indexMH);
    /* cycle thru the index elements to get the itemth uncleared one */
    j = item;
    for (i = 0; i < numTrans; i++)  {
	  trArrayElement = ChunkArrayElementToPtrHandles(
		   indexMH,
		   transListChunkArray,
		   i,
		   0);
	  transItem = trArrayElement->TSS_item;
       isCleared = trArrayElement->TSS_cleared;
       toClear = trArrayElement->TSS_toClear;
       if (!isCleared)  {
		if (j == 0)  i = numTrans;
		else  j--;
	     }
       }  /* end of cycle thru for */
    VMUnlock(indexMH);

    /* Lock down our transaction */
    trans = DBLock(GPCBnkrFile, currentAcctGroup, transItem);
    /* collect the transaction data  */
    UtilHex32ToAscii(numString, (sdword) trans->TS_number, UHTAF_NULL_TERMINATE);
    /* get the date values  */
    date.TDAT_year = trans->TS_year;
    date.TDAT_month = trans->TS_month;
    date.TDAT_day = trans->TS_day;
    /* format it */
    LocalFormatDateTime(dateString, DTF_ZERO_PADDED_SHORT, &date);
    /* convert the amount */
    FloatFloatToAscii_StdFormat(amtString,
			       &trans->TS_amount,
                               FFAF_FROM_ADDR,
                               14,
                               2);
    strcpy(payee, trans->TS_payee);
    transType = trans->TS_type;
    DBUnlock(trans);

    MemLock (OptrToHandle(@ReconDep));
    switch (transType) {
	  case TRANS_CK:
		strcpy(typeString, numString);
		break;
       case TRANS_DP:
		strcpy(typeString, LMemDeref(@ReconDep));
          break;
       case TRANS_DB:
		strcpy(typeString, LMemDeref(@ReconDeb));
          break;
       case TRANS_CR:
		strcpy(typeString, LMemDeref(@ReconCrd));
          break;
	  case TRANS_XFM:
		strcpy(typeString, LMemDeref(@ReconXfO));
          break;
       case TRANS_XFP:
		strcpy(typeString, LMemDeref(@ReconXfI));
          break;
       } /* end switch */
    MemUnlock (OptrToHandle(@ReconDep));

    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word*)&chunk);
    /* fill in the cleared field */
    if (toClear) {
	  GrSetAreaColor(gstate, CF_INDEX, C_BLACK, 0, 0);
	  GrFillPolygon(gstate, ODD_EVEN, checkPoints, 5);
	  }
    GrDrawText(gstate, 20, 1, dateString, 0);
    /* get length to right justify */
    width = GrTextWidth(gstate, typeString, strlen(typeString));
    GrDrawText(gstate, 170 - width, 1, typeString, 0);
    /* see if we need to chop the payee */
    width = GrTextWidth(gstate, payee, strlen(payee));
    amtWidth = GrTextWidth(gstate, amtString, strlen(amtString));
    if ((width + amtWidth) > 250) {
	  /* truncate text and add ellipsis */
	  while (width > (195 - eWidth)) {
		numChars = strlen(payee);
		payee[numChars - 1] = 0;
		width = GrTextWidth(gstate, payee, strlen(payee));
		}
	  strcat(payee, "...");
	  }
    GrDrawText(gstate, 180, 1, payee, 0);
    GrDrawText(gstate, 445 - amtWidth, 1, amtString, 0);
    GrEndGString(gstate) ;
    /* and tell the DList */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  sysPointSize + 4,				/* height */
				  450,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_RECON_DLIST_APPLY for GPCBnkrProcessClass
 *
 * DESCRIPTION:	
 *
 * PARAMETERS:  void (word selection, numSelections, flags)
 *
 * 
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_RECON_DLIST_APPLY
{

    currentRecon = selection;
    @send process::MSG_RECONCILE_MARK();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_RECONCILE_DONE for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Updates all the lists and the account reconcile info
 *              and closes the two dboxes.
 *              
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_RECONCILE_DONE
{
AcctStruct	*account;
TransStruct	*trans;
DBItem		transItem;
DBMapStruct*	mapPtr;
word           i, length;
char			amtInString[DOLLAR_IN_SIZE];
char			dateString[DATE_TIME_BUFFER_SIZE + 1];
char			cat[ENTRY_SIZE], memo[ENTRY_SIZE], payee[ENTRY_SIZE];
MemHandle		indexMH;
TimerDateAndTime	date;
TransSortStruct	*trArrayElement;
byte			typeHolder;
FloatNum		balance, amount;
dword		transDateNum;


    /* First see if diff is 0 and if not show a warning */
    length = @call RCLDiff::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    FloatAsciiToFloat(FAF_STORE_NUMBER,
			length,
			amtInString,
			&amount);
    FloatPushNumber(&amount);
    Float0();
    if (FloatCompAndDrop())  {
	  /* put up are you sure box */
	  if (AckDBox(0, 0, @DiffNotZeroMsg) == ACK_NO) return;
	  }

    /* Normal setup */
    mapPtr = DBLockMap(GPCBnkrFile);
    account = (AcctStruct *) (mapPtr + sizeof(DBMapStruct));

    /* store the acct structure stuff */
    /* statement balance */
    length = @call RCEnd::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    FloatAsciiToFloat(FAF_STORE_NUMBER,
		     length,
		     amtInString,
		     &account[currentAcct].AS_reconStartBal);
    /* charge and credit categories */
    @call RCChargeCat::MSG_VIS_TEXT_GET_ALL_PTR(
                 account[currentAcct].AS_reconChgCat);
    @call RCCreditCat::MSG_VIS_TEXT_GET_ALL_PTR(
		 account[currentAcct].AS_reconCrdtCat);
    /* and the statement date */
    @call RCEndDate::MSG_VIS_TEXT_GET_ALL_PTR(dateString);
    LocalParseDateTime(dateString, DTF_SHORT, &date);
    account[currentAcct].AS_reconYear = date.TDAT_year;
    account[currentAcct].AS_reconMonth = (byte) date.TDAT_month;
    account[currentAcct].AS_reconDay = (byte) date.TDAT_day;
    DBDirty(mapPtr);
    DBUnlock(mapPtr);

    /* get the index array VMBlock */
    transListVMBHandle = VMFind(GPCBnkrFile, NullHandle, (currentAcct*10)+ALLSORT);
    VMLock(GPCBnkrFile, transListVMBHandle ,&indexMH);

    /* cycle thru the index elements to get the toClear ones */
    for (i = 0; i < numTrans; i++)  {
	  trArrayElement = ChunkArrayElementToPtrHandles(
		   indexMH,
		   transListChunkArray,
		   i,
		   0);
       if (trArrayElement->TSS_toClear)  {  /* we need to mark cleared */
		trArrayElement->TSS_toClear = FALSE;
		trArrayElement->TSS_cleared = TRUE;
		/* Lock our transaction item */
		trans = DBLock(GPCBnkrFile, currentAcctGroup, trArrayElement->TSS_item);
		/* mark it cleared */
		trans->TS_cleared = TRUE;
		DBDirty(trans);
		DBUnlock(trans);
		}  /* end of need to mark cleared if */
	  }  /* end of cycle thru for */

    VMDirty(indexMH);
    VMUnlock(indexMH);

    /* now we need to enter any debit/credit statement stuff */
    /* first the charges */
    length = @call RCChargeAmt::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    /* skip if no charges */
    if (*amtInString)  {
       @call RCChargeCat::MSG_VIS_TEXT_GET_ALL_PTR(cat);
	  MemLock (OptrToHandle(@ReconCharges));
	  strcpy(payee, LMemDeref(@ReconCharges));
	  MemUnlock (OptrToHandle(@ReconCharges));
       strcpy(memo, "");
       /* convert the amount to a value */
	  FloatAsciiToFloat(FAF_STORE_NUMBER,
		     length,
		     amtInString,
		     &amount);

	  @call RCChargeDate::MSG_VIS_TEXT_GET_ALL_PTR(dateString);
	  LocalParseDateTime(dateString, DTF_SHORT, &date);
	  transDateNum = MakeDateNum(date);

       /* save the currentType */
	  typeHolder = currentType;
       currentType = TRANS_DB;

       /* now call the function that enters this transaction */
	  balance =  EnterTransaction(
				   FALSE,   /* import */
				   amount,
				   date.TDAT_year,
				   date.TDAT_month,
				   date.TDAT_day,
				   0,
			        payee,
			        memo,
			        cat,
				   FALSE,
			        TRUE,
				   &transItem);

	  /* add this transaction to the acct sort index array */
	  TransIndexInsert(transDateNum,
				    date,
				    0,
				    amount,
				    TRUE,
				    transItem);

	  /* restore the currentType */
	  currentType = typeHolder;
	  }  /* end of charges if */

    /* now the credits */
    length = @call RCCreditAmt::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    /* skip if no credits */
    if (*amtInString)  {
       @call RCCreditCat::MSG_VIS_TEXT_GET_ALL_PTR(cat);
	  MemLock (OptrToHandle(@ReconCredits));
	  strcpy(payee, LMemDeref(@ReconCredits));
	  MemUnlock (OptrToHandle(@ReconCredits));
       strcpy(memo, "");
       /* convert the amount to a value */
	  FloatAsciiToFloat(FAF_STORE_NUMBER,
		     length,
		     amtInString,
		     &amount);

	  @call RCCreditDate::MSG_VIS_TEXT_GET_ALL_PTR(dateString);
	  LocalParseDateTime(dateString, DTF_SHORT, &date);
	  transDateNum = MakeDateNum(date);

       /* save the currentType */
	  typeHolder = currentType;
       currentType = TRANS_CR;

       /* now call the function that enters this transaction */
	  balance =  EnterTransaction(
				   FALSE,   /* import */
				   amount,
				   date.TDAT_year,
				   date.TDAT_month,
				   date.TDAT_day,
				   0,
			        payee,
			        memo,
			        cat,
				   FALSE,
			        TRUE,
				   &transItem);

	  /* add this transaction to the acct sort index array */
	  TransIndexInsert(transDateNum,
				    date,
				    0,
				    amount,
				    TRUE,
				    transItem);

       /* restore the currentType */
	  currentType = typeHolder;
	  }  /* end of credits if */

    /* kill the two dboxes */
    @send ReconcileDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
    @send ReconListDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* redraw the register */
    if (numTrans > DEFAULT_LIST_LINES-1)
	  @send RegisterDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numTrans);
    else
	  @send RegisterDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(DEFAULT_LIST_LINES);

    /* re-set reconciliation flag */
    reconcileFlag = FALSE;

}
/***********************************************************************
 *
 * MESSAGE:	MSG_RECONCILE_CANCEL for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Clears any toClear marks in the transSort struct
 *              that may have been marked by the user
 *              
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_RECONCILE_CANCEL
{
word                i;
MemHandle			mh;
TransSortStruct	*trArrayElement;
Boolean			toDirty = FALSE;


    /* get the index array VMBlock */
    transListVMBHandle = VMFind(GPCBnkrFile, NullHandle, (currentAcct*10)+ALLSORT);
    VMLock(GPCBnkrFile, transListVMBHandle ,&mh);

    /* cycle thru the index elements to unmark transactions */
    for (i = 0; i < numTrans; i++)  {
	  trArrayElement = ChunkArrayElementToPtrHandles(
		   mh,
		   transListChunkArray,
		   i,
		   0);
       if (trArrayElement->TSS_toClear)  {  /* change it */
		trArrayElement->TSS_toClear = FALSE;
          toDirty = TRUE;
		}
	  }  /* end of cycle through for */

    if (toDirty) VMDirty(mh);
    VMUnlock(mh);

    /* re-set reconciliation flag */
    reconcileFlag = FALSE;

}
