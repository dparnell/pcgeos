
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/*
 **************************************************************************
 *  FILE:			mlt_mtds.goc
 *  PROJECT:		GPC Banker
 *  DESCRIPTION:	This file has methods for the transaction
 *				multi category functions
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "bnkr30.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */



/***********************************************************************
 *
 * FUNCTION:	TotalMultis  (void)
 *
 * CALLED BY:  OPEN_MULTIS, ADD_MULTI
 *
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
void TotalMultis (void)
{
 ChunkHandle		chunk;
 MemHandle		mem;
 GStateHandle		gstate;
 word			width/*, i*/;
 char			amtString[MAX_TEXT_LEN], totalString[MAX_TEXT_LEN + 10];


    /* convert the total multi amount */
    FloatFloatToAscii_StdFormat(amtString,
							&multiAmount,
							FFAF_FROM_ADDR,
							14,
							2);
    /* generate the moniker */
    MemLock (OptrToHandle(@MTotalMoniker));
    strcpy(totalString, LMemDeref(@MTotalMoniker));
    MemUnlock (OptrToHandle(@MTotalMoniker));
    strcat(totalString, amtString);
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word*) &chunk);
    GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    GrSetLineWidth(gstate, MakeWWFixed(2));
    GrSetLineColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    /* get length to right justify & make line the right length */
    width = GrTextWidth(gstate, totalString, strlen(totalString));
    GrDrawText(gstate, 235 - width, 2, totalString, 0);
    GrDrawHLine(gstate, 235 - width - 10, 1, 235);  /* L, B, R */
    GrEndGString(gstate) ;

    @call MuDBTotal::MSG_GEN_REPLACE_VIS_MONIKER(
				  VUM_NOW,
				  18,				/* height */
				  250,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk));

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem);

    /* and also put the amount into the form */
    @call NEFDAmount::MSG_VIS_TEXT_REPLACE_ALL_PTR(amtString, 0);


}

/***********************************************************************
 *
 * FUNCTION:	FindCatPlaceInList
 *
 * CALLED BY:  MSG_ADD_MULTICAT
 *
 *
 * STRATEGY:   returns passed cat's item # in list
 *
 *
 ***********************************************************************/

word FindCatPlaceInList(char catString[ENTRY_SIZE])
{
 MemHandle		mh;
 CatPickStruct		*pickElement;
 Boolean			subCat = FALSE;
 word			i, colonPos, listPos, length;
 char			subCatString[CAT_SIZE];
 char			parentCatString[CAT_SIZE];
 char			findString[CAT_SIZE];


    /* see if we have subcat */
    for (i = 0; i < strlen(catString); i++)  {
	  if (catString[i] == ':') {
		subCat = TRUE;
		colonPos = i;
		i = strlen(catString);
		}
	  }
    /* if we do, separate into parent and sub */
    if (subCat)  {
	  catString[colonPos] = NULL;
	  strcpy(parentCatString, catString);
	  strcpy(subCatString, &catString[colonPos + 1]);
	  /* restore the string that was sent into the function */
	  catString[colonPos] = ':';
	  }
    else  {
	  strcpy(parentCatString, catString);
	  subCatString[0] = 0;
	  }

    /* see if it is in the list */
    strcpy(findString, parentCatString);
    catListVMBHandle = VMFind(GPCBnkrFile, NullHandle, CATLIST);
    VMLock(GPCBnkrFile, catListVMBHandle ,&mh);
    for (i = 0; i < catNumItems; i++)  {
		 pickElement = ChunkArrayElementToPtrHandles(
							mh,
							catListChunkArray,
							i,
							0);
		 /* get the longer */
		 if (strlen(pickElement->CPS_category) >= strlen(findString))
			  length = strlen(pickElement->CPS_category);
		 else  length = strlen(findString);
		 /* OK - is it the same? */
		 if (!LocalCmpStrings(findString, pickElement->CPS_category, length)) {
			 /* we've found a match of cat */
			 if (!subCat)  {
				 /* since there is no Sub we're outta here */
				 listPos = i;
				 i = catNumItems;
				 }
			 else {
				 /* need to look for sub */
				 strcpy(findString, subCatString);
				 subCat = FALSE;
				 }
			 }
		 }  /* end of for loop */
	 VMUnlock(mh);
	 return (listPos);

}
/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_MULTI_CATS for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Calls the dialog box when the trigger
 *              	is clicked
 *
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_OPEN_MULTI_CATS
{
 ChunkHandle		chunk;
 MemHandle		mem;
 GStateHandle		gstate;
 word			width, i;
 TransStruct		*trans;
 DBItem			transItem, multiTrans;
 DBGroup			multiGroup;
 MemHandle		indexMH;
 TransSortStruct	*trArrayElement;
 TempMultiStruct	*arrayElement;


    /* draw the dlist title */
    /* set up the mem and gstate */
    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word*) &chunk);
    GrSetTextColor(gstate, CF_INDEX, C_BLACK, 0, 0);
    MemLock (OptrToHandle(@MCatMoniker));
    GrDrawText(gstate, 3, 0, LMemDeref(@MCatMoniker), 0);
    GrDrawText(gstate, 205, 0, LMemDeref(@MNoteMoniker), 0);
    /* get length to right justify */
    width = GrTextWidth(gstate, LMemDeref(@MAmountMoniker),
						  strlen(LMemDeref(@MAmountMoniker)));
    GrDrawText(gstate, 496 - width, 0, LMemDeref(@MAmountMoniker), 0);
    MemUnlock (OptrToHandle(@MTotalMoniker));
    GrEndGString(gstate) ;

    @call MultiDBHeader::MSG_GEN_REPLACE_VIS_MONIKER(
				  VUM_NOW,
				  12,				/* height */
				  500,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk));

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

    /* are we re-opening the multi list? */
    if (!numMultis) {
	  /* create a mem block to hold the info temporarily */
	  multiHeapHandle = MemAlloc(2048, HF_SWAPABLE, HAF_LOCK);
	  LMemInitHeap(multiHeapHandle,
				LMEM_TYPE_GENERAL,
				0,
				sizeof(LMemBlockHeader),
				STD_INIT_HANDLES,
				STD_INIT_HEAP);
	  /* create the chunk array  */
	  multiChunkArray = ChunkArrayCreate(
					multiHeapHandle,
					sizeof(TempMultiStruct),
					0,
					0);
	  MemUnlock(multiHeapHandle);

	  /* set the multi flag */
	  multiFlag = TRUE;
	  /* set multiAmount to 0 */
	  FLOAT_SET_FLOATNUM_TO_0(multiAmount);
	  numMultis = 0;

    /* see if user is modifying the transaction */
    if (@call NEModify::MSG_GEN_GET_USABLE())  {
	  /* get the parent multi info */
	  transListVMBHandle = VMFind(GPCBnkrFile, NullHandle, (currentAcct*10)+ALLSORT);
	  VMLock(GPCBnkrFile, transListVMBHandle ,&indexMH);
	  /* get the selected element info */
	  trArrayElement = ChunkArrayElementToPtrHandles(
					 indexMH,
					 transListChunkArray,
					 transSelected,
					 0);
	  transItem = trArrayElement->TSS_item;
	  VMUnlock(indexMH);
	  trans = DBLock(GPCBnkrFile, currentAcctGroup, transItem);
	  numMultis = trans->TS_numMultis;
	  multiGroup = trans->TS_multiGroup;
	  multiTrans = trans->TS_multiItem;
	  DBUnlock(trans);
	  for (i = 0; i < numMultis; i++)  {
		/* get the trans multi info and put it into the array */
		trans = DBLock(GPCBnkrFile, multiGroup, multiTrans);
		MemLock(multiHeapHandle);
		arrayElement = ChunkArrayAppendHandles(
						multiHeapHandle,
						multiChunkArray,
						0);

		/* put transaction info into temp array */
		strcpy(arrayElement->TMS_note, trans->TS_memo);
		strcpy(arrayElement->TMS_cat, trans->TS_category);
		arrayElement->TMS_amount = trans->TS_amount;
		// Under Watcom, FloatNum is not the same type as long double. 
		// So we cannot use operands like +,-,*,/ on FloatNum anymore.
		//multiAmount += trans->TS_amount;
		FloatPushNumber(&multiAmount);
		FloatPushNumber(&trans->TS_amount);
		FloatAdd();
		FloatPopNumber(&multiAmount);
		MemUnlock(multiHeapHandle);
		multiTrans = trans->TS_multiItem;
		DBUnlock(trans);
		}  /* end of loop thru multis for */
	  }  /* end of modifying if */
	  }  /* end of !numMultis if (list re-opened before saving) */

    /* show the total of the account balances */
    TotalMultis();

    /* tell the list */
    if (numMultis > DEFAULT_MULTI_LINES-1)
	  @send MultiDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numMultis);
    else
	  @send MultiDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(DEFAULT_MULTI_LINES);

    /* Open the dialog box */
    @call MultiDBox::MSG_GEN_INTERACTION_INITIATE();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_CREATE_MULTI_DLIST_APPLY for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Handles an apply of user selection in the multi list.
 *
 * PARAMETERS:  	void (word selection, numSelections, flags)
 *
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_CREATE_MULTI_DLIST_APPLY
{

	 /* if the line is empty ignore the selection */
	 if ((selection <= (numMultis - 1)) && numMultis) {
		 /* enable the buttons */
		 @send MuDBModify::MSG_GEN_SET_ENABLED(VUM_NOW);
		 @send MuDBDelete::MSG_GEN_SET_ENABLED(VUM_NOW);
		 }
	 else {
		 @send MuDBModify::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		 @send MuDBDelete::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
		 }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_CREATE_MULTI_DLIST_MONIKER_QUERY for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Queries for monikers for multis list.
 *
 * PARAMETERS:  	void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_CREATE_MULTI_DLIST_MONIKER_QUERY
{
ChunkHandle	chunk;
MemHandle		mem;
GStateHandle	gstate;
word			width, numChars, baseLine, eWidth;
TempMultiStruct	*arrayElement;
char			amtString[MAX_TEXT_LEN], entryString[ENTRY_SIZE];


    if ((item < numMultis) && numMultis)  {
	  /* get the info the list wants */
	  MemLock(multiHeapHandle);
	  arrayElement = ChunkArrayElementToPtrHandles(
				  multiHeapHandle,
				  multiChunkArray,
				  item,
				  0);
	  /* convert the amount */
	  FloatFloatToAscii_StdFormat(amtString,
						 &arrayElement->TMS_amount,
						 FFAF_FROM_ADDR,
						 14,
						 2);
	  }

    mem = MemAllocLMem(LMEM_TYPE_GSTRING, 0);
    gstate = GrCreateGString(mem, GST_CHUNK, (word*) &chunk);
    /* draw horizontal separator */
    GrSetLineWidth(gstate, MakeWWFixed(1));
    GrSetLineColor(gstate, CF_INDEX, C_BLUE, 0, 0);
    GrDrawHLine(gstate, 0, 17, 499);  /* L, B, R */
    /* draw note separator */
    GrDrawVLine(gstate, 200, 0, 17);
    /* draw amount separator */
    GrDrawVLine(gstate, 400, 0, 17);

    if ((item < numMultis) && numMultis)  {
	  /* set the font & size */
	  if (!onTV) GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(regPointSize));
	  else GrSetFont(gstate, FID_BERKELEY, MakeWWFixed(regPointSize));
	  /* set the baseLine & ellipsis width depending on font size */
	  if (regPointSize == 10) {
		baseLine = 4;
		eWidth = 8;
		}
	  else if (regPointSize == 12) {
		baseLine = 2;
		eWidth = 10;
		}
	  else  {
		baseLine = 0;
		eWidth = 12;
		}
	  /* do the cat */
	  strcpy(entryString, arrayElement->TMS_cat);
	  width = GrTextWidth(gstate, entryString, strlen(entryString));
	  if(width > 200)  {
			 /* truncate text and add ellipsis */
			 while (width > (200 - eWidth)) {
				 numChars = strlen(entryString);
				 entryString[numChars - 1] = 0;
				 width = GrTextWidth(gstate, entryString, strlen(entryString));
				 }
			 strcat(entryString, "...");
			 }
		 GrDrawText(gstate, 0, baseLine, entryString, 0) ;
		 /* do the note */
		 strcpy(entryString, arrayElement->TMS_note);
		 width = GrTextWidth(gstate, entryString, strlen(entryString));
		 if(width > 200)  {
			 /* truncate text and add ellipsis */
			 while (width > (200 - eWidth)) {
				 numChars = strlen(entryString);
				 entryString[numChars - 1] = 0;
				 width = GrTextWidth(gstate, entryString, strlen(entryString));
				 }
			 strcat(entryString, "...");
			 }
		 GrDrawText(gstate, 203, baseLine, entryString, 0) ;

		 /* get length to right justify */
		 width = GrTextWidth(gstate, amtString, strlen(amtString));
		 GrDrawText(gstate, 496 - width, baseLine, amtString, 0);
		 }
    GrEndGString(gstate) ;
    /* and tell the DList */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  18,				/* height */
				  500,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mem, chunk)) ;

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mem) ;

    if ((item < numMultis) && numMultis) MemUnlock(multiHeapHandle);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_OPEN_ADD_MULTIPLE for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Calls the dialog box when the trigger
 *              	is clicked
 *
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_OPEN_ADD_MULTIPLE
{
word			transaction/*, listPos*/;
TempMultiStruct	*arrayElement;
char			amtString[MAX_TEXT_LEN];


    /* init the list to get rid of any old check marks */
    @send AddMCatDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(catNumItems);

    if (trigger == @MuDBModify)  {
	  /* get the selection */
	  transaction = @call MultiDBDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	  /* grab the selected info */
	  MemLock(multiHeapHandle);
	  arrayElement = ChunkArrayElementToPtrHandles(
				  multiHeapHandle,
				  multiChunkArray,
				  transaction,
				  0);
	  /* grab the cat - and tell the list */
	  selMCat = FindCatPlaceInList(arrayElement->TMS_cat);
	  @send AddMCatDList::MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(selMCat, FALSE);
	  /* convert the amount */
	  FloatFloatToAscii_StdFormat(amtString,
						 &arrayElement->TMS_amount,
						 FFAF_FROM_ADDR,
						 14,
						 2);
	  /* fill in the info */
	  @call AddMCatAmount::MSG_VIS_TEXT_REPLACE_ALL_PTR(amtString, 0);
	  @call AddMCatNote::MSG_VIS_TEXT_REPLACE_ALL_PTR(
								 arrayElement->TMS_note, 0);
	  /* put in the right title and buttons */
	  MemLock (OptrToHandle(@ModMultiMoniker));
	  @call AddMultiDBox::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			   LMemDeref(@ModMultiMoniker),
			   VUM_DELAYED_VIA_APP_QUEUE);
	  @call AddMCatCancel::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			   LMemDeref(@DontChangeMoniker),
			   VUM_DELAYED_VIA_APP_QUEUE);
	  MemUnlock (OptrToHandle(@ModMultiMoniker));
	  @send AddMCatChange::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @send AddMCatDone::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  }  /* end of fill in modify stuff */
    else {
	  /* clear the text */
	  @call AddMCatNote::MSG_VIS_TEXT_DELETE_ALL();
	  @call AddMCatAmount::MSG_VIS_TEXT_DELETE_ALL();
	  /* put in the right title and buttons */
	  MemLock (OptrToHandle(@AddMultiMoniker));
	  @call AddMultiDBox::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			   LMemDeref(@AddMultiMoniker),
			   VUM_DELAYED_VIA_APP_QUEUE);
	  @call AddMCatCancel::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
			   LMemDeref(@CancelMoniker),
			   VUM_DELAYED_VIA_APP_QUEUE);
	  MemUnlock (OptrToHandle(@AddMultiMoniker));
	  @send AddMCatDone::MSG_GEN_SET_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  @send AddMCatChange::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
	  /*set the list to none */
	  @send AddMCatDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	  selMCat = GIGS_NONE;
	  }

	 /* set the buttons */
	 @send MuDBModify::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	 @send MuDBDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	 /* Open the dialog box */
    @call AddMultiDBox::MSG_GEN_INTERACTION_INITIATE();
}

/***********************************************************************
 *
 * MESSAGE:	MSG_ADD_MULTICAT for GPCBnkrProcessClass
 *
 * DESCRIPTION:	adds a multi-cat transaction to the temp array
 *                  or modifies an existing one
 *
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_ADD_MULTICAT
{
char		memo[ENTRY_SIZE], amtInString[DOLLAR_IN_SIZE];
char		cat[ENTRY_SIZE];
FloatNum		amount, oldAmount;
TempMultiStruct	*arrayElement;
MemHandle		mh;
CatPickStruct	*pickElement;
word			which;


    /* get the new multi-transaction info */
    @call AddMCatAmount::MSG_VIS_TEXT_GET_ALL_PTR(amtInString);
    /* Exit if balance invalid */
    if (!AmountChecksOK(amtInString, FALSE, FALSE))  {
	  /* send the focus back to the balance field */
	  @send AddMCatAmount::MSG_META_GRAB_FOCUS_EXCL();
	  return;
	  }

    /* don't let no cat selected get added */
//    if (selMCat == GIGS_NONE) return;


	 /* MultiDBDList selection seems to go to GIGS_NONE when this db
		 is dismissed so we'll keep it until we get the selection on
		 a Modify. bug reported 11/26/01 */
//	 @send AddMultiDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    @call AddMCatNote::MSG_VIS_TEXT_GET_ALL_PTR(memo);

    /* get the selected cat */
    catListVMBHandle = VMFind(GPCBnkrFile, NullHandle, CATLIST);
    VMLock(GPCBnkrFile, catListVMBHandle ,&mh);
    pickElement = ChunkArrayElementToPtrHandles(
			   mh,
			   catListChunkArray,
			   selMCat,
			   0);
    if (pickElement->CPS_isSub) {
	  strcpy(cat, pickElement->CPS_subOf);
	  strcat(cat, ":");
	  strcat(cat, pickElement->CPS_category);
	  }
    else strcpy(cat, pickElement->CPS_category);
    VMUnlock(mh);

    /* convert the amount to a value */
    FloatAsciiToFloat(FAF_STORE_NUMBER,
			strlen(amtInString),
		     amtInString,
		     &amount);

    if (trigger != @AddMCatChange) {
		@send AddMultiDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	  /* now put the new info into the array */
	  MemLock(multiHeapHandle);
	  arrayElement = ChunkArrayAppendHandles(
				  multiHeapHandle,
				  multiChunkArray,
				  0);
	  arrayElement->TMS_amount = amount;
	  strcpy(arrayElement->TMS_note, memo);
	  strcpy(arrayElement->TMS_cat, cat);
	  MemUnlock(multiHeapHandle);

	  if (!numMultis) {
		/* put mults in cat text */
		MemLock (OptrToHandle(@MultCatText));
		@call NEFCatText::MSG_VIS_TEXT_REPLACE_ALL_PTR(LMemDeref(@MultCatText), 0);
		MemUnlock (OptrToHandle(@MultCatText));
		}

	  /* update the amount and number of multis */
	  // Under Watcom, FloatNum is not the same type as long double. 
	  // So we cannot use operands like +,-,*,/ on FloatNum anymore.
	  //multiAmount += amount;
	  FloatPushNumber(&multiAmount);
	  FloatPushNumber(&amount);
	  FloatAdd();
	  FloatPopNumber(&multiAmount);
	  numMultis++;
	  } /* end of new multi */
    else {
	  /* this was a mod */
	  which = @call MultiDBDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	 	@send AddMultiDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
	  MemLock(multiHeapHandle);
	  arrayElement = ChunkArrayElementToPtrHandles(
							 multiHeapHandle,
							 multiChunkArray,
							 which,
							 0);
	  oldAmount = arrayElement->TMS_amount;
	  arrayElement->TMS_amount = amount;
	  strcpy(arrayElement->TMS_note, memo);
	  strcpy(arrayElement->TMS_cat, cat);
	  MemUnlock(multiHeapHandle);
	  FloatPushNumber(&oldAmount);
	  FloatPushNumber(&amount);
	  if (!FloatCompAndDrop())  {
		/* gotta redo the total */
		/* sub out old amount */
		FloatPushNumber(&multiAmount);
		FloatPushNumber(&oldAmount);
		FloatSub();
		/* add back the new */
		FloatPushNumber(&amount);
		FloatAdd();
		FloatPopNumber(&multiAmount);
		}
	  } /* end of mod multi */

    TotalMultis();
    /* and tell the list */
    if (numMultis > DEFAULT_MULTI_LINES-1)
	  @send MultiDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numMultis);
    else
	  @send MultiDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(DEFAULT_MULTI_LINES);

}


/***********************************************************************
 *
 * MESSAGE:	MSG_DELETE_MULTI_CAT for GPCBnkrProcessClass
 *
 * DESCRIPTION:	deletes a multi-cat transaction from the temp array
 *                  no need to mess with DBitem since the form's Change
 *                  button deletes the old and re-enters the changed
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_DELETE_MULTI_CAT
{
word		transaction;
TempMultiStruct	*arrayElement;


    /* get the selected trans */
    transaction = @call MultiDBDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

    /* get the element address */
    MemLock(multiHeapHandle);
    arrayElement = ChunkArrayElementToPtrHandles(
				  multiHeapHandle,
				  multiChunkArray,
				  transaction,
				  0);
    /* subtract the amount */
	FloatPushNumber(&multiAmount);
	FloatPushNumber(&arrayElement->TMS_amount);
	FloatSub();
    FloatPopNumber(&multiAmount);
    TotalMultis();
    /* delete the element */
    ChunkArrayDeleteHandle(multiChunkArray, arrayElement);
    MemUnlock(multiHeapHandle);
    numMultis--;

    /* delete mults in cat text */
    if (!numMultis) @send NEFCatText::MSG_VIS_TEXT_DELETE_ALL();

	 /* set the buttons */
	 @send MuDBModify::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	 @send MuDBDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    /* and tell the list */
	 if (numMultis > DEFAULT_MULTI_LINES-1)
	  @send MultiDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numMultis);
    else
	  @send MultiDBDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(DEFAULT_MULTI_LINES);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_MULTI_CAT_DLIST_MONIKER_QUERY for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Queries for monikers for categories list.
 *
 * PARAMETERS:  	void (optr list, word item)
 *
 *  
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_MULTI_CAT_DLIST_MONIKER_QUERY
{
MemHandle		mh;
CatPickStruct	*pickElement;
char			pickString[ENTRY_SIZE];
ChunkHandle		chunk;
GStateHandle		gstate;
Point		checkPoints[5] =  {{2,6},
						   {5,10},
						   {9,1},
						   {5,7},
						   {2,6}};
word			selection;


    /* get the selected cat */
    catListVMBHandle = VMFind(GPCBnkrFile, NullHandle, CATLIST);
    VMLock(GPCBnkrFile, catListVMBHandle ,&mh);
    pickElement = ChunkArrayElementToPtrHandles(
		   mh,
		   catListChunkArray,
		   item,
		   0);
    pickString[0] = 0;
    MemLock (OptrToHandle(@IncTitle));
    if ((LocalCmpStrings(LMemDeref(@IncTitle),
					pickElement->CPS_category,
					strlen(LMemDeref(@IncTitle))))
	  && (LocalCmpStrings(LMemDeref(@ExpTitle),
					  pickElement->CPS_category,
					  strlen(LMemDeref(@ExpTitle))))) {
	  if (pickElement->CPS_isSub) strcpy(pickString, "      ");
	  else strcpy(pickString, "   ");
	  }
    MemUnlock (OptrToHandle(@IncTitle));

/*    if (pickElement->CPS_isSub) {
	  strcpy(pickString, "   ");
	  strcat(pickString, pickElement->CPS_category);
	  }
    else strcpy(pickString, pickElement->CPS_category);  */

    strcat(pickString, pickElement->CPS_category);
    VMUnlock(mh);

    /* show it */
    mh = MemAllocLMem(LMEM_TYPE_GSTRING, 0) ;
    gstate = GrCreateGString(mh, GST_CHUNK, (word*) &chunk);
    /* show the check mark if we need to */
    if (item == selMCat) {
	  selection = @call AddMCatDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();
	  if (item == selection) GrSetAreaColor(gstate, CF_INDEX, C_WHITE, 0, 0);
	  else GrSetAreaColor(gstate, CF_INDEX, C_BLACK, 0, 0);
	  GrFillPolygon(gstate, ODD_EVEN, checkPoints, 5);
	  }
    /* and the cat */
    GrDrawText(gstate, 18, 0, pickString, 0) ;
    GrEndGString(gstate) ;
    /* and tell the DList */
    @call list::MSG_GEN_DYNAMIC_LIST_REPLACE_ITEM_MONIKER(
				  item,
				  0,
				  12,				/* height */
				  250,				/* width */
				  0,
				  VMDT_GSTRING,
				  VMST_OPTR,
				  ConstructOptr(mh, chunk)) ;

    /* and 86 the gstate and mem */
    GrDestroyGString(gstate, gstate, GSKT_KILL_DATA) ;
    MemFree(mh) ;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_MULTI_CAT_DLIST_APPLY for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Handles an apply of user selection in the multi list.
 *
 * PARAMETERS:  	void (word selection, numSelections, flags)
 *
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_MULTI_CAT_DLIST_APPLY
{
word		oldSelection;
MemHandle		mh;
CatPickStruct	*pickElement;
Boolean			isHeader = FALSE;
char		string[DOLLAR_IN_SIZE];


    oldSelection = selMCat;

    /* check for user selecting inc/exp titles and don't let that happen */
    catListVMBHandle = VMFind(GPCBnkrFile, NullHandle, CATLIST);
    VMLock(GPCBnkrFile, catListVMBHandle ,&mh);
    pickElement = ChunkArrayElementToPtrHandles(
						mh,
						catListChunkArray,
						selection,
						0);
    MemLock (OptrToHandle(@IncTitle));
    if ((!LocalCmpStrings(LMemDeref(@IncTitle),
					   pickElement->CPS_category,
					   strlen(LMemDeref(@IncTitle))))
		 || (!LocalCmpStrings(LMemDeref(@ExpTitle),
						  pickElement->CPS_category,
						  strlen(LMemDeref(@ExpTitle)))))
	  isHeader = TRUE;
    MemUnlock (OptrToHandle(@IncTitle));
    VMUnlock(mh);

    if (isHeader) {
	  @send AddMCatDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);
	  selMCat = GIGS_NONE;
	  if (oldSelection != GIGS_NONE)
		/* redraw old moniker to show not selected */
		@call self::MSG_MULTI_CAT_DLIST_MONIKER_QUERY(
							 @AddMCatDList,
						    oldSelection);

	  }
    else {
	  selMCat = selection;

	  if (oldSelection != GIGS_NONE)
		/* redraw old moniker to show not selected */
		@call self::MSG_MULTI_CAT_DLIST_MONIKER_QUERY(
							 @AddMCatDList,
						    oldSelection);

	  /* redraw the new moniker to show selected */
	  @call self::MSG_MULTI_CAT_DLIST_MONIKER_QUERY(
						    @AddMCatDList,
						    selMCat);
	  }

    /* set the done/change buttons accordingly */
    if ((@call AddMCatAmount::MSG_VIS_TEXT_GET_ALL_PTR(string)) &&
		    (selMCat != GIGS_NONE)) {
	  @send AddMCatDone::MSG_GEN_SET_ENABLED(VUM_NOW);
	  @send AddMCatChange::MSG_GEN_SET_ENABLED(VUM_NOW);
	  }
    else {
	  @send AddMCatDone::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  @send AddMCatChange::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  }

}

/***********************************************************************
 *
 * MESSAGE:	MSG_MCAT_DBL_CLICK() for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Handles multi cat list double click.
 *
 * PARAMETERS:      
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_MCAT_DBL_CLICK
{
word 		transaction;


	 /* get the selected trans */
	 transaction = @call MultiDBDList::MSG_GEN_ITEM_GROUP_GET_SELECTION();

	 /* if the line is empty ignore the dbl click */
	 if ((transaction <= (numMultis - 1)) && numMultis)
		 @send MuDBModify::MSG_GEN_ACTIVATE();
		 
}

/* MultiDB class defined in bnkr.goh */
@classdecl	MultiDBGenInteractionClass;
/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_CLOSE() for MultiDBGenInteractionClass
 *
 * DESCRIPTION:	closes any children DBs
 *                    
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method MultiDBGenInteractionClass, MSG_VIS_CLOSE
{

    /* and if for some reason the user has left the AddMultiDB open... */
    @send AddMultiDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);

    /* and send the focus back to the trans form */
    @send NewEntryDBox::MSG_META_GRAB_FOCUS_EXCL();
    
    @callsuper();

}

/* AddMultiDB class defined in bnkr.goh */
@classdecl	AddMultiDBGenInteractionClass;
/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_CLOSE() for AddMultiDBGenInteractionClass
 *
 * DESCRIPTION:	does some closing work
 *                    
 * PARAMETERS:
 *
 *
 ***********************************************************************/
@method AddMultiDBGenInteractionClass, MSG_VIS_CLOSE
{

    /* set the buttons */
    @send MuDBModify::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    @send MuDBDelete::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);

    @send MultiDBDList::MSG_GEN_ITEM_GROUP_SET_NONE_SELECTED(FALSE);

    @send MultiDBox::MSG_META_GRAB_FOCUS_EXCL();

    @callsuper();

}

