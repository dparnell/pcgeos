
/**************************************************************
 *  ==CONFIDENTIAL INFORMATION==
 *  COPYRIGHT 1994-2000 BREADBOX COMPUTER COMPANY --
 *  ALL RIGHTS RESERVED  --
 *  THE FOLLOWING CONFIDENTIAL INFORMATION IS BEING DISCLOSED TO YOU UNDER A
 *  NON-DISCLOSURE AGREEMENT AND MAY NOT BE DISCLOSED OR FORWARDED BY THE
 *  RECIPIENT TO ANY OTHER PERSON OR ENTITY NOT COVERED BY THE SAME
 *  NON-DISCLOSURE AGREEMENT COVERING THE RECIPIENT. USE OF THE FOLLOWING
 *  CONFIDENTIAL INFORMATION IS RESTRICTED TO THE TERMS OF THE NON-DISCLOSURE
 *  AGREEMENT.
 **************************************************************/

/***************************************************************************
 *  FILE:			doc_mtds.goc
 *  PROJECT:		GPC Banker
 *  DESCRIPTION:	This file has methods for document manipulation
 *			
 **************************************************************************
 */
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include "bnkr30.goh"
@include "externs.goh"

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */



/*********************************************************************
 *  All the globals declared as extern in .goh
 ********************************************************************
*/
FileHandle  GPCBnkrFile = NullHandle;  /* handle to the rbox file that's open. */
Boolean onTV = FALSE;
word regPointSize = 12;
word sysPointSize = 12;
Boolean closeOnUse = TRUE;

word currentAcct = GIGS_NONE;    /* the currently selected account */
DBGroup currentAcctGroup = 0;    
word toAcct = GIGS_NONE;
word fromAcct = GIGS_NONE;
word currentCat = GIGS_NONE;
word currentMulti = 0;
byte currentType = 0;
//word  formBitmap = BANKER_BITMAP_CHECK;      
word currentPayee = GIGS_NONE;
word currentRecon = 0;
Boolean reconcileFlag = FALSE;

Boolean autoNum = TRUE;
word formUp = 0;

word numAccounts = 0;
word numTrans = 0;
word whichTrans = 0;
byte attachUse = 0;
FloatNum multiAmount = {0, 0, 0, 0};
byte numMultis = 0;
Boolean multiFlag = FALSE;
byte whichMulti = 0;

/* globals for the cat and payee pick lists */
MemHandle   payListHeapHandle, catListHeapHandle = NullHandle;
MemHandle   transListHeapHandle = NullHandle;
MemHandle   multiHeapHandle = NullHandle;
VMBlockHandle  payListVMBHandle, catListVMBHandle = NullHandle;
VMBlockHandle  transListVMBHandle = NullHandle;
ChunkHandle    payListChunkArray, catListChunkArray = NullHandle;
ChunkHandle    transListChunkArray = NullHandle;
ChunkHandle    multiChunkArray = NullHandle;
word payNumItems, catNumItems = 0;
word		transSelected, newSelection = 0;
optr		catSelOpenedBy = 0;
word		selMCat = GIGS_NONE;
word 	newCatSel = GIGS_NONE;
word		findTrans = 0;
word		findField = 0;
word		findPosit = 0;

@classdecl CopyFileSelectorClass;

/*
 ***************************************************************************
 *		Code for GPCBnkrProcessClass   Document Manipulation
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	MSG_META_IACP_NEW_CONNECTION for GPCBnkrApplicationClass
 *
 * DESCRIPTION:	 see if dbl clicked doc was a .QIF
 *
 *
 ***********************************************************************/
@extern method GPCBnkrApplicationClass, MSG_META_IACP_NEW_CONNECTION
{
AppLaunchBlock *alb;
word			length;


    /* If a data file was passed see if .QIF */
    if (/*!justLaunched && */appLaunchBlock) {
	  alb = MemLock(appLaunchBlock);
	  /* see if it is .QIF */
	  length = strlen(alb->ALB_dataFile);
	  if (!strcmp(&alb->ALB_dataFile[length - 3], "QIF")) {

		/* tell user what to do */
		NotifyDBox(0, @QIFDblClickMsg);

		/* clear out data file stuff */
		*alb->ALB_dataFile = 0;
		*alb->ALB_path = 0;
		alb->ALB_diskHandle = 0;
		}

	  MemUnlock(appLaunchBlock);
	  }
    @callsuper();
    return;
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_OPEN_APPLICATION for GPCBnkrProcessClass
 *               (AppAttachFlags	attachFlags,
 *			  MemHandle		launchBlock,
 *			  MemHandle 		extraState)
 * DESCRIPTION:	 do some opening stuff
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_GEN_PROCESS_OPEN_APPLICATION
{
 AppLaunchBlock	*alb;
 word			length;
 char			dateString[DATE_TIME_BUFFER_SIZE + 1];
 TimerDateAndTime	date;
 Boolean			initError;
// Boolean			checkPrint;
 SpecWinSizePair    posData = {SWSS_RATIO | PCT_0, SWSS_RATIO | PCT_0};
 SpecWinSizePair    sizeData = {SWSS_RATIO | PCT_100, SWSS_RATIO | PCT_80};
// DisplayScheme		displayScheme;
// byte			aspectRatio;


    /* If a data file was passed see if .QIF
       need to do it here as well as NEW_CONNECTION */
    if (attachFlags & AAF_DATA_FILE_PASSED) {
	  if (launchBlock) {
		alb = MemLock(launchBlock);
		/* see if it is .QIF */
		length = strlen(alb->ALB_dataFile);
		if (!strcmp(&alb->ALB_dataFile[length - 3], "QIF")) {
             /* clear the file flag */
		   attachFlags |= AAF_DATA_FILE_PASSED;
		   /* clear out data file stuff */
		   *alb->ALB_dataFile = 0;
		   *alb->ALB_path = 0;
		   alb->ALB_diskHandle = 0;
		   }
		}
		MemUnlock(launchBlock);
	  }


    /* draw the register titles moniker */
    DrawRegTitles();

    /* Get stuff stored in ini */
    /* get the register zoom size */
    initError = InitFileReadInteger("Banker", "Zoom", &regPointSize);
    if (regPointSize == 10)
		@send ZoomOut::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    else if (regPointSize == 14)
		@send ZoomIn::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    if (initError) regPointSize = 12;
    /* set the zoom pct monikers */
    DrawPctMoniker();

    /* get the system font size (for acct dlists)*/
    initError = InitFileReadInteger("ui", "fontsize", &sysPointSize);
    if (initError) sysPointSize = 12;
    /* close on use selection */
//    initError = InitFileReadBoolean("Banker", "CloseOnUse", &closeOnUse);
//    if (initError) closeOnUse = TRUE;
    /* whether we allow check printing */
//    initError = InitFileReadBoolean("Banker", "CheckPrinting", &checkPrint);
//    if (initError) checkPrint = FALSE;
//    if (!checkPrint)  {
//	  @send CkPrint::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
//	  @send CkPAlignTrigger::MSG_GEN_SET_NOT_USABLE(VUM_DELAYED_VIA_APP_QUEUE);
//	  }
    /* whether we allow multiples ????? */


    /* see if we're running on a TV */
/*    @call GPCBnkrApp::MSG_GEN_APPLICATION_GET_DISPLAY_SCHEME(&displayScheme);
	 aspectRatio = (displayScheme.DS_displayType & DT_DISP_ASPECT_RATIO)
			    >> DT_DISP_ASPECT_RATIO_OFFSET;
    if (aspectRatio == DAR_TV) onTV = TRUE;
    else onTV = FALSE; 

/* ON TV TEST */
/*    initError = InitFileReadBoolean("Banker", "OnTV", &onTV);
    if (initError) onTV = FALSE;

    /* if we're on the TV scale the report view to 150% and make its
	* window full width */
/*    if (onTV) {
       @send TextView::MSG_GEN_VIEW_SET_SCALE_FACTOR(0, 0, SVT_AROUND_UPPER_LEFT,
                        MakeWWFixed(1.5), MakeWWFixed(1.5));
	  @send ReportGroup::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
	  @send ReportGroup::MSG_META_DELETE_VAR_DATA(
					   HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT);
	  @send ReportGroup::MSG_META_DELETE_VAR_DATA(
					   HINT_SIZE_WINDOW_AS_RATIO_OF_PARENT);
	  @send ReportGroup::MSG_META_ADD_VAR_DATA(
			(HINT_POSITION_WINDOW_AT_RATIO_OF_PARENT | VDF_SAVE_TO_STATE),
			sizeof(SpecWinSizePair),
			&posData);
	  @send ReportGroup::MSG_META_ADD_VAR_DATA(
			(HINT_SIZE_WINDOW_AS_RATIO_OF_PARENT | VDF_SAVE_TO_STATE),
			sizeof(SpecWinSizePair),
			&sizeData);
	  @send ReportGroup::MSG_GEN_SET_USABLE(VUM_NOW);
	  }
*/
    /* put system date in new Entry dialog box */
    TimerGetDateAndTime(&date);
    LocalFormatDateTime(dateString, DTF_SHORT, &date);
    @call NEFDDate::MSG_VIS_TEXT_REPLACE_ALL_PTR(dateString, 0);

    /* see which mode were in to set ImpEx/copy file sel behavior */
/*    if (UserGetDefaultUILevel() == UIIL_INTRODUCTORY)  {
	  @call ImpFileSel::MSG_GEN_FILE_SELECTOR_SET_FILE_CRITERIA(
					  FSFC_MASK_CASE_INSENSITIVE |
					  FSFC_NON_GEOS_FILES);
	  @call ImpFileSel::MSG_GEN_FILE_SELECTOR_SET_ATTRS(
					  FSA_USE_VIRTUAL_ROOT |
					  FSA_HAS_DOCUMENT_BUTTON |
					  FSA_HAS_CHANGE_DRIVE_LIST |
					  FSA_HAS_FILE_LIST);
	  @call ExpFileSel::MSG_GEN_FILE_SELECTOR_SET_FILE_CRITERIA(
					  FSFC_MASK_CASE_INSENSITIVE |
					  FSFC_NON_GEOS_FILES);
	  @call ExpFileSel::MSG_GEN_FILE_SELECTOR_SET_ATTRS(
					  FSA_USE_VIRTUAL_ROOT |
					  FSA_HAS_DOCUMENT_BUTTON |
					  FSA_HAS_CHANGE_DRIVE_LIST |
					  FSA_HAS_FILE_LIST |
					  FSA_SHOW_FILES_DISABLED);
	  @call CopyFileSel::MSG_GEN_FILE_SELECTOR_SET_FILE_CRITERIA(
					  FSFC_GEOS_NON_EXECUTABLES |
					  FSFC_FILE_FILTER |
					  FSFC_FILTER_IS_C);
	  @call CopyFileSel::MSG_GEN_FILE_SELECTOR_SET_ATTRS(
					  FSA_USE_VIRTUAL_ROOT |
					  FSA_HAS_DOCUMENT_BUTTON |
					  FSA_HAS_CHANGE_DRIVE_LIST |
					  FSA_HAS_FILE_LIST);
	  }
*/
    @callsuper();

    /* needed to install app tiny token in newUI */
    @call GPCBnkrApp::MSG_GEN_APPLICATION_INSTALL_TOKEN();

    /* needed to install doc token */
    @call process::MSG_GEN_PROCESS_INSTALL_TOKEN();

}

 /***********************************************************************
 *
 * FUNCTION:	EnterDefaultCats
 *
 * CALLED BY:	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
word EnterDefaultCats(void)
{
 MemHandle		mh;
 CatPickStruct		*pickElement;
 word			i, j, k, sepPos, endPos;
 word                   numItems;
 optr	cat[100] = {@C1, @C2, @C3, @C4, @C5, @C6, @C7, @C8, @C9, @C10,
				  @C11, @C12, @C13, @C14, @C15, @C16, @C17, @C18, @C19, @C20,
				  @C21, @C22, @C23, @C24, @C25, @C26, @C27, @C28, @C29, @C30,
				  @C31, @C32, @C33, @C34, @C35, @C36, @C37, @C38, @C39, @C40,
				  @C41, @C42, @C43, @C44, @C45, @C46, @C47, @C48, @C49, @C50,
				  @C51, @C52, @C53, @C54, @C55, @C56, @C57, @C58, @C59, @C60,
				  @C61, @C62, @C63, @C64, @C65, @C66, @C67, @C68, @C69, @C70,
				  @C71, @C72, @C73, @C74, @C75, @C76, @C77, @C78, @C79, @C80,
				  @C81, @C82, @C83, @C84, @C85, @C86, @C87, @C88, @C89, @C90,
				  @C91, @C92, @C93, @C94, @C95, @C96, @C97, @C98, @C99, @C100};
 char	entryStr[CAT_SIZE * 2 + 8];
 char	temp[5];
 dword	subs;
// Boolean	doneWithInc = FALSE;
 Boolean  addExpTitle = TRUE;


    catListVMBHandle = VMFind(GPCBnkrFile, NullHandle, CATLIST);
    VMLock(GPCBnkrFile, catListVMBHandle ,&mh);
    MemLock(OptrToHandle(@IncTitle));
    /* first add the Income title */
    pickElement = ChunkArrayAppendHandles(
				  mh,
				  catListChunkArray,
				  0);
    strcpy(pickElement->CPS_category, LMemDeref(@IncTitle));
    pickElement->CPS_subOf[0] = 0;
    pickElement->CPS_isSub = FALSE;
    pickElement->CPS_numSubs = 0;
    pickElement->CPS_type = CTYPE_INC;
    pickElement->CPS_isSelected = FALSE;
    /* now get the rest */
    for (i = 0, numItems = 0; i < 100; i++, numItems++)  {
	  endPos = strlen(LMemDeref(cat[i]));
	  if (!endPos) {
	      if(numItems) numItems--;
	      continue;  /* this one is blank, which 
			    can mean that it was removed 
			    during localization.  So don't
			    process it, since there's nothing
			    to process -- dmedeiros 12/7/00 */
	  }
	  else {
		strcpy(entryStr, LMemDeref(cat[i]));
		/* put default items into the array */
		pickElement = ChunkArrayAppendHandles(
				  mh,
				  catListChunkArray,
				  0);
		/* fill the category structure based on the entry string */
		/* its type */
		if (entryStr[0] == 'E') {
  //		   doneWithInc = TRUE;
		   pickElement->CPS_type = CTYPE_EXP;
		   if (addExpTitle) {
			 strcpy(pickElement->CPS_category, LMemDeref(@ExpTitle));
			 pickElement->CPS_subOf[0] = 0;
			 pickElement->CPS_isSub = FALSE;
			 pickElement->CPS_numSubs = 0;
			 pickElement->CPS_isSelected = FALSE;
			 addExpTitle = FALSE;
			 i--; /* to pick up first exp cat */
			 continue;
			 }
		   }
		else pickElement->CPS_type = CTYPE_INC;
		/* its name */
		pickElement->CPS_category[0] = 0;
		for (j = 2; j < CAT_SIZE + 2; j++) {
		   if ((entryStr[j] != '*') && (j < endPos))
			 pickElement->CPS_category[j-2] = entryStr[j];
		   else {
			 sepPos = j;
			 break;
			 }
		   }
		/* its parent cat */
		pickElement->CPS_subOf[0] = 0;
		pickElement->CPS_isSub = FALSE;
		k = 0;
		for (j = sepPos + 1; j < CAT_SIZE + sepPos + 1; j++) {
		   if ((entryStr[j] != '*') && (j < endPos)) {
			 pickElement->CPS_subOf[k] = entryStr[j];
			 k++;
			 }
		   else {
			 if (pickElement->CPS_subOf[0]) pickElement->CPS_isSub = TRUE;
			 sepPos = j;
			 break;
			 }
		   }
		/* its number of subcats */
		pickElement->CPS_numSubs = 0;
		temp[0] = 0;
		k = 0;
		for (j = sepPos + 1; j < 3 + sepPos + 1; j++) {
		   if ((entryStr[j] != '*') && (j < endPos)) {
			 temp[k] =  entryStr[j];
                k++;
			 }
		   else {
			 if (temp[0]) {
             temp[k] = 0;
				 if (!UtilAsciiToHex32(temp, &subs))
				  pickElement->CPS_numSubs = (word) subs;
			    }
			 break;
			 }
		   }
		pickElement->CPS_isSelected = FALSE;
		} /* end of valid entry else */
	  } /* end of for loop */
    MemUnlock(OptrToHandle(@IncTitle));
    VMDirty(mh);
    VMUnlock(mh);
    numItems +=1;
    return (numItems);
}

 /***********************************************************************
 *
 * FUNCTION:	SetUpNewCats
 *
 * CALLED BY:	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
 *
 * STRATEGY:
 *
 *
 ***********************************************************************/
void SetUpNewCats(void)
{


    /* Create a VM block for the category list ------------------ */
    catListVMBHandle = VMAlloc(GPCBnkrFile, 2048, CATLIST);
    /* create an mem block to attach to it */
    catListHeapHandle = MemAlloc(
			 2048,
			 HF_SWAPABLE,
			 HAF_LOCK);
    LMemInitHeap(catListHeapHandle,
                   LMEM_TYPE_GENERAL,
			    0,
			    sizeof(LMemBlockHeader),
                   STD_INIT_HANDLES,
                   STD_INIT_HEAP);
    /* create the chunk array  */
    catListChunkArray = ChunkArrayCreate(
				catListHeapHandle,
				sizeof(CatPickStruct),
				0,
				0);
    MemUnlock(catListHeapHandle);
    /* and attach the block to the VM - */
    VMAttach(GPCBnkrFile, catListVMBHandle, catListHeapHandle);
    /* set the number of items in the list */
    catNumItems = EnterDefaultCats();

    /* Create a VM block for the payee list ------------------ */
    payListVMBHandle = VMAlloc(GPCBnkrFile, 2048, PAYLIST);
    /* create an mem block to attach to it */
    payListHeapHandle = MemAlloc(
			    2048,
			    HF_SWAPABLE,
			    HAF_LOCK);
    LMemInitHeap(payListHeapHandle,
                   LMEM_TYPE_GENERAL,
			    0,
			    sizeof(LMemBlockHeader),
                   STD_INIT_HANDLES,
                   STD_INIT_HEAP);
    /* create the chunk array  */
    payListChunkArray = ChunkArrayCreate(
				payListHeapHandle,
				sizeof(PayPickStruct),
				0,
				0);
    MemUnlock(payListHeapHandle);
    /* and attach the block to the VM - */
    VMAttach(GPCBnkrFile, payListVMBHandle, payListHeapHandle);
    /* set the number of items in the list */
    payNumItems = 0;

    return;

}

 /***********************************************************************
 *
 * FUNCTION:	CopyPreviousCats
 *
 * CALLED BY:	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
 *
 * STRATEGY:   see if user wants to copy cat & pay lists from other file
 *             and if so, copy them.
 *
 ***********************************************************************/
Boolean CopyPreviousCats(void)
{
 MemHandle		mh;
 VMBlockHandle		vmbh;
 VMMapStruct		*VMmapPtr;
 char		listFileName[FILE_LONGNAME_BUFFER_SIZE];
 char		listFilePath[PATH_BUFFER_SIZE];
 dword		selFlags;
 VMFileHandle	listFileHandle;
 DiskHandle	listDiskHandle;
 Boolean		goodFile, copyFile;


    goodFile = FALSE;
    copyFile = FALSE;
    MemLock (OptrToHandle(@CopyListsQuest));
    if ((UserStandardDialog((char*)0,
			    (char*)0,
			    (char*)0,
			    (char*)0,
			    LMemDeref(@CopyListsQuest),
			    ((CDT_QUESTION << CDBF_DIALOG_TYPE_OFFSET) |
			    (GIT_AFFIRMATION << CDBF_INTERACTION_TYPE_OFFSET))
			    ) == IC_YES))  {
	  /* init the file sel dbox */
	  @send CopyFileSel::MSG_GEN_PATH_SET(".", SP_DOCUMENT);

	  /* this while loop keeps us in the loop so that we can check
	   * to see if the user clicks Copy when a folder is selected.
	   * If we don't trap this event the app will crash */
	  while (goodFile == FALSE) {
		if (UserDoDialog(@CopyDBox) == IC_YES)  {
		   /* Grab the file name and copy lists */
		   /* first get the flags and file name of the selection */
		   selFlags = @call CopyFileSel::
				   MSG_GEN_FILE_SELECTOR_GET_SELECTION(listFileName);
		   /* check to see if it's a file */
		   if (GFS_GET_ENTRY_TYPE(selFlags) == GFSET_FILE)  {
			 goodFile = TRUE;
			 }
		   copyFile = TRUE;
		   } /* end of IC_YES if */
		else {
		   copyFile = FALSE;
		   goodFile = TRUE;
		   }
		} /* end of goodFile = FALSE while */
	  if (copyFile)  {
		/* get the file's path and disk handle */
		@call CopyFileSel::MSG_GEN_PATH_GET(listFilePath, sizeof(listFilePath));
		listDiskHandle = @call CopyFileSel::MSG_GEN_PATH_GET_DISK_HANDLE();
		/* save our current directory */
		FilePushDir();
		/* and set the list file dir */
		FileSetCurrentPath(listDiskHandle, listFilePath);
		/* dismiss the file selector box now */
		@send CopyDBox::MSG_GEN_GUP_INTERACTION_COMMAND(IC_DISMISS);
		/* and open the file */
		listFileHandle = VMOpen(listFileName,
						    VMAF_FORCE_READ_ONLY,
						    VMO_OPEN,
						    0);
		/* get list file's VMmap block */
		vmbh = VMGetMapBlock(listFileHandle);
		/* make sure it isn't the current untitled file! */
		if (!vmbh) { /* no map block, it's the current file */
		   /* tell the user they can't do that */
		   NotifyDBox (0, @CantCopyListsMsg);
		   copyFile = FALSE;
		   }
		else { /* go ahead and copy */
		   VMmapPtr = VMLock(listFileHandle, vmbh, &mh);
		   /* retrieve the cat and pay list info */
		   catNumItems = VMmapPtr->MS_catNumber;
		   payNumItems = VMmapPtr->MS_payNumber;
		   catListChunkArray = VMmapPtr->MS_catChunkHan;
		   payListChunkArray = VMmapPtr->MS_payChunkHan;
		   VMUnlock(mh);
		   /* get old lists' block using ID # */
		   catListVMBHandle = VMFind(listFileHandle, NullHandle, CATLIST);
		   payListVMBHandle = VMFind(listFileHandle, NullHandle, PAYLIST);
		   /* copy blocks to new file */
		   VMCopyVMBlock(listFileHandle, catListVMBHandle, GPCBnkrFile);
		   VMCopyVMBlock(listFileHandle, payListVMBHandle, GPCBnkrFile);
		   }
		/* and close the old file */
		VMClose(listFileHandle, FALSE);
		/* restore the directory */
		FilePopDir();
		}  /* end of copy lists copy */
	  }  /* end of copy lists yes */

    MemUnlock (OptrToHandle(@CopyListsQuest));

    return(copyFile);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE for
 *                                       GPCBnkrDocumentClass
 *
 * DESCRIPTION:	Called to initialize a newly created document.
 *              
 *
 ***********************************************************************/
@extern method GPCBnkrDocumentClass, MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE
{
 DBGroupAndItem	mapitem;
 DBMapStruct*		mapPtr;
 MemHandle		mh;
 VMBlockHandle		vmbh;
 VMMapStruct		*VMmapPtr;
// Boolean			welcomeScreen = FALSE;


    GPCBnkrFile = pself->GDI_fileHandle;

/*	  if (!strcmp(pself->GDI_fileName, "My Finances")) {
		/* User is creating the default document... show the fancy
		 * welcome screen... */
/*		welcomeScreen = TRUE;
		if (UserDoDialog(@CreateAcctDBox) != IC_YES) {
		   @send GPCBnkrApp::MSG_META_QUIT();
		   return TRUE;
		   }
		}
*/
    /* Create an ungrouped item to use for map item */
    mapitem = DBAllocUngrouped(GPCBnkrFile, sizeof(DBMapStruct));
    /* Initialize the map item */
    DBSetMapUngrouped(GPCBnkrFile, mapitem);
    mapPtr = (DBMapStruct *) DBLockUngrouped(GPCBnkrFile, mapitem);
    mapPtr->MS_numAccts = 0;
    numAccounts = 0;
    DBDirty(mapPtr);
    DBUnlock(mapPtr);

    /* Create a VM block for the save info */
    VMAlloc(GPCBnkrFile, sizeof(SaveStruct), SAVE);

    /* if we showed the welcome screen don't offer copy cats choice */
//    if (welcomeScreen) SetUpNewCats();
    /* offer choice to either copy lists or make new ones */
	 /*else*/ if (!CopyPreviousCats()) SetUpNewCats();

    /* stash the numbers of items & the chunk handles
         in a map block 'cause it's easy to retrieve */
    vmbh = VMAlloc(GPCBnkrFile, sizeof(VMMapStruct), 0);
    VMSetMapBlock(GPCBnkrFile, vmbh);

    VMmapPtr = VMLock(GPCBnkrFile, vmbh, &mh);

    VMmapPtr->MS_catNumber = catNumItems;
    VMmapPtr->MS_payNumber = payNumItems;
    /* save the chunk handles to get back into the chunk arrays
       after the file has been closed and re-opened */      
    VMmapPtr->MS_catChunkHan = catListChunkArray;
    VMmapPtr->MS_payChunkHan = payListChunkArray;
    VMDirty(mh);
    VMUnlock(mh);

    return FALSE;
}


/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT for GPCBnkrDocumentClass
 *
 * DESCRIPTION:	Attach the document to Banker
 *
 *
 ***********************************************************************/
@extern method GPCBnkrDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
{
 DBMapStruct*		mapPtr;
 VMBlockHandle		saveBlock;
 MemHandle		mh;
 SaveStruct		*state;
 VMBlockHandle		vmbh;
 VMMapStruct		*VMmapPtr;


    /* assign our file handle */
    GPCBnkrFile = pself->GDI_fileHandle;

    /* Get the number of accounts in the file */
    mapPtr = (DBMapStruct *) DBLockMap(GPCBnkrFile);
    numAccounts = mapPtr->MS_numAccts;
    @send SelAcctDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numAccounts);
    @send MngAcctDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(numAccounts);
    DBUnlock(mapPtr);

    /* get our VMmap block */
    vmbh = VMGetMapBlock(GPCBnkrFile);
    VMmapPtr = VMLock(GPCBnkrFile, vmbh, &mh);
    /* retrieve the cat and pay list info */
    catNumItems = VMmapPtr->MS_catNumber;
    payNumItems = VMmapPtr->MS_payNumber;
    catListChunkArray = VMmapPtr->MS_catChunkHan;
    payListChunkArray = VMmapPtr->MS_payChunkHan;
    VMUnlock(mh);

    /* initialize the category and Payee d lists */
    @send CatDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(catNumItems);
    @send AddMCatDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(catNumItems);
    @send CSDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(catNumItems);
    @send PayDList::MSG_GEN_DYNAMIC_LIST_INITIALIZE(payNumItems);

    if (numAccounts < 2) {
	  @send SelectAcctTrigger::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    //	  @send NETXfer::MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }
    else {
	  @send SelectAcctTrigger::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
    //	  @send NETXfer::MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_APP_QUEUE);
	  }

    /* if this is not a new doc open the proper account */
    if (numAccounts) {
	  saveBlock = VMFind(GPCBnkrFile, NullHandle, SAVE);
	  state = (SaveStruct *) VMLock(GPCBnkrFile, saveBlock, &mh);
	  currentAcct = state->SS_currentAcct;
	  VMUnlock(mh);

	  /* build the view menu */
	  @send process::MSG_UPDATE_VIEW_MENU(UV_BUILD);

	  EnableUI();

	  currentType = TRANS_CK;

       attachUse = 1;

	  @call process::MSG_USE_ACCOUNT();
       }
    else {  /* it is a new account */
       @send process::MSG_OPEN_NEW_ACCOUNT();
	  }

}


/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT for GPCBnkrDocumentClass
 *
 * DESCRIPTION:	Called when the doc is closed.
 *              
 *
 ***********************************************************************/

@extern method GPCBnkrDocumentClass, MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
{

    GPCBnkrFile = NullHandle;

    numTrans = 0;

    ClearDisplay();


}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED for GPCBnkrDocumentClass
 *
 * DESCRIPTION:	Called on Save As.
 *
 *
 ***********************************************************************/

@extern method GPCBnkrDocumentClass, MSG_GEN_DOCUMENT_SAVE_AS_COMPLETED
{

    GPCBnkrFile = pself->GDI_fileHandle;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_CLOSE_APPLICATION for GPCBnkrProcessClass
 *
 * DESCRIPTION:	 do some closing stuff
 *              
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_GEN_PROCESS_CLOSE_APPLICATION
{

    @callsuper();

    return NULL;

}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_PROCESS_INSTALL_TOKEN for GPCBnkrProcessClass
 *
 * DESCRIPTION:	Associates token with docs
 *
 *
 ***********************************************************************/
@extern method GPCBnkrProcessClass, MSG_GEN_PROCESS_INSTALL_TOKEN
{
    dword	GPCBnkrTokenChars;
    TokenFlags	GPCBnkrTokenFlags;

    @callsuper();

    GPCBnkrTokenChars = TOKEN_CHARS('B', 'D', (dword) 'O', (dword) 'C');
	/* it won't work w/o the two casts */
    if (!TokenGetTokenInfo(GPCBnkrTokenChars, 16431, &GPCBnkrTokenFlags)) {

       TokenDefineToken(GPCBnkrTokenChars,
		16431,
		@BBDocIconMonikerList,
		0);
    }
}

/***********************************************************************
 *
 * MESSAGE:	MSG_LAUNCH_CALC for GPCBnkrProcessClass
 *             
 * DESCRIPTION:	launches the Geos Calculator
 *              Won't bring up minimized calc !!!
 *
 *
 *
 ***********************************************************************/

@extern method GPCBnkrProcessClass, MSG_LAUNCH_CALC
{
 GeodeToken		CalcToken = { "BCAL" , 0 };
 GeodeHandle		BCalcHandle;
 MemHandle		HALBCalc;
 word			numServers;
 IACPConnection	iacpConnectionToken;
 EventHandle		hToTop;
 word			connectionFlags = 0;


    /* check to see if calculator is running already */
    BCalcHandle = GeodeFind("bigcalc",7,0,0);
    
    if(BCalcHandle == NullHandle)  {  /* calc is not running */
      /* set up a launch block for it */
      HALBCalc = IACPCreateDefaultLaunchBlock(MSG_GEN_PROCESS_OPEN_APPLICATION);

      /* start it */
      iacpConnectionToken = IACPConnect(
		 &CalcToken,
		 IACPCF_OBEY_LAUNCH_MODEL||IACPSM_USER_INTERACTIBLE,
		 HALBCalc,
		 0,
		 &numServers);

      /* check to see if it got started */
      if (numServers != 1)
        {
        /* it didn't so bail out... */
        return;
        }

      /* and close the IACP connection */
      IACPShutdown(iacpConnectionToken, NullOptr);

      }  /* end of not running if */

    else  {  /* it is already running */
      /* connect to it */
      iacpConnectionToken = IACPConnect(
		   &CalcToken,
		   connectionFlags,
		   NULL,
		   NullOptr,
		   &numServers);

      /* encapsulate a message telling calc to come to the top */
      hToTop = @record GenApplicationClass::MSG_GEN_BRING_TO_TOP();


      /* send our message to calc */
      IACPSendMessage(
	    iacpConnectionToken,
	    hToTop,
	    TO_MODEL,
	    NullHandle,  /* no return msg needed */
	    IACPS_CLIENT);

      /* close the connection */
      IACPShutdown(iacpConnectionToken, NullOptr);

      }  /* end of found it running else */
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR
 *                                             for GPCBnkrDocCtrlClass
 *
 * DESCRIPTION:	To direct saves to Banker folder.
 *              
 *
 ***********************************************************************/

@extern method GPCBnkrDocCtrlClass, MSG_GEN_DOCUMENT_CONTROL_CONFIGURE_FILE_SELECTOR
{
 Boolean		notThere;


    @callsuper();

    MemLock (OptrToHandle(@BankerFolderTxt));
    notThere = @call fileSelector::MSG_GEN_PATH_SET
					 (LMemDeref(@BankerFolderTxt),
					 SP_DOCUMENT);
    MemUnlock (OptrToHandle(@BankerFolderTxt));

    if(notThere)  @call fileSelector::MSG_GEN_PATH_SET(".", SP_DOCUMENT);

}

/***********************************************************************
 *
 * MESSAGE:	MSG_VIS_DRAW() for WelcomeGenInteractionClass
 *
 * DESCRIPTION:	draws the background
 *
 * PARAMETERS:
 *	void(word drawFlags, GStateHandle gstate)
 *
 ***********************************************************************/
/*@extern method WelcomeGenInteractionClass, MSG_VIS_DRAW
{
@ifndef GPC_ONLY
    XYValueAsDWord offset;
    optr child;

    /* Get the coordinates of the first child, and draw the bitmap there */
/*    child = @call self::MSG_GEN_FIND_CHILD_AT_POSITION(0);
    offset = @call child::MSG_VIS_GET_POSITION();
    GrSaveState(gstate);
    BankerDrawBitmap(gstate, BANKER_BITMAP_WELCM, DWORD_X(offset),
		     DWORD_Y(offset));
@else
    GrSaveState(gstate);
    BankerDrawBitmap(gstate, BANKER_BITMAP_WELCM, 4, 27);
@endif
    GrRestoreState(gstate);
    @callsuper();
}

/***********************************************************************
 *			CopyFileSelectorFilterRoutine
 ***********************************************************************
 * SYNOPSIS:	    Filter a single file for the file selector.
 *
 *	    	    This routine is called once per file or directory
 *	    	    found that matches the criteria established in the
 *	    	    file selector itself.
 *
 * CALLED BY:	    GenFileSelector during re-scan
 *
 * RETURN:	    TRUE to filter the file (i.e. reject it)
 *	    	    FALSE to accept the file.
 * 
 * SIDE EFFECTS:    none
 *
 * STRATEGY:   	    We are limited in the sorts of things we can do
 *	    	    here to those things to which a FileEnum callback
 *	    	    routine is limited: looking at the attributes
 *	    	    possessed by the file (stored in the FileEnumCallbackData
 *	    	    block) and seeing if they meet our more-stringent
 *	    	    taste. [Con 18.5.5]
 *
 *		    The _pascal in front of the routine name is important
 *		    because FileEnum is expecting a pascal routine
 *		    so if the _pascal is omitted the arguments are
 *		    in the wrong order and very strange bugs will
 *		    result.
 *
 *	    	    To accomplish this, our primary tool is the
 *	    	    utility routine FileEnumLocateAttr.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jfh	10/00	Initial Revision
 *
 ***********************************************************************/
static Boolean _pascal CopyFileSelectorFilterRoutine(optr oself,
						  FileEnumCallbackData *fecd,
						  word frame)
{
char		*name;
char		untitled[FILE_LONGNAME_BUFFER_SIZE];


	/* if the file is named "Banker untitled" then reject it */
	name = FileEnumLocateAttr(fecd, FEA_NAME, NULL);
	MemLock(OptrToHandle(@untitledName));
	strcpy(untitled, LMemDeref(@untitledName));
	MemUnlock(OptrToHandle(@untitledName));
	if (!LocalCmpStrings(name, untitled, strlen(LMemDeref(@untitledName))))
	    return(TRUE);	/* reject */
	else return(FALSE);
	
}
    
/*
 * Array of attributes our filter routine will need to receive to do its work.
 * The array contains an arbitrary number of elements, the last one of which
 * has FEA_END_OF_LIST as its FEAD_attr field.
 */
const FileExtAttrDesc copyFileSelectorFilterAttrs[] = {
{ FEA_NAME, 0, sizeof(FileLongName), NULL },
{ FEA_END_OF_LIST, 0, 0, NULL}
};

/***********************************************************************
 * MSG_GEN_FILE_SELECTOR_GET_FILTER_ROUTINE for CopyFileSelectorClass
 ***********************************************************************
 *
 * SYNPOSIS:	This message is sent by the file selector before rescanning
 *	    	to obtain the routine we want to use to filter the files
 *	    	that are displayed.
 *
 * PARAMETERS:
 *	void (GenFileSelectorGetFilterRoutineResults *filter);
 *
 * STRATEGY:	This message returns virtual pointers to both the
 *		filtering routine and the filtering attribute
 *		structures needed. 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	jfh	10/00	Initial Revision
 *
 ***********************************************************************/
@method CopyFileSelectorClass, MSG_GEN_FILE_SELECTOR_GET_FILTER_ROUTINE
{
static GenFileSelectorFilterRoutine *const filterRoutine =
        (GenFileSelectorFilterRoutine *const)
	&CopyFileSelectorFilterRoutine;


    filter->filterRoutine = filterRoutine;
    filter->filterAttrs = copyFileSelectorFilterAttrs;
    
}

/***********************************************************************
 *
 * MESSAGE:	(GEN_FILE_SELECTOR_NOTIFICATION_MSG) MSG_COPY_SELECTOR_ACTION
 *										for GPCBnkrProcessClass
 *                 (word entryNum, word entryFlags)
 * DESCRIPTION:
 *
 *              checks for selection
 *              
 *
 ***********************************************************************/

/*@extern method GPCBnkrProcessClass, MSG_COPY_SELECTOR_ACTION
{

	 /* need this to make Import button dim in CUI */

	 /* doesn't work yet... because the file sel is in a user do dialog
	  * that is blocking the thread. */

 /*   if (GFS_GET_ENTRY_FLAGS(entryFlags) == GFSEF_NO_ENTRIES) {
	  @send Copy::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
	  return;
	  }

    if (GFS_GET_ENTRY_TYPE(entryFlags) == GFSET_FILE)
	  @send Copy::MSG_GEN_SET_ENABLED(VUM_NOW);
    else
	  @send Copy::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
*/
//}


