/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		TinyTP C Test App
FILE:		ttpsCBck.goc

AUTHOR:		Andy Chiu, May 13, 1996

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	5/13/96   	Initial version.
	RainerB	12/02/2022	Some unused symbols removed

DESCRIPTION:
	Callback from Tiny TP

	$Id: ttpsCBck.goc,v 1.1 97/04/04 16:41:20 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@define __TTPS_CALLBACK_GOC
@include "ttps.goh"


/***********************************************************************
 *		TCConnectIndication
 ***********************************************************************
 * SYNOPSIS:	Received IIC_CONNECT_INDICATION from Irlmp Library
 * CALLED BY:	
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal TCConnectIndication (ClientHandle client, IrlmpConnectArgs *connectArgs)
{
    IrlmpDataArgs dataArgs;

    TUShowStatusOptr(@connectIndicationMsg);

    if (connectArgs->ICA_dataSize) {
	TUSetRecvText((IrlmpDataArgs *)connectArgs);

	HugeLMemFree(connectArgs->ICA_data);
    }

    /* Send out a LM_Connect.response */
    /* ------------------------------ */
    TUGetSendText(&dataArgs);
    TUClearSendText();

    /* Increase credit to advance to peer */

    TTPConnectResponse(client, &dataArgs);
	
    TTPAdvanceCredit(client, 5);

    @send GeodeGetCodeOptrNS(@TtpsDataTrigger)::
	    MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
    @send GeodeGetCodeOptrNS(@TtpsStatusTrigger)::
	    MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
    @send GeodeGetCodeOptrNS(@TtpsDisconnectTrigger)::
	    MSG_GEN_SET_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);

}	/* End of TCConnectIndication.	*/


/***********************************************************************
 *		TCDisconnectIndication
 ***********************************************************************
 * SYNOPSIS:	Received IIC_DISCONNECT_INDICATION from Irlmp Library
 * CALLED BY:	
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal TCDisconnectIndication (IrlmpDataArgs *dataArgs)
{
    TUShowStatusOptr(@disconnectIndicationMsg);

    if (dataArgs->IDA_dataSize) {
	TUSetRecvText(dataArgs);

	HugeLMemFree(dataArgs->IDA_data);
    }
       
    @send GeodeGetCodeOptrNS(@TtpsDataTrigger)::
	    MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
    @send GeodeGetCodeOptrNS(@TtpsStatusTrigger)::
	    MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);
    @send GeodeGetCodeOptrNS(@TtpsDisconnectTrigger)::
	    MSG_GEN_SET_NOT_ENABLED(VUM_DELAYED_VIA_UI_QUEUE);

}	/* End of TCDisconnectIndication.	*/


/***********************************************************************
 *		TCDataIndication
 ***********************************************************************
 * SYNOPSIS:	Received IIC_DATA_INDICATION from IrlmpLibrary
 * CALLED BY:	TtpsIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	5/29/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal TCDataIndication (IrlmpDataArgs *dataArgs)
{
    TUShowStatusOptr(@dataIndicationMsg);
    if (dataArgs->IDA_dataSize) {
	TUSetRecvText(dataArgs);
	HugeLMemFree(dataArgs->IDA_data);
    }

    TTPAdvanceCredit(clientHandle, 1);

}	/* End of TCDataIndication.	*/


/***********************************************************************
 *		TCStatusConfirmation
 ***********************************************************************
 * SYNOPSIS:	LM_Status.confirm
 * CALLED BY:	TtpsIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	5/29/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal TCStatusConfirmation (ConnectionStatus status)
{
    optr statusOptr;

    if (status & CS_IMPENDING_DISCONNECTION) {
	if (status & CS_UNACKED_DATA)
	    statusOptr = @statusNoisyUnackedMsg;
	else
	    statusOptr = @statusNoisyMsg;
    }
    else if (status & CS_UNACKED_DATA) 
	statusOptr = @statusUnackedMsg;
    else
	statusOptr = @statusOkayMsg;
    
    TUShowStatusOptr(statusOptr);

}	/* End of TCStatusConfirmation.	*/


/***********************************************************************
 *		TCStatusIndication
 ***********************************************************************
 * SYNOPSIS:	LM_Status.indcation
 * CALLED BY:	TtpsIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	5/29/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal TCStatusIndication (void)
{

    TUShowStatusOptr(@statusIndicationMsg);

}	/* End of TCStatusIndication.	*/


/***********************************************************************
 *		TtpsIrlmpCallback
 ***********************************************************************
 * SYNOPSIS:	Callback routine for IrLMP Library
 * CALLED BY:	IrLMP Library 
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	5/29/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal TtpsIrlmpCallback (ClientHandle clientHandle,
			  IrlmpIndicationOrConfirmation type,
			  word extra,
			  dword data,
			  word status)
{

    /* We need to do this so that access to our global variables */
    /* will work.  This makes sure that ds points to our dgroup  */
    /*-----------------------------------------------------------*/
    GeodeLoadDGroup(extra);

    switch (type) {
        case TTPIC_CONNECT_INDICATION:
	  TCConnectIndication(clientHandle, (IrlmpConnectArgs *) data);
	  break;
        case TTPIC_DISCONNECT_INDICATION:
	  TCDisconnectIndication((IrlmpDataArgs *) data );
	  break;
        case TTPIC_DATA_INDICATION:
	  TCDataIndication((IrlmpDataArgs *) data);
	  break;
        case IIC_STATUS_INDICATION:
	  TCStatusIndication();
	  break;
        case TTPIC_STATUS_CONFIRMATION:
	  TCStatusConfirmation((ConnectionStatus) status);
	  break;
        default:
	  break;
    } /* switch */

}	/* End of TtpsIrlmpCallback.	*/



/***********************************************************************
 *		TUShowStatusOptr
 ***********************************************************************
 * SYNOPSIS:	Show the whats happening in the status bar
 * CALLED BY:	(EXTERNAL)
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	5/29/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal TUShowStatusOptr (optr status)
{
    MemLock(OptrToHandle(status));
    TUShowStatus(LMemDeref(status));
    MemUnlock(OptrToHandle(status));

}	/* End of TUShowStatusOptr.	*/

