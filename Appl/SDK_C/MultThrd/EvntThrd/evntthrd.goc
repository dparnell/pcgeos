/***********************************************************************
 *
 *	Copyright (c) Geoworks 1996 -- All Rights Reserved
 *
 * PROJECT:	  GEOS
 * MODULE:	  Event-driven Thread (Sample GEOS application)
 * FILE:	  evntthrd.goc
 *
 * AUTHOR:	  Ed Ballot, 1/96
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	1/96	  EB	    Initial version
 *	4/96	  PPC	    Display feedback of events sent to new object		    
 *	4/2022	  RainerB	MSG_ETP_CREATE_EVENT_THREAD updated
 *
 * DESCRIPTION:
 *	Every GEOS application can automatically be multi-threaded:
 *	it can have both a process thread, and a ui thread.  Sometimes,
 *	however, it may be necessary to spawn more threads dynamically.
 *	This sample application shows how to create an event-driven thread,
 *	using MSG_PROCESS_CREATE_EVENT_THREAD.
 *
 *	[To see how to create a procedural thread, see the ProcThrd sample
 *	application.  For more complete documentation on multiple threads
 *	in GEOS, see Concepts, Appendix B: "Threads and Semaphores."]
 *
 *      Event-driven threads are useful if you have objects or methods that
 *	might overburden the application's current threads with a heavy
 *	amount of processing, or if you want the objects to receive their
 *	messages in a timely manner (i.e., you don't want them sharing the
 *	message queue of a standard thread).
 *
 *	The new thread can run a ProcessClass object, but not a
 *	GenProcessClass object.  Other objects can be run by the thread by
 *	assigning their resources to the thread handle.  Remember that objects
 *	in the Generic tree must all be run by the same thread (usually the
 *	ui-thread), so you can't create an extra thread and have it run part
 *	of the gentree.
 *
 *	This sample application creates an event-driven thread which runs
 *	SecondaryProcessClass (a subclass of ProcessClass) and then
 *	has it run a GenValueClass object by duplicating the resource
 *	which contains the GenValue.  The GenValue is duplicated in
 * 	MSG_META_ATTACH of SecondaryProcessClass.  (Remember, though, that
 *	the GenValue object won't show up in the UI, since it can't be part
 *	of the application's gentree.)
 *
 *	Whenever you create a new thread, you are responsible for destroying
 * 	it.  The best way to do this is send MSG_META_DETACH to the thread.
 *	One difficulty with this is that the thread responds to a detach by
 *	sending MSG_PROCESS_NOTIFY_THREAD_EXIT to our application's process,
 *	so we can't kill the thread from MSG_GEN_PROCESS_CLOSE_APPLICATION:
 *      by the time the thread sends MSG_PROCESS_NOTIFY_THREAD_EXIT, the
 *	application would already be closed, so the process object wouldn't
 *	exist to receive the message.  The solution is to send the detach
 *	message when our application's process receives MSG_META_DETACH.
 *
 *	We keep track of whether an extra thread is running or not by
 *	storing the thread's handle in the GTI_destination of the
 *	KillThreadTrigger.  (It needs to store the thread's handle
 *	anyway so that it can send MSG_META_DETACH to the thread.)
 *
 *	Also remember that before you destroy a thread, you must "clean up"
 *	after it:  release any semaphores or thread locks, unlock any locked
 *	memory resources, etc.
 *
 *	Although not necessary for this sample application,
 *	MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE is subclassed to prevent
 *	a statefile from being created since this application gains
 *	nothing by saving to state.
 *
 *	$Id: evntthrd.goc,v 1.1 97/04/04 16:40:58 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */
@include <stdapp.goh>


/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */
/*
 * An object of this class will be run by a new event-driven thread.
 */
@class	SecondaryProcessClass, ProcessClass;
@endc;


/*
 * Our application's process object.  When defining more than one Process
 * class, the application's process class MUST be defined last, since GOC
 * always assumes that the last process class defined will be the app's
 * process class (and hence, associated with the keyword "process").
 */
@class	ETProcessClass, GenProcessClass;
@message void MSG_ETP_CREATE_EVENT_THREAD();
@endc;


/*
 * A new trigger class, to save the optr of a new GenValue object that's
 * created dynamically, and that will be run by the new event thread.
 */
@class ETTriggerClass, GenTriggerClass;
/* access methods for new instance datum */
@message optr MSG_ET_TRIGGER_GET_NEW_OBJ();
@message void MSG_ET_TRIGGER_SET_NEW_OBJ(optr newObj);
/* This methods sends a message via the new thread to the new GenValue obj */
@message void MSG_ET_TRIGGER_SEND_EVENT();
    /* This variable holds the optr of the new GenValue obj */
    @instance optr ETTI_newObj = NullOptr;
@endc;


/*
 * ProcessClass objects never have instance data to save to state,
 * so mark them as such.
 */
@classdecl	SecondaryProcessClass, neverSaved;
@classdecl	ETProcessClass, neverSaved;
@classdecl	ETTriggerClass;



/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */
/*
 *	Application Resource
 *
 * The application object usually resides in its own resource, so that
 * when the application is in the background, its memory usage is minimized.
 */
@start	AppResource;

@object GenApplicationClass ETApp = {
    GI_visMoniker = list { @ETTextMoniker };
    GI_comp = @ETPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @ETPrimary;
}

@visMoniker ETTextMoniker = "Event Thread Sample Application";

@end	AppResource;


/*
 *	Interface Resource
 *
 * This resource holds the UI objects for the application.
 */
@start	Interface;

@object GenPrimaryClass ETPrimary  = {
    GI_comp = @F1_CreateEventThreadTrigger,
	      @F2_SendEventTrigger,
	      @F3_KillThreadTrigger,
	      @ETHelp;

    HINT_CENTER_CHILDREN_HORIZONTALLY;
    HINT_CENTER_CHILDREN_VERTICALLY;
}

@object GenTriggerClass F1_CreateEventThreadTrigger = {
    GI_visMoniker = 'C', "Create";
    GTI_destination = process;
    GTI_actionMsg = MSG_ETP_CREATE_EVENT_THREAD;

    HINT_SEEK_MENU_BAR;
    HINT_SEEK_SLOT = {0};
}

@object ETTriggerClass F2_SendEventTrigger = {
    GI_visMoniker = 'I', "Incr";
    GI_states = (@default) & ~GS_ENABLED;
    GTI_actionMsg = MSG_ET_TRIGGER_SEND_EVENT;
    GTI_destination = @F2_SendEventTrigger;
    /*
     * ETTI_newObj will be set in MSG_META_ATTACH handler
     * for SecondaryProcessClass
     */

    HINT_SEEK_MENU_BAR;
    HINT_SEEK_SLOT = {1};
}

@object GenTriggerClass F3_KillThreadTrigger = {
    GI_visMoniker = 'K', "Kill";
    GI_states = (@default) & ~GS_ENABLED;
    GTI_actionMsg = MSG_META_DETACH;
    /* GTI_destination will be set in MSG_ETP_CREATE_EVENT_THREAD */
    ATTR_GEN_TRIGGER_ACTION_OPTR_AND_WORD = {NullOptr, 0};

    HINT_SEEK_MENU_BAR;
    HINT_SEEK_SLOT = {2};
}

@object GenTextClass ETHelp = {
    GI_attrs = @default | GA_READ_ONLY;
    GTXI_text = "'Create' will spawn a new, event-driven thread.  \
The thread will run a new GenValue object.\r\r\
'Incr' will increment the GenValue object.\r\r\
'Kill' will destroy the new thread.";
}

@end	Interface;



/*
 * 	Secondary Thread Objects Resource
 *
 * This resource holds a GenValue object -- this resource will be duplicated
 * at run-time, and run by the new event-driven thread.  The SendEventTrigger
 * will send MSG_GEN_VALUE_INCREMENT to the new GenValue object; since it
 * does not appear in the UI, however, you must use Swat to examine its
 * GVLI_value to see the effects of the SendEventTrigger.
 */
@start  SecondaryThreadObjectsResource, notDetachable;

@object GenValueClass GenValueTemplate = {
}

@end	SecondaryThreadObjectsResource;



/*
 *	Constant Data Resource
 *
 * This resource holds strings that are used in the application.
 * Placing strings in their own resource allows them to be localized
 * using the GEOS localization tool, ResEdit.
 */
@start	ConstantData, data;

@chunk char CannotCreateThread[] = "Error: Can't create thread";

@end	ConstantData;



/*
 ***************************************************************************
 *		  Code for ETProcessClass
 ***************************************************************************
 */
/***********************************************************************
 *		  MSG_ETP_CREATE_EVENT_THREAD for ETProcessClass
 ***********************************************************************
 * SYNOPSIS:	  Create an event-driven thread and update the menu triggers
 * PARAMETERS:	  void (void)
 * SIDE EFFECTS:  MSG_META_ATTACH is sent to the process of the new thread.
 *		  Other setup of the triggers is handled in that method.
 *
 * STRATEGY:      Create the event-driven thread.  If it cannot be created
 *                then report the problem.  Otherwise, disable the CreateEvent-
 *                ThreadTrigger and set the destination of the KillThreadTrigger
 *                to be the handle of the new thread.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	EB		1/96		Initial Version
 *	RainerB	4/2022		Unused local variables removed
 *
 ***********************************************************************/
@method ETProcessClass, MSG_ETP_CREATE_EVENT_THREAD
{
    Boolean	 notOK;
    ThreadHandle newThread;
    //MemHandle 	 newResource;
    //optr	 newChild;

    /*
     * Create the event-driven thread.  If the thread could not be created,
     * then put up a dialog to say such.
     */
    notOK = @call self::MSG_PROCESS_CREATE_EVENT_THREAD(
		&newThread,
		(ClassStruct*)&SecondaryProcessClass,
		512);	 /* new thread's stack size */
    if ( notOK ) {
	MemLock(OptrToHandle(@CannotCreateThread));
	UserStandardDialogOptr(
		 NullOptr, NullOptr, NullOptr, NullOptr,
		 @CannotCreateThread,
		 ( (CDT_ERROR << CDBF_DIALOG_TYPE_OFFSET) |
		   (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) )
	);
	MemUnlock(OptrToHandle(@CannotCreateThread));
    } else {
	/*
	 * Disable the CreateEventThreadTrigger so we don't get another
	 * thread created. (This application is not designed to
	 * handle creation of more than one extra thread.)
	 */
	@send F1_CreateEventThreadTrigger::MSG_GEN_SET_NOT_ENABLED(
		VUM_DELAYED_VIA_APP_QUEUE);

	/*
	 * Set the GTI_destination of the KillThreadTrigger so it can send
	 * the detach message to the newly created event-thread.
	 *
	 * This will also be used in ETProcessClass's MSG_META_DETACH
	 * method, to determine whether the thread is still running (and thus
	 * needs to be killed).
	 */
	@call F3_KillThreadTrigger::MSG_GEN_TRIGGER_SET_DESTINATION(
					ConstructOptr(newThread, 0));
    }
} /* End of MSG_ETP_CREATE_EVENT_THREAD */



/***********************************************************************
 *		  MSG_META_DETACH for ETProcessClass
 ***********************************************************************
 * SYNOPSIS:      The application will receive this message if the user
 *		  wants to exit the application.  We have to shut down our
 *		  new thread, if it exists, because simply exiting the app
 *		  won't automatically exit the new thread, and it's a bad
 *		  idea to leave threads alive in the system.
 *		  If there is a new thread, then detach it before leaving.
 * PARAMETERS:	  void (word callerID, optr caller)
 * SIDE EFFECTS:  none
 *
 * STRATEGY:      Get the thread handle which is stored in GTI_destination
 *                of F3_KillThreadTrigger.
 *                If the optr is not NullOptr then send MSG_META_DETACH
 *		  to the optr (which is the process of the thread).
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	EB	1/96		Initial Version
 *
 ***********************************************************************/
@method ETProcessClass, MSG_META_DETACH
{
    optr thread;

    thread = @call F3_KillThreadTrigger::MSG_GEN_TRIGGER_GET_DESTINATION();
    if ( thread ) {
	/*
	 * Have to @call because in the detach method we update UI
	 * and it would be bad if that UI no longer existed. In fact,
	 * this would cause crashes.
	 */
	@call thread::MSG_META_DETACH(0, (optr)0);
    }

    @callsuper();
} /* End of MSG_META_DETACH */



/***********************************************************************
 *	 	  MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE
 *			for ETProcessClass
 ***********************************************************************
 * SYNOPSIS:	  We don't want to save to state so return NullHandle
 * PARAMETERS:	  MemHandle (VMFileHandle)
 * SIDE EFFECTS:  no state file created for application
 *
 * STRATEGY:      Since PDAs generally do not have a whole lot of disk
 *		  space, not saving to state can be nice.  This is
 *		  accomplished by returning a null handle.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	EB	1/96		Initial Version
 *
 ***********************************************************************/
@method ETProcessClass, MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE
{
    /*
     * We don't want to save any state information so return NULL.
     * Since no state file is being saved, don't even call superclass.
     */
    return (NullHandle);
} /* End of MSG_GEN_PROCESS_CREATE_NEW_STATE_FILE */




/*
 ***************************************************************************
 *		  Code for SecondaryProcessClass
 ***************************************************************************
 */
/***********************************************************************
 *		  MSG_META_ATTACH for SecondaryProcessClass
 ***********************************************************************
 * SYNOPSIS:      Attach a GenValue object to the SecondaryProcess.
 * PARAMETERS:	  void (void)
 * SIDE EFFECTS:  A new resource containing the object is created.
 *
 * STRATEGY:      Duplicate the resource containing the GenValue
 *		  and attach it to the process.
 *		  Set GTI_destination of the SendEventTrigger so it
 *		  will send messages to the newly created GenValue.
 *		  Update triggers' enabled status so users can't activate
 *		  triggers inapropriately.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	EB	1/96		Initial Version
 *
 ***********************************************************************/
@method SecondaryProcessClass, MSG_META_ATTACH
{
    MemHandle 	 newResource;
    optr	 newChild;

    @callsuper();

    /*
     * Duplicate the resource and have it run by the current thread,
     * which is the specially created event-thread.
     */
    newResource = ObjDuplicateResource(OptrToHandle(@GenValueTemplate),
				       0, 0);

    /*
     * Set the SendEventTrigger's ETTI_newObj instance datum
     * to point to the newly created GenValue object.
     */
    newChild = ConstructOptr(newResource, OptrToChunk(@GenValueTemplate));
    @call F2_SendEventTrigger::MSG_ET_TRIGGER_SET_NEW_OBJ(newChild);

    /*
     * Make both the triggers enabled to you can play around.
     */
    @send F2_SendEventTrigger::MSG_GEN_SET_ENABLED(
	VUM_DELAYED_VIA_APP_QUEUE);
    @send F3_KillThreadTrigger::MSG_GEN_SET_ENABLED(
	VUM_DELAYED_VIA_APP_QUEUE);
} /* End of MSG_META_ATTACH */



/***********************************************************************
 *		  MSG_META_DETACH for SecondaryProcessClass
 ***********************************************************************
 * SYNOPSIS:      Free up the resource with the GenValue and
 *		  enable/disable triggers appropriately.
 * PARAMETERS:	  void (word callerID, optr caller)
 * SIDE EFFECTS:  none
 *
 * STRATEGY:      Update the enabled status of the various triggers
 *                so users can't trigger unwanted events.
 *                Get the handle of the resource which contains the
 *                GenValue and free the resource since the process
 *                is detaching.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	EB	1/96		Initial Version
 *
 ***********************************************************************/
@method SecondaryProcessClass, MSG_META_DETACH
{
    optr	 childOptr;

    /*
     * Clear the kill trigger's destination to mark that there's currently
     * no event thread.  We do this so when the main application quits it
     * can check F3_KillThreadTrigger's GTI_destination to determine whether
     * an event thread is currently running (and if a thread is running
     * detach the it before closing the app).
     */
    @call F3_KillThreadTrigger::MSG_GEN_TRIGGER_SET_DESTINATION(NullOptr);

    /*
     * Disable both the triggers to prevent unwanted events from occuring.
     */
    @send F2_SendEventTrigger::MSG_GEN_SET_NOT_ENABLED(
	VUM_DELAYED_VIA_APP_QUEUE);
    @send F3_KillThreadTrigger::MSG_GEN_SET_NOT_ENABLED(
	VUM_DELAYED_VIA_APP_QUEUE);

    /*
     * After killing the thread, we need to dump the object resource that
     * we had attached to it.  Luckily, the optr to the object was stored
     * in F2_SendEventTrigger, so we can grab the handle from there.
     */
    childOptr = @call F2_SendEventTrigger::MSG_ET_TRIGGER_GET_NEW_OBJ();
    ObjFreeDuplicate(OptrToHandle(childOptr));

    @callsuper();

    /*
     * Re-enable the CreateEventThreadTrigger so user can once again
     * create a new thread.
     */
    @send F1_CreateEventThreadTrigger::MSG_GEN_SET_ENABLED(
	VUM_DELAYED_VIA_APP_QUEUE);
} /* End of MSG_META_DETACH */




/*
 ***************************************************************************
 *		  Code for ETTriggerClass
 ***************************************************************************
 */
/***********************************************************************
 *		  MSG_ET_TRIGGER_[GET|SET]_NEW_OBJ for ETTriggerClass
 ***********************************************************************
 * SYNOPSIS:      Return or set the ETTI_newObj field of the ETTrigger.
 * PARAMETERS:	  GET: optr (void)
 *		  SET: void (optr)
 * SIDE EFFECTS:  none
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	PPC	4/96		Initial Version
 *
 ***********************************************************************/
@method ETTriggerClass, MSG_ET_TRIGGER_GET_NEW_OBJ
{
    return(pself->ETTI_newObj);
} /* End of MSG_ET_TRIGGER_GET_NEW_OBJ */

@method ETTriggerClass, MSG_ET_TRIGGER_SET_NEW_OBJ
{
    pself->ETTI_newObj = newObj;
} /* End of MSG_ET_TRIGGER_SET_NEW_OBJ */




/***********************************************************************
 *		  MSG_ET_TRIGGER_SEND_EVENT for ETTriggerClass
 ***********************************************************************
 * SYNOPSIS:      Sends an event to the new GenValue object, via the
 *		  the event thread.
 * PARAMETERS:	  void (void)
 * SIDE EFFECTS:  Increments the GenValue object; puts up a dialog box
 *		  in the UI that shows the new GenValue value.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	PPC	4/96		Initial Version
 *
 ***********************************************************************/
@method ETTriggerClass, MSG_ET_TRIGGER_SEND_EVENT
{
    WWFixedAsDWord value;
    char valStr[10];

    /*
     * Send an event to the new GenValue object, which the new
     * event thread will handle
     */
    @call (pself->ETTI_newObj)::MSG_GEN_VALUE_INCREMENT();
    /*
     * Since the GenValue doesn't appear in the UI, get its value
     * and display it in a dialog box, so the user knows what's going on
     */
    value = @call (pself->ETTI_newObj)::MSG_GEN_VALUE_GET_VALUE();
    LocalFixedToAscii(valStr, value, 1);

    UserStandardDialog(
	 (char *) 0, (char *) 0, (char *) 0, valStr,
	 "New GenValue object value = \001",
	 ( (CDT_NOTIFICATION << CDBF_DIALOG_TYPE_OFFSET) |
	   (GIT_NOTIFICATION << CDBF_INTERACTION_TYPE_OFFSET) )
    );
} /* End of MSG_ET_TRIGGER_SEND_EVENT */

