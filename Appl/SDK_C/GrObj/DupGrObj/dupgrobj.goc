/***********************************************************************
 *
 *	Copyright (c) Geoworks 1996 -- All Rights Reserved.
 *
 * PROJECT:	Sample Applications
 * MODULE:	GrObj -- Using GrObj with Duplicated
 *              Template Resources
 * FILE:	dupgrobj.goc
 *
 * AUTHOR:  	Allen Schoonmaker, Mar  6, 1992
 *
 * REVISION HISTORY:
 *	Name	Date	        Description
 *	----	----	        -----------
 *	AS	3/6/92          Initial version
 *      NF      9/18/96         Added EC code
 *
 * DESCRIPTION:
 *	This application demonstrates the basic operations required
 *	to use the Graphic Object Library in one's document.
 *
 *	(Throughout this file you will see references like this: [Con 7.2.1]
 *	This is a reference to chapter 7, section 7.2.1 of the Concepts
 *	manual. [Obj 7.2.1] is a reference to chapter 7, section 7.2.1 of the
 *	Objects manual. You should use these references to locate further
 *	information about the topic being discussed if anything is unclear.)
 *
 *	The Graphic Object Library (GrObj for short) provides a large
 *	amount of functionality for very little effort. To use it, you
 *	must have a VM file [Conc 19], either as your document or for
 *	temporary storage.
 *
 *	GrObj is a world unto itself, connecting with the outside world
 *	primarily through the GrObjBodyClass, which serves as the canvas
 *	on which the individual graphic objects draw. You create a
 *	GrObjBody object and add it as a visible child of a VisContent
 *	(we use a subclass of GenDocument as the visible parent, since
 *	GenDocument is a subclass of VisContent, through the wonders of
 *	variant superclasses). Plug a few GenControl objects in and the
 *	user can create and manipulate graphical objects with no further
 *	work on your part.
 *
 *	Well, it's almost that simple. Refer to [Obj 19] for further
 *	information on the GrObj, [Obj 12] for information on GenControl
 *	objects, [Obj 9] and [Obj 26] for details on the GenView and
 *	VisContent, respectively, and [Obj 13] for the document control
 *	mechanism provided by the generic UI.
 *
 *	You should probably be familiar with the sample applications in
 *	Appl/SDK_C/Document before proceeding.
 *
 * RCS STAMP:
 *	$Id: dupgrobj.goc,v 1.1 97/04/04 16:38:00 newdeal Exp $
 *
 **********************************************************************/

/*
 ***********************************************************************
 *		Include files
 ***********************************************************************
 */

@include <stdapp.goh>
@include <grobj.goh>

/*
 ***********************************************************************
 *		Constants and structures
 ***********************************************************************
 */

#define DOCUMENT_PROTOCOL_MAJOR	1
#define DOCUMENT_PROTOCOL_MINOR	0

#define DOCUMENT_WIDTH		(8.5*72)
#define DOCUMENT_HEIGHT		(11*72)

/*
 * This is the structure of information stored in
 * the vm file's map block.
 */
typedef	struct {
    word	DGMB_bodyBlock;    /* VM block handle of the block
				    * that contains the GrObjBody and
				    * the GrObjAttributeManager.
				    */
} DGMapBlock;

/*
 ***********************************************************************
 *		Global variables
 ***********************************************************************
 */

/*
 ***********************************************************************
 *		Class & Message Definitions
 ***********************************************************************
 */

@class	DGProcessClass, GenProcessClass;
@endc;

/*
 * DGDocument class is our subclass of GenDocument that
 * we use to add behavior to the GenDocument
 */

@class	DGDocumentClass, GenDocumentClass;
@endc;

@classdecl	DGProcessClass, neverSaved;
@classdecl	DGDocumentClass;

/*
 ***********************************************************************
 *		UI Objects
 ***********************************************************************
 */

/*
 *		Application Object
 */

@start	AppResource;

@object GenApplicationClass DGApp = {
    GI_visMoniker = list { @DGTextMoniker };
    GI_comp = @DGPrimary,
              @ToolControl;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @DGPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_APP_STARTUP) =
		@DGDocumentControl;
    gcnList(MANUFACTURER_ID_GEOWORKS,MGCNLT_ACTIVE_LIST) =
		@DGDocumentControl,
		@DGDisplayControl;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_SELF_LOAD_OPTIONS) =
		@DGDocumentControl,
		@DGDisplayControl,
		@AreaAttrControl,
		@LineColorControl,
                @LineAttrControl,
		@ToolControl;
    /*
     * Specify the category in the .ini file [Conc 6.3.2] into which
     * user-settable options for this application should be placed.
     */
    ATTR_GEN_INIT_FILE_CATEGORY = "dupgrobj";
}

@visMoniker DGTextMoniker = "C DupGrObj Sample Application";

@end	AppResource;

/*
 *		Primary window
 */

@start	Interface;		/* this resource is for misc UI objects */

@object GenPrimaryClass DGPrimary  = {
    GI_comp = 	@DGFileMenu,
		@DGControlsMenu,
		@DGWindowMenu,
                @DGToolbar,
		@DGDisplayGroup;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

/*
 *	    File Menu
 */
@object GenInteractionClass DGFileMenu = {
    GI_attrs = @default | GA_KBD_SEARCH_PATH;
    GI_comp = @DGDocumentControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = ( GIGT_FILE_MENU );
    HINT_SEEK_MENU_BAR;
}

@object GenDocumentControlClass DGDocumentControl = {
    GII_visibility = GIV_POPUP;
    /*
     * Document file's token
     */
    GDCI_documentToken = { "SAMP", MANUFACTURER_ID_GEOWORKS };
    /*
     * Text to display in the header area of the primary when no
     * document is open.
     */
    GDCI_noNameText = "No Document";
    /*
     * Template directory
     */
    GDCI_templateDir = "SAMPLE";
    /*
     * Special attributes: allow multiple open files, don't display
     * name on primary (this will be handled via the display control).
     */
    GDCI_attrs = @default | GDCA_MULTIPLE_OPEN_FILES;
    GDCI_features = @default & ~GDCF_NAME_ON_PRIMARY;
    /*
     * Pointer to the GenDocumentGroup
     */
    GDCI_documentGroup = @DGDocumentGroup;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_FILE_MENU);
}

/*
 *	    Window Menu
 */
@object GenInteractionClass DGWindowMenu = {
    GI_comp = @DGDisplayControl;
    GII_visibility = GIV_POPUP;
    ATTR_GEN_INTERACTION_GROUP_TYPE = (GIGT_WINDOW_MENU);
}

@object GenDisplayControlClass DGDisplayControl = {
}

/*
 * 	    Controls Menu
 *
 * This menu contains the various GrObj controllers we make use of here.
 * There are many, many possible controllers (24 on 9/22/92) we could use, but
 * this is supposed to be a sample application, not a doctoral thesis, so we
 * will use just four:
 *	- GrObjToolControl provides the set of non-bitmap drawing tools.
 *	- GrObjAreaColorSelector allows one to set the color used inside
 *	  the objects one draws.
 *	- GrObjLineColorSelector allows one to set the color used for the
 *	  perimeter of the objects one draws.
 *	- GrObjLineAttrControl allows one to set the style of line (dashed,
 *	  dotted, really thick, etc.) used in drawing the perimeters.
 *
 * There's very little to do here, as the default values for these controllers
 * is pretty much what we want to use. For example, each of these sends the
 * messages it uses to control the object it's controlling using the
 * TO_APP_TARGET TravelOption [Obj 2.3.6.1]. Because the GrObjBody for the
 * document is the target when it's open, messages from the controllers
 * automatically find their way to the GrObjBody. Since TO_APP_TARGET is the
 * default output for all these controllers, we need do nothing here.
 */

@object GenInteractionClass DGControlsMenu = {
    GI_visMoniker = 'C', "Controls";
    GI_comp = @AreaAttrControl,
              @LineAttrDialog;
    GII_visibility = GIV_POPUP;
}

  /* Toolbar object, contains tool groups */
@object GenInteractionClass DGToolbar = {
    GI_comp = @DGToolToolGroup;
    HINT_TOOLBOX;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_ALLOW_CHILDREN_TO_WRAP;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_FULL_JUSTIFY_CHILDREN_HORIZONTALLY;
}

@object GenToolGroupClass DGToolToolGroup = {
    /*
     * The GrObjToolControlClass is strange in that it
     * *only* has tools; it doesn't have any normal UI,
     * or we might be tempted to make it a submenu under
     * the Controls menu. Instead, we must use this
     * GenToolGroup object to hold the tools for the
     * GrObjToolControl object, turning the GenToolGroup
     * into a submenu the user can pin if s/he wishes.
     */
    GTGI_controller = @ToolControl;
    HINT_MINIMIZE_CHILD_SPACING;
    HINT_SAME_ORIENTATION_AS_PARENT;
}

@object GrObjToolControlClass ToolControl = {
    /*
     * Brevity being the soul of wit, we limit the drawing tools the user
     * can use to just four: the pointer (for moving/resizing things), line,
     * rectangle, and ellipse. This has the added benefit of reducing the
     * number of controllers we're morally obligated to use (e.g. we need
     * none of the myriad ways to control text, since we don't allow the user
     * to create a text object).
     */
    ATTR_GEN_CONTROL_REQUIRE_TOOLBOX_UI =
	GOTCF_PTR | GOTCF_LINE | GOTCF_RECT | GOTCF_ELLIPSE;
    ATTR_GEN_CONTROL_PROHIBIT_TOOLBOX_UI =
	~ (GOTCF_PTR | GOTCF_LINE | GOTCF_RECT | GOTCF_ELLIPSE);
}

@object GrObjAreaColorSelectorClass AreaAttrControl = {
    /*
     * Since the only area attribute we're allowing the user to set is the
     * color (though this thing provides four ways, currently, for changing
     * the appearance), we can turn this controller into a dialog box by
     * itself (GenControlClass is a subclass of GenInteractionClass). We must
     * remember to make it a GIT_PROPERTIES interaction, else there will be
     * no way for the user to make the changes s/he makes to the controller's
     * gadgets take effect.
     */
    GI_visMoniker = 'A', "Area Color";
    GII_visibility = GIV_DIALOG;
    GII_type = GIT_PROPERTIES;
}

@object GenInteractionClass LineAttrDialog = {
    /*
     * There are two controllers that make up our set of objects that manipulate
     * lines, and we'd like to have them together, so use an interaction
     * to group the two into a properties dialog.
     */
    GI_visMoniker = 'L', "Line Attributes";
    GI_comp = @LineColorControl,
              @LineAttrControl;
    GII_visibility = GIV_DIALOG;
    GII_type = GIT_PROPERTIES;
}

/*
 * The line controllers themselves. We've no desire for anything besides the
 * default, so don't specify anything.
 */
@object GrObjLineColorSelectorClass LineColorControl = {}
@object GrObjLineAttrControlClass LineAttrControl = {}


@end Interface;

/*
 *	Document Group
 *
 * The GenDocumentGroup should be put in a resource of its own run by
 * the application thread.
 */

@start DocumentUI;

@object GenDocumentGroupClass DGDocumentGroup = {
    /*
     * Name for untitled documents
     */
    GDGI_untitledName = "DupGrObj Untitled";
    /*
     * Class for document objects
     */
    GDGI_documentClass = (ClassStruct*)&DGDocumentClass;
    /*
     * GenDisplay to automatically duplicate.
     * GenDisplayGroup to attach duplicated displays
     * to and GenView to attach documents to.
     */
    GDGI_genDisplayGroup = @DGDisplayGroup;
    GDGI_genDisplay = @DGDisplay;
    GDGI_genView = @DGView;
    /*
     * Document protocol
     */
    GDGI_protocolMajor = DOCUMENT_PROTOCOL_MAJOR;
    GDGI_protocolMinor = DOCUMENT_PROTOCOL_MINOR;
    /*
     * Pointer to the GenDocumentControl
     */
    GDGI_documentControl = @DGDocumentControl;

    /*
     * Let it know that our documents hold object blocks
     * (the GrObj objects) and those objects work in a 32-bit
     * coordinate space, so the document object must do likewise.
     */
    GDGI_attrs = @default | GDGA_VM_FILE_CONTAINS_OBJECTS
                          | GDGA_LARGE_CONTENT;
}

/*
 * Each application that uses the GrObj needs at least (and usually only) one
 * GrObjHead object [Obj 19.5]. The GrObjHead is responsible for maintaining
 * the current tool, allowing the user's selected tool to remain constant as
 * one switches among the GrObjBody objects in the multiple documents the
 * application has open. The only caveat is that the GrObjHead must be run
 * by the same thread as the GrObjBody objects, which is why we instantiate it
 * in this DocumentUI resource, rather than the Interface resource.
 */
@object GrObjHeadClass DGHead = {
    /*
     * Make the rectangle tool the current one.
     */
    GH_currentTool = (ClassStruct *) &RectClass;
}

@end DocumentUI;

/*
 *		GenDisplayGroup object
 */

@start Interface;

@object GenDisplayGroupClass DGDisplayGroup = {
    /*
     * Make sure the duplicated GenDisplay objects get the focus and target,
     * by default, when the app starts up.
     */
    HINT_DEFAULT_FOCUS;
    HINT_DEFAULT_TARGET;
    /*
     * Specify an initial useful size for the area in which the duplicated
     * GenDisplay objects will be displayed.
     */
    HINT_INITIAL_SIZE = {
	SST_PCT_OF_FIELD_WIDTH | PCT_70,
	SST_PCT_OF_FIELD_HEIGHT | PCT_55,
	0
    };
}

@end Interface;


/*
 * 	    Duplicated GenDisplay resource
 */
@start DisplayUI;

@object GenDisplayClass DGDisplay = {
    /*
     * The display starts not usable since it is not in the generic tree.
     * It will be set usable after being added to the display control.
     */
    GI_states = @default & ~GS_USABLE;
    GI_comp = @DGView;
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;

    /*
     * Make sure we get the focus and target when we're opened.
     */
    HINT_DEFAULT_FOCUS;
    HINT_DEFAULT_TARGET;
}

@object GenViewClass DGView = {
    GVI_docBounds = {0, 0, DOCUMENT_WIDTH, DOCUMENT_HEIGHT};

    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;
    /*
     * Make sure we get the focus and target when we're opened, so the document
     * can grab it from us.
     */
    HINT_DEFAULT_FOCUS;
    HINT_DEFAULT_TARGET;
}

@end DisplayUI;

/*
 *	    Duplicated GrObjBody/GrObjAttributeManager Resource
 *
 * BodyGOAM is the resource to duplicate to get a GrObjBody,
 * GrObjAttributeManager. It is notDetachable because neither it nor its
 * duplicates are ever written to state; it is only a template whose duplicates
 * get placed into document files.
 */


@start BodyGOAM, notDetachable;

/*
 * Declare the template GrObjBody. A GrObjBody [Obj 19.4] is the object that
 * manages a related set of graphic objects. A GrObjBody's purpose in life is
 * to orchestrate the behaviour of its child objects. While a child object
 * can be created that is outside the bounds set for the GrObjBody (in
 * GBI_bounds), such a child will never draw unless part of it falls within
 * the bounds of the body.
 *
 * A document can have more than one GrObjBody, but for this example, we will
 * have but one.
 */
@object GrObjBodyClass DGBody = {
    /*
     * Set the bounds of the GrObjBody to the size of the document. The
     * GrObjBody doesn't *have* to be the same size as the document,
     * but we've nothing else to display on the document, so there's
     * no point in not having them be the same size.
     */
    GBI_bounds = {0, 0, DOCUMENT_WIDTH, DOCUMENT_HEIGHT};

    /*
     * Have GrObjBody automatically grab the target and focus
     * when it gets a MSG_VIS_OPEN.
     */
    GBI_flags = (GBF_DEFAULT_TARGET | GBF_DEFAULT_FOCUS);

    /*
     * Set the GrObjAttributeManager that holds the attributes for our
     * children.
     */
    GBI_goam = @DGOAM; 
}

/*
 * Declare the template attribute manager for the document [Obj 19.6]. The
 * attribute manager, as the name implies, keeps track of sets of attributes
 * for all the graphic objects within a document, condensing identical sets
 * of attributes into a single shared set of attributes, etc. It isn't tied to
 * any particular GrObjBody (it's a stand-alone object, not a child of a
 * GrObjBody), but keeps a list of the GrObjBody objects in the document(s), so
 * it can communicate style-sheet changes to all the affected bodies.
 */
@object GrObjAttributeManagerClass DGOAM = {
    GOAMI_bodyList = GOAMBodyList;
}

/*
 * Declare the chunk array [Conc 17.4.1] that holds the optrs of the GrObjBody
 * objects the attribute manager should track. NOTE: any GrObjBody in a template
 * resource that isn't this template resource may not be placed in this
 * array. Doing so will cause the resource containing that body to come into
 * memory, which is illegal (template resources are never allowed to come
 * into memory).
 */
@chunkArray optr GOAMBodyList = {@DGBody};

@end BodyGOAM;

/*
 ***********************************************************************
 *		Code for DGDocumentClass
 ***********************************************************************
 */


/***********************************************************************
 *		MSG_VIS_RECALC_SIZE for DGDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Return the size we wish our document to be.
 * PARAMETERS:	    SizeAsDWord(word width, word height)
 * SIDE EFFECTS:    none
 *
 * STRATEGY:	    Our document is always 8 1/2" x 11", so we
 *		    just return the constant to indicate that.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AS	3/ 4/92   	Initial version.
 *
 **********************************************************************/
@method DGDocumentClass, MSG_VIS_RECALC_SIZE {

    return( MAKE_SIZE_DWORD( DOCUMENT_WIDTH, DOCUMENT_HEIGHT ) );
} /* MSG_VIS_RECALC_SIZE */


/***********************************************************************
 *	MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE for DGDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Initialize a newly-created document file.
 * PARAMETERS:	    Boolean (void)
 * SIDE EFFECTS:    The map block is allocated, initialized and set for
 *		    the file.
 *
 * STRATEGY: 	    Three things to do here:
 *	    	    	1) duplicate the resource that contains the
 *			   GrObjBody and the GrObjAttributeManager
 *			   we'll be using for this document and attach
 *			   it to a VM block in the document.
 *	    	    	2) tell the attribute manager to initialize
 *			   itself.
 *	    	    	3) allocate a map block for the file and store
 *			   the VM block handle of the duplicated resource
 *			   in it so we can get back to the body when we
 *			   reopen the document later in life.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AS	3/ 4/92   	Initial version.
 *
 **********************************************************************/
@method DGDocumentClass, MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE {
    VMBlockHandle   mapBlock,	/* VMBlockHandle of newly-allocated map block */
		    dupBlock;	/* VMBlockHandle of block holding GrObjBody */
    DGMapBlock 	    *mapPtr;	/* Locked map block */
    MemHandle 	    mem,    	/* Handle of locked map block */
		    dupMem; 	/* Handle of duplicated GrObjBody resource */

    /* Call our superclass to get the default behaviour. */

    if (@callsuper()) {
	/* Error in superclass, so return error now */
	return(TRUE);
    }

    /*
     * Update our self-pointer, since the @callsuper might have moved
     * our chunk.
     */
    pself = ObjDerefGen(oself);

    /*
     * Duplicate block with GrObjBody and GrObjAttributeManager in it and have
     * its burden thread be our process thread.
     *
     * Then attach block to the vm file. The handle of the block must be
     * preserved so its objects can be incorporated into the visible tree
     * below the document object while the file remains open. Without this,
     * the block might get discarded by the system, the handle re-used, and
     * random death result.
     */

    dupMem = ObjDuplicateResource( OptrToHandle( @DGBody ), 0, 0);
EC( ECCheckMemHandle( dupMem ); )
EC( ECVMCheckVMFile( pself->GDI_fileHandle ); )
    dupBlock = VMAttach( pself->GDI_fileHandle, 0, dupMem );
EC( ECVMCheckVMBlockHandle( pself->GDI_fileHandle, dupBlock ); )
    VMPreserveBlocksHandle( pself->GDI_fileHandle, dupBlock );

    /*
     *  Have attribute manager create all the attribute and style arrays
     *  that it needs to use.
     */
    @send ConstructOptr(dupMem, OptrToChunk(@DGOAM))::
        MSG_GOAM_CREATE_ALL_ARRAYS();
    /*
     * Allocate a block, and make it the map block.
     */
    mapBlock = VMAlloc(pself->GDI_fileHandle, sizeof(DGMapBlock), 0);
EC( ECVMCheckVMBlockHandle( pself->GDI_fileHandle, mapBlock ); )
    VMSetMapBlock(pself->GDI_fileHandle, mapBlock);

    /*
     * Lock the newly created block so that we can use it.  Since we
     * are modifying the contents of the block it is essential that we
     * call VMDirty to let the VM code know that the block is modified.
     */

    mapPtr = VMLock(pself->GDI_fileHandle, mapBlock, &mem);
EC( ECCheckMemHandle( mem ); )
EC( ECCheckBounds( mapPtr ); )
    mapPtr->DGMB_bodyBlock = dupBlock;
    VMDirty(mem);
    VMUnlock(mem);
    return(FALSE);		/* Return no error */
} /* MSG_GEN_DOCUMENT_INITIALIZE_DOCUMENT_FILE */


/***********************************************************************
 *			DGDocumentGetBodyOD
 ***********************************************************************
 * SYNOPSIS:	    Return the optr to the GrObjBody object stored in the
 *		    passed document file.
 * CALLED BY:	    (INTERNAL) DGDocument::GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT
 *			       DGDocument::GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT
 * RETURN:	    Object Pointer of GrObjBody object.
 * SIDE EFFECTS:    None.
 *
 * STRATEGY:	    -  Get the map block of our file.
 *		    -  Fetch VMBlockHandle  stored in the map block.
 *		    -  Map that to a memory handle and construct an
 *		       optr from that memory handle and the chunk of the
 *		       body in our template resource.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AS	3/ 5/92   	Initial version.
 *
 **********************************************************************/
static optr
DGDocumentGetBodyOD( FileHandle docFileHandle )
  /* docFileHandle - File the document object is using. */
{
    VMBlockHandle   mapBlock,	/* VMBlockHandle of map block allocated when
				 * document was initialized */
		    bodyBlock;	/* VMBlockHandle, as extracted from the map
				 * block */
    DGMapBlock	    *mapPtr;	/* Pointer to the map block when it's been
				 * locked down */
    MemHandle 	    memBlock;	/* Memory handle of mapBlock/bodyBlock */
    
    /*
     * Get the map block of the VM file passed.  This is done
     * with the kernel routine VMGetMapBlock().  Then lock
     * the map block into memory with VMLock() so we can
     * get the handle from it.
     */
EC( ECVMCheckVMFile( docFileHandle ); )
    mapBlock = VMGetMapBlock( docFileHandle );
EC( ECVMCheckVMBlockHandle( docFileHandle, mapBlock ); )
    mapPtr = VMLock( docFileHandle, mapBlock, &memBlock);
EC( ECCheckMemHandle( memBlock ); )
EC( ECCheckBounds( mapPtr ); )

    /*
     * Get the handle from the map block, then unlock the
     * map block so the memory manager can swap it if necessary.
     */
    bodyBlock = mapPtr->DGMB_bodyBlock;
EC( ECVMCheckVMBlockHandle( docFileHandle, bodyBlock ); )
    VMUnlock( memBlock );

    /*
     * Translate the VM handle just retrieved into its memory equivalent.
     * This will be the global handle portion of the body's optr.
     */
    memBlock = VMVMBlockToMemBlock( docFileHandle, bodyBlock );
EC( ECCheckMemHandle( memBlock ); )

    /*
     * Return the entire optr of the GrObjBody object in this document.
     * The chunk handle is retrieved with the macro OptrToChunk using the optr
     * of the template GrObjBody object.  The chunk handle of that
     * object may be used because chunk handles are preserved
     * by ObjDuplicateResource().
     */
    return( ConstructOptr( memBlock, OptrToChunk( @DGBody ) ) );
} /* DGDocumentGetBodyOD */


/***********************************************************************
 *	MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT for DUIDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    The document has been opened, and any UI required
 *		    has been created, so initialize the UI itself.
 * PARAMETERS:	    void (void)
 * SIDE EFFECTS:    the duplicated GrObjBody is added as a child of the
 *		    document.
 *
 * STRATEGY:	    Add the GrObjBody as a visible child of the document
 *		    and tell it it's been so added, passing along the OD
 *		    of the GrObjHead for our application.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AS	3/ 4/92   	Initial version.
 *
 **********************************************************************/
@method DGDocumentClass, MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT {
    optr bodyOD;

    /* Call the superclass to implement default functionality. */

    @callsuper();

    /*
     * Update our self-pointer, since the @callsuper and ObjInitializePart
     * likely moved our chunk.
     */
    pself = ObjDerefGen(oself);

    /* Get the OD of the GrObjBody from the map block */

    bodyOD = DGDocumentGetBodyOD( pself->GDI_fileHandle );
EC( ECCheckLMemOD( bodyOD ); )

    /*
     * Add the graphic body as the first child of the Document/Content. Don't
     * mark dirty because we don't want the document dirtied as soon as it is
     * open, nor do we save the Document/Content or the parent pointer
     * in the GrObjBody.
     */
    @send self::MSG_VIS_ADD_NON_DISCARDABLE_VM_CHILD( bodyOD, CCO_FIRST );


    /*
     * Notify the GrObjBody that it has been added to the Document/Content. And
     * pass GrObjHead to it so it knows who to notify when it gets the target.
     */
    @send bodyOD::MSG_GB_ATTACH_UI( @DGHead );

} /* MSG_GEN_DOCUMENT_ATTACH_UI_TO_DOCUMENT */


/***********************************************************************
 *	MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT for DGDocumentClass
 ***********************************************************************
 * SYNOPSIS:	    Document is being closed, so remove the GrObjBody
 *		    from the visible tree before that happens.
 * PARAMETERS:	    void (void)
 * SIDE EFFECTS:    the body is visually closed and removed from the
 *		    tree below the document.
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AS	3/ 5/92   	Initial version.
 *
 **********************************************************************/
@method DGDocumentClass, MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT {
    optr bodyOD;

    /*
     * Get the OD of the GrObjBody from the map block.
     */
    bodyOD = DGDocumentGetBodyOD( pself->GDI_fileHandle );
EC( ECCheckLMemOD( bodyOD ); )

    /*
     * Notify the GrObjBody that it is about to be removed from
     * the Document/Content and closed.
     * Remove it from the visible tree.
     * Call the superclass to get default behaviour.
     */
    @send bodyOD::MSG_GB_DETACH_UI();
    @send bodyOD::MSG_VIS_REMOVE_NON_DISCARDABLE( VUM_NOW );
    @callsuper();
} /* MSG_GEN_DOCUMENT_DETACH_UI_FROM_DOCUMENT */

