/********************************************************************
 *
 *	Copyright (c) Geoworks 1991-96 -- All Rights Reserved.
 *
 * PROJECT:	GEOS Sample Applications
 * MODULE:	Moniker Variety Show
 * FILE:	moniker.goc
 *
 * AUTHOR:	Brian Chin, September 1991
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      brianc  9/91            Initial version
 *      NF      10/10/96        Added EC code
 *
 * DESCRIPTION:
 *	This application demonstrates the various types of monikers a
 *	generic object can have and some of the various ways one can
 *      change the moniker an object displays. As a side benefit, it
 *      also shows how to statically define a graphics string, and how
 *      to dynamically create a memory-based graphics string.
 *
 *	(Throughout this file you will see references like this:
 *      [Con 7.2.1] This is a reference to chapter 7, section 7.2.1
 *      of the Concepts manual. [Obj 7.2.1] is a reference to chapter 7,
 *      section 7.2.1 of the Objects manual. You should use these
 *      references to locate further information about the topic being
 *      discussed if anything is unclear.)
 *
 *	The moniker for a generic object (also known as a VisMoniker) is
 *	what the specific UI uses to clue the user into the function of
 *	the object. It might be a simple text string, or a string of
 *	drawing commands. Where inside the bounds of the object the
 *      specific UI places this information is completely specific
 *      UI-dependent, though most will pay attention to various hints
 *      defined for GenClass that tell it where you think it would look
 *      best.
 *
 *	Monikers are usually defined once in the .goc file and remain
 *	the same during the life of the application. Sometimes, however,
 *	you'll need to change the moniker for an object. This application
 *	shows you several ways of going about it.
 *
 *	For more information on monikers in general, refer to [Obj 2.3.1].
 *
 * RCS STAMP:
 *	$Id: moniker.goc,v 1.1 97/04/04 16:38:49 newdeal Exp $
 *
 *******************************************************************/

/********************************************************************
 *		Include files
 *******************************************************************/
    @include <stdapp.goh>
    #include <gstring.h>  /* Needed for gstring manipulations. */

/********************************************************************
 *		Constants
 *******************************************************************/
      /*
       * This is the dimensions of the gstring moniker
       * for CycleMonikerTrigger.
       */
    #define MONIKER_WIDTH  60
    #define MONIKER_HEIGHT 40

/********************************************************************
 *		Global Variables
 *******************************************************************/
      /*
       * This is used by CycleMonikerTrigger to indicate which
       * moniker it should have. The trigger cycles through
       * different monikers.
       */
    static word monikerNumber = 0;

/********************************************************************
 *		Class Definitions
 *******************************************************************/
    @class MonikerProcessClass, GenProcessClass;
      /* These messages are sent by the triggers. */
    @message void MSG_MONIKER_TOGGLE();
    @message void MSG_MONIKER_CYCLE();
    @endc;

/********************************************************************
 *		Class Declarations
 *******************************************************************/
    @classdecl MonikerProcessClass, neverSaved;

/********************************************************************
 *		UI Object Resources
 *******************************************************************/

/********************************************************************
 *		AppResource Resource
 *******************************************************************/
@start AppResource;

@object GenApplicationClass MonikerApp = {
    GI_visMoniker = list { @MonikerTextMoniker };
    GI_comp = @MonikerPrimary;
    gcnList( MANUFACTURER_ID_GEOWORKS, GAGCNLT_WINDOWS ) =
        @MonikerPrimary;
}

@visMoniker MonikerTextMoniker = "C Moniker Sample Application";

@end AppResource;

/********************************************************************
 *		Interface Resource
 *******************************************************************/
@start Interface;

@object GenPrimaryClass MonikerPrimary = {
      /*
       * This window has one child -- the object that
       * groups the two triggers (see below).
       */
    GI_comp = @MonikerTriggerGroup;
    HINT_SIZE_WINDOW_AS_DESIRED;
    HINT_CENTER_CHILDREN_HORIZONTALLY;
    HINT_CENTER_CHILDREN_VERTICALLY;
}

  /* Trigger grouping object */
@object GenInteractionClass MonikerTriggerGroup = {
      /*
       * This GenInteraction just groups the GenTriggers that
       * we use to demonstrate GenClass moniker operations.
       */
    GI_comp = @ToggleMonikerTrigger,
              @CycleMonikerTrigger;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_CENTER_CHILDREN_VERTICALLY;
}

  /* These are graphics-string monikers.  They are used with
   * MSG_GEN_USE_VIS_MONIKER to the set moniker for ToggleMonikerTrigger.
   *
   * The graphics strings are drawn with (0,0) being the upper left
   * of where the specific UI thinks the moniker should be placed.
   * We apply a scale to each gstring to demonstrate the sorts of
   * things one can do in a moniker.
   *
   * The images themselves are of a standard rocker switch. They
   * probably lose something on a monochrome screen, and if we chose
   * we could design two other monikers that drew things just in
   * black and white, then use a moniker list and let the UI choose
   * between the two, but that would make writing the method
   * MSG_MONIKER_TOGGLE much more difficult.
   */
@visMoniker ToggleMonikerOn = {
    color = color4; 	  /* Moniker is intended for a 4-bit/pixel
                           * color device. This could be any of gray1,
                           * gray2, gray4, gray8, color2, color4, or
                           * colorRGB */
    size = standard;	  /* Moniker is for display when a standard-sized
			   * representation is required. This could be
                           * any of tiny, standard, large, or huge */
    aspectRatio = normal; /* Moniker is intended for a device with a 1:1
			   * aspect ratio. Other possibilities would be
			   * squished and verySquished. */

    gstring {
          /*
           * Since we're changing the transformation matrix, and
           * the graphics state being used to draw us may be used
           * for other objects, we must preserve the current
           * transformation and restore it when we're done.
           */
	GSSaveTransform(),
          /*
           * Scale all following coordinates by 5 in each direction.
           */
	GSApplyScale( 5, 5 ),
          /*
           * Start with the flat part of the switch. This is equivalent
           * to C_RED in the default 16-color palette.
           */
	GSSetAreaColor( 170, 0, 0 ),
	GSFillRect( 5, 1, 10, 6 ),
          /*
           * Draw the face on the left that's directly in the light.
           * This is equivalent to C_LIGHT_RED in the default
           * 16-color palette.
           */
	GSSetAreaColor( 255, 85, 85 ),
	GSFillPolygon( 4, ODD_EVEN ),
	    GOC_POINT( 0, 1 ),
            GOC_POINT( 1, 0 ),
            GOC_POINT( 1, 5 ),
            GOC_POINT( 0, 6 ),
          /*
           * Pick a red about midway between the two for the right
           * and bottom faces of the raised part of the switch.
           */
	GSSetAreaColor( 212, 0, 0 ),
	GSFillPolygon( 5, ODD_EVEN ),
	    GOC_POINT( 1, 0 ),
            GOC_POINT( 5, 1 ),
            GOC_POINT( 5, 6 ),
            GOC_POINT( 0, 6 ),
	    GOC_POINT( 1, 5 ),
          /*
           * Now draw the borders of the switch. The upper-left is
           * where the light source is, Draw things from dark to
           * light, as we expect the light to diffract around the
           * edges some. We just use the standard palette colors here.
           */
	GSSetLineColorIndex( C_BLACK ),
	GSDrawPolyline( 3 ),
	    GOC_POINT( 0, 6 ),
            GOC_POINT( 10, 6 ),
            GOC_POINT( 10, 1 ),
	GSDrawLine( 1, 5, 5, 6 ),
	GSSetLineColorIndex( C_DARK_GREY ),
	GSDrawPolyline( 3 ),
	    GOC_POINT( 0, 1 ),
            GOC_POINT( 0, 6 ),
            GOC_POINT( 1, 5 ),
	GSDrawVLine( 5, 1, 6 ),
	GSSetLineColorIndex( C_WHITE ),
	GSDrawPolyline( 4 ),
	    GOC_POINT( 0, 1 ),
            GOC_POINT( 1, 0 ),
            GOC_POINT( 5, 1 ),
            GOC_POINT( 10, 1 ),
	GSDrawVLine( 1, 0, 5 ),
          /*
           * As noted above, we need to restore the transformation
           * matrix once we're done, since we messed with it.
           */
	GSRestoreTransform(),
	GSEndString()
    }
};

@visMoniker ToggleMonikerOff = {
    gstring {
	GSSaveTransform(),
	GSApplyScale( 5, 5 ),
          /*
           * Flat part
           */
	GSSetAreaColor( 170, 0, 0 ),
	GSFillRect( 0, 1, 5, 6 ),
          /*
           * Lit (left-most raised) face
           */
        GSSetAreaColor( 255, 85, 85 ),
        GSFillPolygon( 4, ODD_EVEN ),
            GOC_POINT( 5, 1 ),
            GOC_POINT( 9, 0 ),
            GOC_POINT( 9, 5 ),
            GOC_POINT( 5, 6 ),
          /*
           * Bottom and right raised faces
           */
        GSSetAreaColor( 212, 0, 0 ),
        GSFillPolygon( 5, ODD_EVEN ),
            GOC_POINT( 9, 0 ),
            GOC_POINT( 10, 1 ),
            GOC_POINT( 10, 6 ),
            GOC_POINT( 5, 6 ),
            GOC_POINT( 9, 5 ),
          /*
           * Border
           */
        GSSetLineColorIndex( C_BLACK ),
        GSDrawPolyline( 5 ),
            GOC_POINT( 0, 6 ),
            GOC_POINT( 5, 6 ),
            GOC_POINT( 9, 5 ),
            GOC_POINT( 10, 6 ),
            GOC_POINT( 5, 6 ),
        GSSetLineColorIndex( C_DARK_GREY ),
        GSDrawVLine( 5, 1, 6 ),
        GSDrawPolyline( 3 ),
            GOC_POINT( 9, 5 ),
            GOC_POINT( 9, 0 ),
            GOC_POINT( 10, 1 ),
        GSSetLineColorIndex( C_WHITE ),
        GSDrawPolyline( 4 ),
            GOC_POINT( 0, 6 ),
            GOC_POINT( 0, 1 ),
            GOC_POINT( 5, 1 ),
            GOC_POINT( 9, 0 ),
        GSRestoreTransform(),
        GSEndString()
    }
}

@object GenTriggerClass ToggleMonikerTrigger = {
      /*
       * This trigger will start with the "Off" moniker and will be
       * alternately set to the "On" moniker and the "Off" moniker
       * each successive time it is activated.
       */
    GI_visMoniker = ToggleMonikerOff;
    GTI_destination = process;
    GTI_actionMsg = MSG_MONIKER_TOGGLE;
}

@object GenTriggerClass CycleMonikerTrigger = {
      /*
       * This trigger will start with a text moniker and will cycle
       * through various monikers when it is activated.  (This initial
       * moniker will be destroyed the first time another moniker is set.)
       */
    GI_visMoniker = "Cycle";
    GTI_destination = process;
    GTI_actionMsg = MSG_MONIKER_CYCLE;
}

@end Interface

/********************************************************************
 *		Local Function Definitions
 *******************************************************************/


/********************************************************************
 *		SetTextMoniker
 ********************************************************************
 * SYNOPSIS:	 Set the moniker of the CycleMonikerTrigger to be
 *	    	 a text string. This demonstrates how to set the
 *		 moniker dynamically using the simple Gen message
 *		 MSG_GEN_REPLACE_VIS_MONIKER_TEXT. Note that you
 *		 cannot specify a mnemonic character with this message.
 *		 To do that, you must build the VisMoniker yourself
 *		 and use MSG_GEN_REPLACE_VIS_MONIKER instead.
 * CALLED BY:	 (INTERNAL) MonikerProcess::MONIKER_CYCLE
 * RETURNS:	 void
 * SIDE EFFECTS: The previous moniker for CycleMonikerTrigger is
 *		 destroyed.
 * STRATEGY:	 Use MSG_GEN_REPLACE_VIS_MONIKER_TEXT to build a
 *		 moniker from a text string and set the new
 *		 moniker as the one for CycleMonikerTrigger,
 *		 destroying the old moniker.
 *	    	 You will almost always want to use a VisUpdateMode
 *		 of VUM_NOW, unless you're changing the monikers
 *		 of a number of objects within the same
 *		 GenInteraction, in which case you could use
 *		 VUM_DELAYED_VIA_APP_QUEUE to allow the work of
 *		 growing or shrinking the interaction (depending
 *		 on the relative sizes of the new vs. the old
 *		 monikers) to happen just once.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	brianc	9/91		Initial Revision
 *******************************************************************/
static void _near
SetTextMoniker( void )
{
      /*
       * This could also be done with MSG_GEN_REPLACE_VIS_MONIKER:
       * @call CycleMonikerTrigger::MSG_GEN_REPLACE_VIS_MONIKER(
       *     VUM_NOW, 0, 0, 0, VMDT_STRING, VMST_FPTR,
       *     (dword)"Shapes");
       */
    @call CycleMonikerTrigger::MSG_GEN_REPLACE_VIS_MONIKER_TEXT(
        "Shapes", VUM_NOW );
} /* SetTextMoniker */


/********************************************************************
 *		SetPreDefinedGStringMoniker
 ********************************************************************
 * SYNOPSIS:	 Set the moniker of the CycleMonikerTrigger to be
 *	    	 a predefined graphics string. It uses the general-
 *		 purpose MSG_GEN_REPLACE_VIS_MONIKER to get its work
 *		 done.
 * CALLED BY:	 (INTERNAL) MonikerProcess::MONIKER_CYCLE
 * RETURNS:	 void
 * SIDE EFFECTS: The previous moniker for CycleMonikerTrigger is
 *		 destroyed.
 * STRATEGY:	 Use MSG_GEN_REPLACE_VIS_MONIKER to build a moniker
 *		 from a predefined graphics string (defined using
 *		 macros from gstring.h), set the new moniker as
 *		 THE moniker for the receiving object, and
 *		 destroy the old moniker.
 *	    	 As for MSG_GEN_REPLACE_VIS_MONIKER_TEXT, you will
 *		 almost always want to use a VisUpdateMode of
 *		 VUM_NOW when doing this. See SetTextMoniker for
 *		 more information.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	brianc	9/91		Initial Revision
 *	RainerB	05/2022		CreateLMemGString updated
 *
 *******************************************************************/
static void _near
SetPreDefinedGStringMoniker( void )
{
      /*
       * A predefined graphics string that draws a MONIKER_WIDTH
       * by MONIKER_HEIGHT light-blue rectangle at 0, 0.
       */
    static const byte gstring[] = {
	GSSetAreaColorIndex( C_LIGHT_BLUE ),
	GSFillRect( 0, 0, MONIKER_WIDTH, MONIKER_HEIGHT ),
	GSEndString()
    };

      /*
       * Pass VUM_NOW so appearance is immediate.
       * Pass the height and width so system doesn't have
       * to calculate it from the gstring, which saves time.
       * Pass the size of the gstring, as this also saves time.
       * Flag the moniker as a gstring, and that we're passing
       * a pointer to it. The last parameter is the pointer
       * to the gstring.
       */
    @call CycleMonikerTrigger::MSG_GEN_REPLACE_VIS_MONIKER( VUM_NOW,
        MONIKER_HEIGHT, MONIKER_WIDTH, sizeof( gstring ),
        VMDT_GSTRING, VMST_FPTR, (dword)gstring );
} /* SetPreDefinedGStringMoniker */


/***********************************************************************
 *		CreateLMemGString
 ***********************************************************************
 * SYNOPSIS:	 Create an LMem-block-based graphics string ready
 *	    	 for filling by the caller.
 * CALLED BY:	 (INTERNAL) SetDynamicEllipseMoniker
 *		 SetDynamicPolygonMoniker
 * RETURNS:	 gstate through which to draw, plus optr of the
 *	    	 storage for the graphics string.
 * SIDE EFFECTS: none
 * STRATEGY:     Allocate an LMem heap and create a new gstring inside
 *               the block. Return the handle:chunk pair of the new
 *               gstring as an optr.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	9/15/92		Initial Revision
 *	RainerB	05/2022		Type mismatch error fixed (for Watcom)
 *
 ***********************************************************************/
static GStateHandle _near
CreateLMemGString( optr * storagePtr )
  /*
   * storagePtr - Place to return the optr of the
   *              memory-based graphics string.
   */
{
      /*
       * newBlock - Handle of LMem block allocated for the purpose.
       * newChunk - Chunk handle of storage for graphics string,
       *            allocated by GrCreateString
       * gstate   - Graphics state through which to draw to store
       *            commands in the gstring
       */
    MemHandle	 newBlock;
    word		 newChunk;	/* ChunkHandle */
    GStateHandle gstate;

      /*
       * Allocate a new LMem heap block to create a new VisMoniker
       * chunk that we can pass to MSG_GEN_REPLACE_VIS_MONIKER.
       * We'll be creating a memory-based graphics string, which
       * requires an LMem block with which to work.
       *
       * Note that we MAY NOT have the application thread create the
       * new lmem chunk in an object block run by the ui thread.
       * This leads to synchronization problems caused by the
       * movement of LMem chunks when one thread (the application)
       * allocates or resizes a chunk while another thread (the ui)
       * has dereferenced pointers to chunks in the that same
       * block (there are also problems with the block itself moving
       * on the heap, but chunk motion is reason enough not to do it).
       */
    newBlock = MemAllocLMem( LMEM_TYPE_GENERAL,
                             sizeof( LMemBlockHeader ) );

      /*
       * Create a GState that draws into an LMem chunk in the block.
       */
    gstate = GrCreateGString( newBlock, GST_CHUNK, &newChunk );

      /*
       * Return the optr of the storage area in the space provided.
       */
EC( ECCheckBounds( storagePtr ); )
EC( ECCheckLMemODHandles( newBlock, newChunk ); )
    *storagePtr = ConstructOptr( newBlock, newChunk );

      /*
       * Return the GState the caller should use for drawing.
       */
    return( gstate );
} /* CreateLMemGString */


/********************************************************************
 * 		SetLMemGStringMoniker
 ********************************************************************
 * SYNOPSIS:	 Set a dynamically-created graphics string as the
 *		 moniker for CycleMonikerTrigger.
 * CALLED BY:	 (INTERNAL) SetDynamicEllipseMoniker
 *		 SetDynamicPolygonMoniker
 * RETURNS:	 void
 * SIDE EFFECTS: The block holding the gstring is freed.
 *		 The old moniker for CycleMonikerTrigger is destroyed.
 * STRATEGY:     Mark the end of the gstring and destroy it?
 *               Make the given gstring the new moniker for the
 *               trigger, then free the gstring.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	9/15/92		Initial Revision
 *******************************************************************/
static void _near
SetLMemGStringMoniker( GStateHandle gstate,
		       optr  	    gstring )
  /*
   * gstate  -
   * gstring -
   */
{

      /*
       * End the gstring and free the gstate, preserving
       * the LMem chunk.
       */
    GrEndGString( gstate );
    GrDestroyGString( gstate, 0, GSKT_LEAVE_DATA );

      /*
       * Set the new moniker for CycleMonikerTrigger. This frees
       * any existing moniker for CycleMonikerTrigger, copies the
       * passed VisMoniker chunk into its object block and makes
       * the copy the moniker for the trigger.
       */
EC( ECCheckLMemOD( gstring ); )
     @call CycleMonikerTrigger::MSG_GEN_REPLACE_VIS_MONIKER( VUM_NOW,
         0, 0, sizeof( gstring ), VMDT_GSTRING, VMST_OPTR,
         (dword)gstring );

      /*
       * Free the block we allocated to create the VisMoniker
       * LMem chunk.
       */
    MemFree( OptrToHandle( gstring ) );
} /* SetLMemGStringMoniker */


/********************************************************************
 *		SetDynamicEllipseMoniker
 ********************************************************************
 * SYNOPSIS:	 Use the above utility routines to set the moniker
 *		 for CycleMonikerTrigger to be an ellipse, as
 *		 defined by a dynamically created graphics string.
 * CALLED BY:	 (INTERNAL) MonikerProcess::MONIKER_CYCLE
 * RETURNS:	 void
 * SIDE EFFECTS: The old moniker for CycleMonikerTrigger is destroyed.
 * STRATEGY:	 Create a memory-based graphics string into which we
 *		 can place the drawing commands for the moniker.
 *	    	 Issue those drawing commands.
 *	    	 Set the graphics string as the moniker for the object.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	9/15/92		Initial Revision
 *******************************************************************/
static void _near
SetDynamicEllipseMoniker( void )
{
      /*
       * gstate  - Graphics state through which to draw.
       * gstring - Graphics string we're building.
       */
    GStateHandle gstate;
    optr    	 gstring;

      /*
       * Use common code to set up a memory-based graphics
       * string for us to draw into.
       */
    gstate = CreateLMemGString( &gstring );

      /*
       * Make the ellipse be light red (no particular reason).
       */
    GrSetAreaColor( gstate, CF_INDEX, C_LIGHT_RED, 0, 0 );

      /*
       * Draw an ellipse (bounded by a MONIKER_WIDTH by MONIKER_HEIGHT
       * rectangle) into the lmem chunk via the gstate.
       */
    GrFillEllipse( gstate, 0, 0, MONIKER_WIDTH, MONIKER_HEIGHT );

      /*
       * Use the common routine to set this graphics string as
       * the moniker.
       */
    SetLMemGStringMoniker( gstate, gstring );
} /* SetDynamicEllipseMoniker */


/********************************************************************
 * 		SetDynamicPolygonMoniker
 ********************************************************************
 * SYNOPSIS:	 Use the above utility routines to set the moniker
 *		 for CycleMonikerTrigger to be a polygon, as
 *		 defined by a dynamically created graphics string.
 * CALLED BY:	 (INTERNAL) MonikerProcess::MONIKER_CYCLE
 * RETURNS:	 void
 * SIDE EFFECTS: The old moniker for CycleMonikerTrigger is destroyed.
 * STRATEGY:	 Create a memory-based graphics string into which we
 *		 can place the drawing commands for the moniker.
 *	    	 Issue those drawing commands.
 *	    	 Set the graphics string as the moniker for the object.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	9/15/92		Initial Revision
 *******************************************************************/
static void _near
SetDynamicPolygonMoniker( void )
{
      /*
       * gstate  - Graphics state through which to draw.
       * gstring - Graphics string we're building.
       * points  - Points to use for polygon.
       */
    GStateHandle gstate;
    optr    	 gstring;
    const Point	 points[] = {
    	{ MONIKER_WIDTH / 2, 0 },
    	{ MONIKER_WIDTH, MONIKER_HEIGHT },
    	{ 0, MONIKER_HEIGHT }
    };

      /*
       * Use common code to set up a memory-based graphics
       * string for us to draw into.
       */
    gstate = CreateLMemGString( &gstring );

      /*
       * Make the polygon be yellow (no particular reason).
       */
    GrSetAreaColor( gstate, CF_INDEX, C_YELLOW, 0, 0 );

      /*
       * Draw a triangle (bounded by a MONIKER_WIDTH by MONIKER_HEIGHT
       * rectangle) into the lmem chunk via the gstate.
       */
    GrFillPolygon( gstate, ODD_EVEN, points,
                   sizeof( points ) / sizeof( points[0] ) );

      /*
       * Use the common routine to set this graphics string as
       * the moniker.
       */
    SetLMemGStringMoniker( gstate, gstring );
} /* SetDynamicPolygonMoniker */

/********************************************************************
 *		Code for MonikerProcessClass
 *******************************************************************/

/********************************************************************
 *		MSG_MONIKER_TOGGLE
 ********************************************************************
 * SYNOPSIS:	 Change the ToggleMonikerTrigger's moniker to the
 *	    	 opposite moniker from that being displayed. This
 *		 message is sent by the ToggleMonikerTrigger when
 *		 it is activated.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: The moniker is changed, but the old one is *not*
 *		 destroyed.
 * STRATEGY:	 Fetch the chunk of the current moniker from the
 *		 object. If it's ToggleMonikerOff, change to
 *               ToggleMonikerOn, and vice versa. We use
 *               MSG_GEN_USE_VIS_MONIKER here, rather than
 *               MSG_GEN_REPLACE_VIS_MONIKER, as we want to keep
 *               the previous moniker around, so we can use it next time.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	brianc	9/91		Initial Revision
 *******************************************************************/
@method MonikerProcessClass, MSG_MONIKER_TOGGLE
{
      /*
       * currentMoniker -
       * newMoniker     -
       */
    ChunkHandle currentMoniker;
    ChunkHandle newMoniker;

      /*
       * Get the current moniker so that we can figure out
       * which should be the new moniker.
       */
    currentMoniker = @call ToggleMonikerTrigger::MSG_GEN_GET_VIS_MONIKER();

      /*
       * If the current moniker is "Off", the new moniker is "On".
       * If the current moniker is "On", the new moniker is "Off".
       * (Since the moniker can only be one or the other, we'll
       * only check for the first case.)
       */
    if ( currentMoniker == OptrToChunk( @ToggleMonikerOff ) ) {
	newMoniker = OptrToChunk( @ToggleMonikerOn );
    }
    else {
	newMoniker = OptrToChunk( @ToggleMonikerOff );
    }

      /*
       * Set the new moniker.  MSG_GEN_USE_VIS_MONIKER allows us to
       * set the moniker of a generic object to be a visual moniker
       * chunk that is already in the same block as the object.
       * The moniker it replaces is left in the block; it is not freed.
       *
       * Since we want to update the appearance right away, we use
       * VUM_NOW as the update mode.
       */
    @call ToggleMonikerTrigger::MSG_GEN_USE_VIS_MONIKER( newMoniker,
        VUM_NOW );
} /* MSG_MONIKER_TOGGLE */


/********************************************************************
 *		MSG_MONIKER_CYCLE
 ********************************************************************
 * SYNOPSIS:	 Change CycleMonikerTrigger's moniker to the next
 *		 one in the series of monikers available to it.
 *		 This message is sent by CycleMonikerTrigger when
 *		 the user activates it.
 * PARAMETERS:	 void
 * RETURNS:      void
 * SIDE EFFECTS: The old moniker is destroyed and a new one created
 *		 monikerNumber is advanced.
 * STRATEGY:	 Increment monikerNumber, wrapping it at however many
 *		 routines we've defined to set a new moniker for
 *		 the object. Call the monikerNumberth routine.
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	brianc	9/91		Initial Revision
 *******************************************************************/
@method MonikerProcessClass, MSG_MONIKER_CYCLE
{
      /*
       * Define the array of routines to call, each of which sets
       * the next moniker in the cycle. We force the things to be
       * near routines so we don't have to worry about using
       * ProcCallFixedOrMovable. Without the _near, we'd have to
       * say ProcCallFixedOrMovable_pascal(monikerRoutines[monikerNumber])
       * instead of what we use (at the end of this function).
       */
    static void _near (* const monikerRoutines[])( void ) = {
	SetTextMoniker,
	SetPreDefinedGStringMoniker,
	SetDynamicEllipseMoniker,
	SetDynamicPolygonMoniker
    };

      /*
       * Bump the moniker number, handle wrap-around.
       */
    monikerNumber++;
    if ( ( sizeof( monikerRoutines ) / sizeof( monikerRoutines[0] ) )
         == monikerNumber ) {
	monikerNumber = 0;
    }

      /*
       * Set the new moniker for CycleMonikerTrigger, depending
       * on the current moniker number.
       */
    (*monikerRoutines[monikerNumber])();
} /* MSG_MONIKER_CYCLE */

