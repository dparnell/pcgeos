/***********************************************************************
 *
 *	Copyright (c) Geoworks 1991-92 -- All Rights Reserved
 *
 * PROJECT:	Sample Applications
 * MODULE:	File Selector Filter
 * FILE:	FSFilter.goc
 *
 * AUTHOR:	brianc: Sept 26, 1991
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      brianc  9/26/91         Initial version
 *		RainerB	4/27/2022		MSG_GEN_FILE_SELECTOR_GET_FILTER_ROUTINE updated
 *
 * DESCRIPTION:
 *	This file contains source code for the FSFilter application. This
 *	application demonstrates the use of a file selector UI object
 * 	(of class GenFileSelectorClass) in filtering its display of
 * 	files and directories. 
 *
 *	(Throughout this file you will see references like this: [Con 7.2.1]
 *	This is a reference to chapter 7, section 7.2.1 of the Concepts
 *	manual. [Obj 7.2.1] is a reference to chapter 7, section 7.2.1 of the
 *	Objects manual. You should use these references to locate further
 *	information about the topic being discussed if anything is unclear.)
 *
 *	A file selector is usually needed when you wish the user to
 *	select a file or directory for an application action. The
 * 	GenFileSelector provides the UI to allow the user to traverse 
 * 	directories and volumes, viewing the files within each
 *	directory or volume as they are selected. Selecting a file
 * 	(instead of a directory) usually completes the file selection
 * 	operation (causes the action to take place on the selected
 *	file). [Obj 14.2.2]
 *
 *	The file selector may be customized to limit the display of
 * 	these files and directories. (For example, you may wish only
 * 	to show current GEOS executable files within a file selector
 *	that may launch an application.) This is done through a
 * 	filtering mechanism. GenFileSelectorClass provides a number of
 *	attributes to set the constraints for these filters.
 *	[Obj 14.3] In most cases, these will satisfy your needs. If
 * 	you need custom filtering not provided in the attributes,
 *	however, you may write your own filtering routine. [Obj 14.3.8]
 *
 *	The filtering routine will act as the final filter for
 *	accepting or rejecting a file or directory for display. If a
 *	file passes all other filters you set in the FileSelector's
 *	instance data, it will call your filtering routine. This
 *	application demonstrates use of such a filtering routine. If
 *	possible, you should avoid this method because of the
 *	increased overhead for any file scanning operation.
 *
 * RCS STAMP:
 *	$Id: fsfilter.goc,v 1.1 97/04/04 16:37:26 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *              Constants and structures
 ***************************************************************************
*/

/*
 * Custom defined filter types are listed below. The filtering routine
 * will filter out different files in the file selector, depending on
 * these values. 
 */
typedef ByteEnum FilterTypes;
#define FT_ALL 0
#define FT_FILES 1
#define FT_DIRS 2
#define FT_BATCH 3
#define FT_DOS_EXECS 4
#define FT_GEOS_EXECS 5

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	FSFilterProcessClass, GenProcessClass;

@endc   /* end of class definition */

@classdecl	FSFilterProcessClass, neverSaved;

/*
 * This is our subclass of the GenFileSelectorClass. You must declare
 * a subclass of GenFileSelectorClass if you wish to write your own
 * custom filtering routine. This subclass uses the previously defined
 * custom filtering types and also defines a message to choose the
 * filtering type from a list of options within a GenItemGroup.
 * Initially, the file selector is set to accept all files (FT_ALL).
 */

@class	FilterFileSelectorClass, GenFileSelectorClass;

@message (GEN_ITEM_GROUP_APPLY_MSG) MSG_FFS_CHOOSE_FILTER_TYPE;

    @instance FilterTypes FFSI_filterType = FT_ALL;

@endc

@classdecl	FilterFileSelectorClass;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource ;

@object GenApplicationClass FSFilterApp = {

    GI_visMoniker = list { @FSFilterTextMoniker }
    GI_comp = @FSFilterPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @FSFilterPrimary;
}

@visMoniker FSFilterTextMoniker = "C FSFilter Sample Application";

@end	AppResource


@start	Interface;

@object GenPrimaryClass FSFilterPrimary  = {

    GI_comp = @SampleFileSelector,	/* The custom file selector */
		@FilterList;		/* The list of available
					   custom filters (GenItemGroup) */

    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

/*
 *		FilterFileSelector object
 *
 * 
 */

@object FilterFileSelectorClass SampleFileSelector = {

    /*
     * The GFSI_fileCriteria instance field normally indicates the
     * FileSelectorFilterCriteria to use. These crieteria are provided
     * with GenFileSelectorClass for your use. If, however, you wish
     * to set up your own custom filtering routine, you must set a
     * file criteria of FSFC_FILE_FILTER. (You must then provide a
     * handler for MSG_GEN_FILE_SELECTOR_GET_FILTER_ROUTINE.)
     * 
     * The filtering routine is written in C (and follows the Pascal
     * calling convention), so the GSFI_fileCriteria is also set to
     * FSFC_FILTER_IS_C .
     */
    GFSI_fileCriteria = @default | FSFC_FILE_FILTER | FSFC_FILTER_IS_C;

    /*
     * Start by showing all files.
     */
    FFSI_filterType = FT_ALL;

}

/*
 * This list allows the user to select possible filter types. Each
 * GenItem corresponds to one of the previously defined FilterType
 * enumerated types. The GenItemGroup sends the
 * FilterFileSelectorClass message MSG_FFS_CHOOSE_FILTER_TYPE to our 
 * file selector.
 */

@object GenItemGroupClass FilterList = {
    GI_comp = 	@FilterAll, 
		@FilterFiles, 
		@FilterDirs, 
		@FilterBatch,
		@FilterDosExecs, 
		@FilterGeosExecs;
    GIGI_destination = SampleFileSelector;
    GIGI_applyMsg = MSG_FFS_CHOOSE_FILTER_TYPE;
    GIGI_selection = FT_ALL;
    HINT_ORIENT_CHILDREN_HORIZONTALLY;
    HINT_ALLOW_CHILDREN_TO_WRAP;
}

@object GenItemClass FilterAll = {
    GI_visMoniker = "All";
    GII_identifier = FT_ALL;
}

@object GenItemClass FilterFiles = {
    GI_visMoniker = "Files";
    GII_identifier = FT_FILES;
}

@object GenItemClass FilterDirs = {
    GI_visMoniker = "Dirs";
    GII_identifier = FT_DIRS;
}

@object GenItemClass FilterBatch = {
    GI_visMoniker = "*.BAT";
    GII_identifier = FT_BATCH;
}

@object GenItemClass FilterDosExecs = {
    GI_visMoniker = "DOS progs";
    GII_identifier = FT_DOS_EXECS;
}

@object GenItemClass FilterGeosExecs = {
    GI_visMoniker = "GEOS progs";
    GII_identifier = FT_GEOS_EXECS;
}

@end Interface

/*
 ***************************************************************************
 *		Code for FSFilterProcessClass
 ***************************************************************************
 */

/*
 ***************************************************************************
 *		Code for FilterFileSelectorClass
 ***************************************************************************
 */
/***********************************************************************
 *		MSG_FFS_CHOOSE_FILTER_TYPE for FilterFileSelectorClass
 ***********************************************************************
 * SYNOPSIS:	    Set the type of filter we should apply to files
 *		    when our superclass asks us. The message is sent
 *		    by FilterList when a new member of the item group is
 *		    selected.
 *
 * PARAMETERS:	    void (word selection,
 *			  word numSelections,
 *			  byte stateFlags)
 *
 * SIDE EFFECTS:    The file selector is forced to rescan.
 *
 * STRATEGY:	    Set FFSI_filterType to the passed type (selection)
 *		    and call MSG_GEN_FILE_SELECT_RESCAN on ourselves
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	brianc	9/26/91		Initial Revision
 *
 ***********************************************************************/
@method FilterFileSelectorClass, MSG_FFS_CHOOSE_FILTER_TYPE
{
    /*
     * Set the FilterType in our instance data to the passed selection
     * in the Item Group. 
     */
    pself->FFSI_filterType = selection;

    /*
     * Now tell our superclass to rescan, since we've changed what we
     * want to display. This rescanning will call
     * MSG_GEN_FILE_SELECTOR_GET_FILTER_ROUTINE for each file (or dir)
     * that passes all other normal filters. [Obj 14.4.3]
     */
    @call SampleFileSelector::MSG_GEN_FILE_SELECTOR_RESCAN();
}


/***********************************************************************
 *			FilterFileSelectorFilterRoutine
 ***********************************************************************
 * SYNOPSIS:	    Filter a single file for the file selector.
 *
 *	    	    This routine is called once per file or directory
 *	    	    found that matches the criteria established in the
 *	    	    file selector itself.
 *
 * CALLED BY:	    GenFileSelector during re-scan
 *
 * RETURN:	    TRUE to filter the file (i.e. reject it)
 *	    	    FALSE to accept the file.
 * 
 * SIDE EFFECTS:    none
 *
 * STRATEGY:   	    We are limited in the sorts of things we can do
 *	    	    here to those things to which a FileEnum callback
 *	    	    routine is limited: looking at the attributes
 *	    	    possessed by the file (stored in the FileEnumCallbackData
 *	    	    block) and seeing if they meet our more-stringent
 *	    	    taste. [Con 18.5.5]
 *
 *		    The _pascal in front of the routine name is important
 *		    because FileEnum is expecting a pascal routine
 *		    so if the _pascal is omitted the arguments are
 *		    in the wrong order and very strange bugs will
 *		    result.
 *
 *	    	    To accomplish this, our primary tool is the
 *	    	    utility routine FileEnumLocateAttr.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	3/23/92		Initial Revision
 *
 ***********************************************************************/
static Boolean _pascal
FilterFileSelectorFilterRoutine( optr                   oself,
				 FileEnumCallbackData * fecd,
				 word                   frame )
{
    int i;
    FilterFileSelectorInstance * pself;

    pself = ObjDerefGen(oself);
    switch ( pself->FFSI_filterType ) {

	/*
	 * always return FALSE to accept all files
	 */
	case FT_ALL :
	    return(FALSE);	/* accept all files*/

	/*
	 * return FALSE to accept if file is not a subdirectory
	 */
        case FT_FILES :
	{
	    /*
	     * check DOS file attributes
	     */
	    FileAttrs	*attrsPtr;

	    attrsPtr = FileEnumLocateAttr(fecd, FEA_FILE_ATTR, NULL);

	    return (*attrsPtr & FA_SUBDIR);
	}
	    
	/*
	 * return FALSE to accept if file is a subdirectory
	 */
        case FT_DIRS :
	{
	    /*
	     * check DOS file attributes
	     */
	    FileAttrs	*attrsPtr;

	    attrsPtr = FileEnumLocateAttr(fecd, FEA_FILE_ATTR, NULL);

	    return (!(*attrsPtr & FA_SUBDIR));
	}

	/*
	 * return FALSE to accept if filename ends in .BAT
	 */
        case FT_BATCH :
	{
	    /*
	     * check DOS filename extension
	     */
	    char    *name;

	    name = FileEnumLocateAttr(fecd, FEA_NAME, NULL);
	    
	    for (i=0 ; ((name[i] != 0) && (name[i] != '.')) ; i++)
		;

	    return (!((name[i] == '.') &&
		      (name[i+1] == 'B') &&
		      (name[i+2] == 'A') &&
		      (name[i+3] == 'T')));
	}

	/*
	 * return FALSE to accept if filename ends in .EXE, .COM, or .BAT
	 */
        case FT_DOS_EXECS :
	{
	    /*
	     * check DOS filename extension
	     */
	    char    *name;

	    name = FileEnumLocateAttr(fecd, FEA_NAME, NULL);
	    
	    for (i=0 ; ((name[i] != 0) && (name[i] != '.')) ; i++)
		;

	    return(! (((name[i] == '.') &&
		       (name[i+1] == 'E') &&
		       (name[i+2] == 'X') &&
		       (name[i+3] == 'E')) ||
		      ((name[i] == '.') &&
		       (name[i+1] == 'C') &&
		       (name[i+2] == 'O') &&
		       (name[i+3] == 'M')) ||
		      ((name[i] == '.') &&
		       (name[i+1] == 'B') &&
		       (name[i+2] == 'A') &&
		       (name[i+3] == 'T'))));
	}

	/*
	 * return FALSE to accept if file is GEOS file and is GEOS executable
	 */
        case FT_GEOS_EXECS :
	{
	    /*
	     * check for FEA_FILE_TYPE equal to GFT_EXECUTABLE
	     */
	    GeosFileType   *fileTypePtr;

	    fileTypePtr = FileEnumLocateAttr(fecd, FEA_FILE_TYPE, NULL);

	    return ((fileTypePtr == NULL) || (*fileTypePtr != GFT_EXECUTABLE));
	}

	/*
	 * just in case, reject the file if the FilterType doesn't
   	 * match any of the previous values.
	 */
        default :
	    return(TRUE);	/* reject */
    }
}
    
/*
 * Array of attributes our filter routine will need to receive to do its work.
 * The array contains an arbitrary number of elements, the last one of which
 * has FEA_END_OF_LIST as its FEAD_attr field.
 *
 * FEAD_value isn't used, so we set it to 0.
 *
 * FEAD_size *is* used, however, so we set it to the size appropriate to the
 * attribute we'll be needing.
 */
const FileExtAttrDesc filterFileSelectorFilterAttrs[] = {
{ FEA_NAME, 0, sizeof(FileLongName), NULL },
{ FEA_FILE_ATTR, 0, sizeof(FileAttrs), NULL },
{ FEA_FILE_TYPE, 0, sizeof(GeosFileType), NULL },
{ FEA_END_OF_LIST, 0, 0, NULL}
};

/***********************************************************************
 * MSG_GEN_FILE_SELECTOR_GET_FILTER_ROUTINE for FilterFileSelectorClass
 ***********************************************************************
 *
 * SYNPOSIS:	This message is sent by the file selector before rescanning
 *	    	to obtain the routine we want to use to filter the files
 *	    	that are displayed.
 *
 * PARAMETERS:
 *	void (GenFileSelectorGetFilterRoutineResults *filter);
 *
 * STRATEGY:	This message returns virtual pointers to both the
 *		filtering routine and the filtering attribute
 *		structures needed. 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	ardeb	3/23/92		Initial Revision
 *	RainerB	4/27/2022	Type mismatch error (with watcom) fixed
 *
 ***********************************************************************/
@method FilterFileSelectorClass, MSG_GEN_FILE_SELECTOR_GET_FILTER_ROUTINE
{
    /*
     * We need to return a virtual pointer to the filter routine so the
     * file selector can lock and unlock the routine's code resource as
     * appropriate. Unfortunately, the compiler optimizes the simple
     * implementation (just assigning filter->filterRoutine the address of
     * the routine) by storing CS for the segment, which is unhelpful. So
     * we need a static variable holding the routine's address instead.
     */
    static GenFileSelectorFilterRoutine * const filterRoutine =
    	(GenFileSelectorFilterRoutine *)&FilterFileSelectorFilterRoutine;

    /*
     * Specify the address of the routine to call. It need not be locked into
     * memory, as the GenFileSelector will do that for us.
     */
    filter->filterRoutine = filterRoutine;

    /*
     * Specify the additional attributes we need to look at in our filter
     * routine. As with the filterRoutine, these need not be in fixed or
     * locked memory.
     */
    filter->filterAttrs = filterFileSelectorFilterAttrs;
}

