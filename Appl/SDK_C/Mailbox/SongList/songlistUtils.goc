/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1994 -- All Rights Reserved

PROJECT:	Sample Applications
MODULE:		Mailbox Library Samples
FILE:		songlistUtils.goc

AUTHOR:		Chung Liu, Dec  9, 1994

ROUTINES:
	Name			Description
	----			-----------
	SLVMTreeGetNumChildren
	SLVMTreeAddChild
	SLVMTreeGetNthChild
	SLVMTreeDeleteChild
	SLAllocAndInitDataBlock
	SLAllocAndInitDataBlockFromDialog
	SLAllocAndInitDataBlockLikeThisOther
	SLFindDataBlock
	SLUpdateText
	SLVMTreeEnum
	SLAppendNotes
	SLReplaceNotes

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	CL	12/ 9/94   	Initial version.

DESCRIPTION:
	

	$Id: songlistUtils.goc,v 1.1 97/04/04 16:40:18 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@include <songlistConstant.goh>
#include <Ansi/string.h>
@include <songlistUI.goh>
@include <songlistUtils.h>
@include <songlistProcess.h>


/***********************************************************************
 *		SLVMTreeGetNumChildren
 ***********************************************************************
 * SYNOPSIS:	Return the number of children of the block.
 * CALLED BY:	
 * RETURN:	number of children
 * SIDE EFFECTS:
 *	The VMChainTree structure can have null pointers to children.
 *      We don't want to count those.
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/14/94   	Initial Revision
 *	RainerB	05/2022		unused local variables removed in SLVMTreeAddChild
 *
 ***********************************************************************/
word
SLVMTreeGetNumChildren (VMFileHandle vmfh,
			VMBlockHandle vmbh)
{
    VMChainTree *treePtr;
    MemHandle treeHandle;
    word c, i, numChildren;
    VMChain *linkPtr;

    treePtr = (VMChainTree *)VMLock(vmfh, vmbh, &treeHandle);
    numChildren = c = treePtr->VMCT_count;
    linkPtr = (VMChain *) ((byte *)treePtr + treePtr->VMCT_offset);
    for (i=0; i<c; i++) {
	if (*linkPtr == 0) {
	    numChildren--;
	}
	linkPtr++;
    }
    VMUnlock(treeHandle);
    return (numChildren);
}	/* End of SLVMTreeGetNumChildren.	*/


/***********************************************************************
 *		SLVMTreeAddChild
 ***********************************************************************
 * SYNOPSIS:	Add a child to a VM tree block.
 * CALLED BY:	SLProcessSLD_ARTIST_REALLY_ADD, etc. 
 * RETURN:	void
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 6/94   	Initial Revision
 *	RainerB	05/2022		unused local variables removed
 *
 ***********************************************************************/
void
SLVMTreeAddChild (VMFileHandle vmfh,
		  VMBlockHandle parentBlock,
		  VMBlockHandle newChildBlock)
{
    MemHandle parentHandle;
    SLDataBlock *parentPtr;
    word newSize, nameAndNotesSize, chainOffset;
    char *s, *t;
    VMChain childChain, *childChainPtr;

    /*
     * find out how large to make the parent block.
     */
    parentPtr = (SLDataBlock *)VMLock(vmfh, parentBlock, &parentHandle);
    nameAndNotesSize = strlen((char *)parentPtr + parentPtr->SLDB_nameOffset)
	+ strlen((char *)parentPtr + parentPtr->SLDB_notesOffset)
	+ (2 * sizeof(TCHAR));

    newSize = sizeof(SLDataBlock) 
	      + (parentPtr->SLDB_treeHeader.VMCT_count * sizeof(VMChain))
	      + nameAndNotesSize 
	      + sizeof(VMChain);

    /* 
     * resize the parent.
     */
    MemReAlloc(parentHandle, newSize, HAF_STANDARD_NO_ERR);
    parentPtr = (SLDataBlock *)MemDeref(parentHandle);

    /* 
     * Move the data and update the name and notes offsets.
     */
    t = (char *)parentPtr + newSize - sizeof(TCHAR);
    s = t - sizeof(VMChain);

    while(nameAndNotesSize--) {
	*t-- = *s--;
    }
    parentPtr->SLDB_nameOffset += sizeof(VMChain);
    parentPtr->SLDB_notesOffset += sizeof(VMChain);

    /* 
     * create the link.
     */
    childChain = VMCHAIN_MAKE_FROM_VM_BLOCK(newChildBlock);
    chainOffset = parentPtr->SLDB_treeHeader.VMCT_offset 
	+ (parentPtr->SLDB_treeHeader.VMCT_count * sizeof(VMChain));
    parentPtr->SLDB_treeHeader.VMCT_count += 1;

    childChainPtr = (VMChain *)((char *)parentPtr + chainOffset);
    *childChainPtr = childChain;

    /*
     * done with the changes.
     */
    VMDirty(parentHandle);
    VMUnlock(parentHandle);
	
}	/* End of SLVMTreeAddChild.	*/


/***********************************************************************
 *		SLVMTreeGetNthChild
 ***********************************************************************
 * SYNOPSIS:	Return the block handle of the Nth child (0-based index)
 *              of parentBlock
 * CALLED BY:	SLProcessSLP_ARTIST_MONIKER_QUERY
 * RETURN:	VMBlockHandle of Nth child, or 0 if out of range.
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 9/94   	Initial Revision
 *
 ***********************************************************************/
VMBlockHandle
SLVMTreeGetNthChild (VMFileHandle vmfh, VMBlockHandle parentBlock, word n)
{
    VMChainTree *parentAddr;
    MemHandle parentHandle;
    VMChain *chainsPtr, *childChainPtr;
    VMBlockHandle childBlock;
    word c;


    if (SLVMTreeGetNumChildren(vmfh, parentBlock) <= n) {
	childBlock = 0;
    } else {
	parentAddr = VMLock(vmfh, parentBlock, &parentHandle);
	chainsPtr = (VMChain *)((byte *)parentAddr + parentAddr->VMCT_offset);

	/* don't count null chains. */
	c = 0;
	while (c <= n) {
	    while (*chainsPtr == 0) {
		chainsPtr++;
	    }
	    childChainPtr = chainsPtr;
	    chainsPtr++;
	    c++;
	}
	childBlock = VMCHAIN_GET_VM_BLOCK(*childChainPtr);
	VMUnlock(parentHandle);
    }
    return (childBlock);
}	/* End of SLVMTreeGetNthChild.	*/


/***********************************************************************
 *		SLVMTreeDeleteChild
 ***********************************************************************
 * SYNOPSIS:	Delete the block in question, removing the link from the
 *              parent.  VMUpdate() is called, so changes are committed.
 * CALLED BY:	SLProcessSLP_ARTIST_REALLY_DELETE, etc.
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	1/10/95   	Initial Revision
 *
 ***********************************************************************/
void
SLVMTreeDeleteChild (VMFileHandle vmfh,
		     VMBlockHandle parentBlock,
		     VMBlockHandle childBlock)
{
    VMChainTree *dataPtr;
    MemHandle dataHandle;
    VMChain *linksPtr;
    word c, numChildren;

    /* Zero out the link in the parent block */
    dataPtr = VMLock(vmfh, parentBlock, &dataHandle);
    numChildren = dataPtr->VMCT_count;
    linksPtr = (VMChain *)((byte *)dataPtr + dataPtr->VMCT_offset);
    
    for(c=0; c<numChildren; c++) {
	if (VMCHAIN_GET_VM_BLOCK(*linksPtr) == childBlock) {
	    *linksPtr = 0;
	    VMFreeVMChain(vmfh, VMCHAIN_MAKE_FROM_VM_BLOCK(childBlock));
	    break;
	}
	linksPtr++;
    }
    VMDirty(dataHandle);
    VMUnlock(dataHandle);

    /* Commit the delete */
    VMUpdate(vmfh);
}	/* End of SLVMTreeDeleteChild.	*/


/***********************************************************************
 *		SLAllocAndInitDataBlock
 ***********************************************************************
 * SYNOPSIS:	Allocate a VM block with SLDataBlock containing passed info 
 * CALLED BY:	SLAllocAndInitDataBlockFromDialog,
 *              SLAllocAndInitDataBlockLikeThisOther
 * RETURN:	VM block handle, or 0 if error.
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 7/94   	Initial Revision
 *
 ***********************************************************************/
VMBlockHandle
SLAllocAndInitDataBlock (VMFileHandle vmfh,
			 word userID,
			 char *name,
			 char *notes)
{
    VMBlockHandle newBlock;
    SLDataBlock *newBlockAddr;
    MemHandle newBlockHandle;
    word totalSize, nameSize;
    char *newNamePtr, *newNotesPtr;
    VMChain *zeroChainPtr;

    /* 
     * Figure out how big to make the new block.
     * include nulls in size computation.
     */
    nameSize = strlen(name);
    totalSize =	nameSize + strlen(notes) + (2 * sizeof(TCHAR)) +
	sizeof(VMChain) + sizeof(SLDataBlock);

    /*
     * Alloc the block and lock it down.
     */
    newBlock = VMAlloc(vmfh, totalSize, userID);
    newBlockAddr = VMLock(vmfh, newBlock, &newBlockHandle);
    
    /*
     * Fill in the new block's tree header.  Because VM trees don't like
     * having VMCT_count = 0, we have a null link.
     */
    newBlockAddr->SLDB_treeHeader.VMCT_meta.VMC_next = VM_CHAIN_TREE;
    newBlockAddr->SLDB_treeHeader.VMCT_offset = sizeof(SLDataBlock);
    newBlockAddr->SLDB_treeHeader.VMCT_count = 1;

    zeroChainPtr = (VMChain *)((byte *)newBlockAddr + sizeof(SLDataBlock));
    *zeroChainPtr = (VMChain) 0;

    /*
     * copy data into new block.
     */
    newBlockAddr->SLDB_nameOffset = sizeof(SLDataBlock) + sizeof(VMChain);
    newBlockAddr->SLDB_notesOffset =
	sizeof(SLDataBlock) + sizeof(VMChain) + nameSize + sizeof(TCHAR);

    newNamePtr = (char *)newBlockAddr + newBlockAddr->SLDB_nameOffset;
    newNotesPtr = (char *)newBlockAddr + newBlockAddr->SLDB_notesOffset;

    strcpy(newNamePtr, name);
    strcpy(newNotesPtr, notes);

    VMDirty(newBlockHandle);
    VMUnlock(newBlockHandle);

    /* Commit changes to disk */
    VMUpdate(vmfh);

    return(newBlock);
}	/* End of SLAllocAndInitDataBlock.	*/


/***********************************************************************
 *		SLAllocAndInitDataBlockFromDialog
 ***********************************************************************
 * SYNOPSIS:	Allocate a VM block with SLDataBlock containing info from 
 *              the add dialog.
 * CALLED BY:	SLPProcessSLP_ARTIST_REALLY_ADD
 * RETURN:	VMBlockHandle, or 0 if error.
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/12/94   	Initial Revision
 *
 ***********************************************************************/
VMBlockHandle
SLAllocAndInitDataBlockFromDialog (VMFileHandle vmfh, word userID)
{
    VMBlockHandle vmbh;
    char *name, *notes;
    MemHandle nameBlock, notesBlock;

    nameBlock = @call SLAddOrEditNameText::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
    notesBlock = @call SLAddOrEditNotesText::MSG_VIS_TEXT_GET_ALL_BLOCK(0);
    name = (char *)MemLock(nameBlock);
    notes = (char *)MemLock(notesBlock);
    
    vmbh = SLAllocAndInitDataBlock(vmfh, userID, name, notes);

    MemFree(nameBlock);
    MemFree(notesBlock);
    return (vmbh);
}	/* End of SLAllocAndInitDataBlockFromDialog.	*/


/***********************************************************************
 *		SLAllocAndInitDataBlockLikeThisOther
 ***********************************************************************
 * SYNOPSIS:	Allocate a VM block with SLDataBlock containing same
 *              info as the other block passed.
 * CALLED BY:	SLCreateCurrentSongBody, etc.
 * RETURN:	
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/12/94   	Initial Revision
 *
 ***********************************************************************/
VMBlockHandle
SLAllocAndInitDataBlockLikeThisOther (VMFileHandle vmfh,
				      VMBlockHandle vmbh,
				      word userID,
				      VMFileHandle vmfhForCopy)
{
    SLDataBlock *dataPtr;
    MemHandle dataHandle;
    char *name, *notes;
    VMBlockHandle newBlock;

    dataPtr = VMLock(vmfh, vmbh, &dataHandle);
    name = (char *)dataPtr + dataPtr->SLDB_nameOffset;
    notes = (char *)dataPtr + dataPtr->SLDB_notesOffset;

    newBlock = SLAllocAndInitDataBlock(vmfhForCopy, userID, name, notes);
    
    VMUnlock(dataHandle);
    return (newBlock);
}	/* End of SLAllocAndInitDataBlockLikeThisOther.	*/



/***********************************************************************
 *		SLFindDataBlock
 ***********************************************************************
 * SYNOPSIS:	Find the VM data block with matching SLDB_name and userID.
 * CALLED BY:	SLProcessSLP_RECORD_REALLY_ADD
 * RETURN:	0 if not found, else VMBlockHandle
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/ 7/94   	Initial Revision
 *
 ***********************************************************************/
VMBlockHandle
SLFindDataBlock (VMFileHandle vmfh,
		 char *name,
		 word userID)
{
    SLDataBlock *dataPtr;
    MemHandle dataHandle;
    char *blockName;
    VMBlockHandle matchBlock = 0;
    int nameCmp = -1;

    while ((nameCmp != 0) &&
	   ((matchBlock = VMFind(vmfh, matchBlock, userID)) != 0)) {
	dataPtr = VMLock(vmfh, matchBlock, &dataHandle);
	blockName = (char *)dataPtr + dataPtr->SLDB_nameOffset;
	nameCmp = strcmp(blockName, name);
	VMUnlock(dataHandle);
    };
    return (matchBlock);
}	/* End of SLFindDataBlock.	*/


/***********************************************************************
 *		SLUpdateText
 ***********************************************************************
 * SYNOPSIS:	Update the notes text according to selections.
 * CALLED BY:	SLMergeSLDataTrees, SLProcessSLP_ARTIST_APPLY, etc.
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/12/94   	Initial Revision
 *
 ***********************************************************************/
void
SLUpdateText (VMFileHandle vmfh,
	      VMBlockHandle artistBlock,
	      VMBlockHandle recordBlock,
	      VMBlockHandle songBlock)
{
    SLDataBlock *dataPtr;
    MemHandle dataHandle;
    char *notes;

    @call SLText::MSG_VIS_TEXT_DELETE_ALL();
    if (artistBlock) {
	dataPtr = VMLock(vmfh, artistBlock, &dataHandle);
	notes = (char *)dataPtr + dataPtr->SLDB_notesOffset;
	@call SLText::MSG_VIS_TEXT_APPEND_PTR("Artist:\r", 0);
	@call SLText::MSG_VIS_TEXT_APPEND_PTR(notes, 0);
	VMUnlock(dataHandle);

	if (recordBlock) {
	    dataPtr = VMLock(vmfh, recordBlock, &dataHandle);
	    notes = (char *)dataPtr + dataPtr->SLDB_notesOffset;
	    @call SLText::MSG_VIS_TEXT_APPEND_PTR("\r\rRecord:\r", 0);
	    @call SLText::MSG_VIS_TEXT_APPEND_PTR(notes, 0);
	    VMUnlock(dataHandle);

	    if (songBlock) {
		dataPtr = VMLock(vmfh, songBlock, &dataHandle);
		notes = (char *)dataPtr + dataPtr->SLDB_notesOffset;
		@call SLText::MSG_VIS_TEXT_APPEND_PTR("\r\rSong:\r", 0);
		@call SLText::MSG_VIS_TEXT_APPEND_PTR(notes, 0);
		VMUnlock(dataHandle);
	    }
	}
    }
}	/* End of SLUpdateText.	*/


/***********************************************************************
 *		SLVMTreeEnum
 ***********************************************************************
 * SYNOPSIS:	Enumerate through the children of the VM block, calling
 *              the specified function.
 * CALLED BY:	SLMergeSLDataTrees
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/15/94   	Initial Revision
 *
 ***********************************************************************/
void
SLVMTreeEnum (VMFileHandle vmfh,
	      VMBlockHandle vmbh,
	      SLVMTreeEnumCallback *callbackp,
	      VMBlockHandle otherBlock)
{
    VMBlockHandle childBlock;
    word n, numChildren;
    VMChainTree *parentPtr;
    MemHandle parentHandle;
    VMChain *childChainPtr;

    n = 0;
    numChildren = SLVMTreeGetNumChildren(vmfh, vmbh);
    if (numChildren > 0) {
	parentPtr = VMLock(vmfh, vmbh, &parentHandle);
	childChainPtr =
	    (VMChain *)((byte *)parentPtr + parentPtr->VMCT_offset);
	while (n < numChildren) {
	    while (*childChainPtr == 0) { childChainPtr++; }
	    childBlock = VMCHAIN_GET_VM_BLOCK(*childChainPtr);
	    (*callbackp)(vmfh, childBlock, n, otherBlock);
	    childChainPtr++;  
	    n++;
	}
	VMUnlock(parentHandle);
    }
}	/* End of SLVMTreeEnum.	*/


/***********************************************************************
 *		SLAppendNotes
 ***********************************************************************
 * SYNOPSIS:	append the moreNotes string to the notes of the
 *              SLDataBlock that was passed in.  VMUpdate() is called 
 *              after the changes.
 * CALLED BY:	SLMergeArtistBlock, etc.
 * RETURN:	
 * SIDE EFFECTS:
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/16/94   	Initial Revision
 *
 ***********************************************************************/
void
SLAppendNotes (VMFileHandle vmfh, VMBlockHandle vmbh, char *moreNotes)
{
    MemHandle blockHandle;
    SLDataBlock *blockPtr;
    word newSize, nameSize, notesSize;
    char *name, *notes;

    blockPtr = (SLDataBlock *)VMLock(vmfh, vmbh, &blockHandle);

    name = (char *)blockPtr + blockPtr->SLDB_nameOffset;
    notes = (char *)blockPtr + blockPtr->SLDB_notesOffset;
    nameSize = strlen(name) + sizeof(TCHAR);
    notesSize = strlen(notes) + sizeof(TCHAR);
    newSize = sizeof(SLDataBlock) 
	      + (blockPtr->SLDB_treeHeader.VMCT_count * sizeof(VMChain))
	      + nameSize + notesSize + sizeof(TCHAR) + strlen(moreNotes);
    MemReAlloc(blockHandle, newSize, HAF_STANDARD_NO_ERR);
    blockPtr = (SLDataBlock *)MemDeref(blockHandle);

    /* set notes to point to where to start appending the text. */
    notes = (char *)blockPtr + blockPtr->SLDB_notesOffset
	+ notesSize - sizeof(TCHAR);
    *notes++ = '\r';
    strcpy(notes, moreNotes);

    VMDirty(blockHandle);
    VMUnlock(blockHandle);

    VMUpdate(vmfh);
}	/* End of SLAppendNotes.	*/


/***********************************************************************
 *		SLReplaceNotes
 ***********************************************************************
 * SYNOPSIS:	Replace the SLDataBlock's notes with new notes. 
 *              VMUpdate() is called after changes.
 * CALLED BY:	SLMergeArtistBlock, etc.
 * RETURN:	
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	CL	12/16/94   	Initial Revision
 *
 ***********************************************************************/
void
SLReplaceNotes (VMFileHandle vmfh, VMBlockHandle vmbh, char *newNotes)
{
    MemHandle blockHandle;
    SLDataBlock *blockPtr;
    word newSize, nameSize;
    char *name, *notes;

    blockPtr = (SLDataBlock *)VMLock(vmfh, vmbh, &blockHandle);

    name = (char *)blockPtr + blockPtr->SLDB_nameOffset;
    nameSize = strlen(name) + sizeof(TCHAR);
    newSize = sizeof(SLDataBlock) 
	      + (blockPtr->SLDB_treeHeader.VMCT_count * sizeof(VMChain))
	      + nameSize + strlen(newNotes) + sizeof(TCHAR);
    MemReAlloc(blockHandle, newSize, HAF_STANDARD_NO_ERR);
    blockPtr = (SLDataBlock *)MemDeref(blockHandle);
    notes = (char *)blockPtr + blockPtr->SLDB_notesOffset;
    strcpy(notes, newNotes);

    VMDirty(blockHandle);
    VMUnlock(blockHandle);

    VMUpdate(vmfh);
}	/* End of SLReplaceNotes.	*/


