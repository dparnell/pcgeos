/***********************************************************************
 *
 *	Copyright (c) Geoworks 1994 -- All Rights Reserved
 *
 * PROJECT:	  GEOS
 * MODULE:	  PCCom2 (Sample GEOS application)
 * FILE:	  pccom2.goc
 *
 * AUTHOR:	  Cassie Hartzog, Jan 20, 1994
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	1/20/94	  cassie    Initial version
 *
 * DESCRIPTION:
 *	The PCCom2 sample application is probably not the application
 *	to use as a model if one simply wants to learn how to use the
 *	PCCom library. See the PCCom1 sample application for that. 
 *
 *	The PCCom2 application demonstrates how to load a library 
 *	dynamically and, more generally, how to call a library through
 *	its entry points. It is unlikely that one would need to load
 *	the PCCom library dynamically but it provides a useful
 *	demonstration here.
 *	
 *	$Id: pccom2.goc,v 1.1 97/04/04 16:39:15 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
@include <pccom.goh>
#include <library.h>
#include <resource.h>

/*
 ***************************************************************************
 *		Global constants/variables
 ***************************************************************************
 */

#if ERROR_CHECK
static char *pccomName = "pccomec.geo"; 
#else
static char *pccomName = "pccom.geo"; 
#endif

static GeodeHandle pccomLib = NullHandle;
static Boolean pccomLoaded = FALSE;
static ThreadHandle thread = NullHandle;

void ResetText(void);
void FreeLibrary(void);


/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	PCCom2ProcessClass, GenProcessClass ;

/* define messages for this class here. */

@message void MSG_PCCOM2_START_PCCOM();	    /* start a serial connection */
@message void MSG_PCCOM2_EXIT_PCCOM();	    /* shut down the connection */
@message void MSG_PCCOM2_ABORT_PCCOM();	    /* abort the current operation */

@endc   /* end of class definition */


@class	PCCom2TextClass, GenTextClass ;

@endc

@classdecl	PCCom2ProcessClass, neverSaved ;
@classdecl	PCCom2TextClass ;


/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource;

@object GenApplicationClass PCCom2App = {
    GI_visMoniker = "PCCom2 Sample Application";
    GI_comp = @PCCom2Primary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @PCCom2Primary;
}

@end	AppResource;

@start	Interface;

/*****************************
 *	Primary window
 *****************************/

@object GenPrimaryClass PCCom2Primary  = {
    GI_comp = @PCCom2Menu, 
    	      @PCCom2TextObj;

    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;	/* The window may not be iconified */
}

/****************************
 *	PCCom2 menu
 ****************************/

@object GenInteractionClass PCCom2Menu = {
    GII_visibility = GIV_POPUP;
    GI_visMoniker = 'P', "PCCom";
    GI_comp = 
	@PCCom2StartTrigger,
	@PCCom2ExitTrigger,
	@PCCom2AbortTrigger;
}

@object GenTriggerClass PCCom2StartTrigger = {
    GI_visMoniker = 'S', "Start PCCom";
    GTI_destination = process;
    GTI_actionMsg = MSG_PCCOM2_START_PCCOM;
}

@object GenTriggerClass PCCom2ExitTrigger = {
    GI_visMoniker = 'E', "Exit PCCom";
    GTI_destination = process;
    GTI_actionMsg = MSG_PCCOM2_EXIT_PCCOM;
}

@object GenTriggerClass PCCom2AbortTrigger = {
    GI_visMoniker = 'A', "Abort PCCom";
    GTI_destination = process;
    GTI_actionMsg = MSG_PCCOM2_ABORT_PCCOM;
}


@object PCCom2TextClass PCCom2TextObj = {
    /* Make it read only so the user can't modify what is being displayed */
    GI_attrs = @default | GA_READ_ONLY;
    GTXI_attrs = @default | GTA_INIT_SCROLLING;
    HINT_EXPAND_HEIGHT_TO_FIT_PARENT;
    HINT_EXPAND_WIDTH_TO_FIT_PARENT;
    HINT_TEXT_WHITE_WASH_COLOR;
}

@end Interface



/*
 ***************************************************************************
 *		Code for PCCom2ProcessClass 
 ***************************************************************************
 */



/***********************************************************************
 *		MSG_PCCOM2_START_PCCOM for PCCom2ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Initialize serial connection.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom2ProcessClass, MSG_PCCOM2_START_PCCOM
{
    GeodeLoadError err;
    
    if (pccomLoaded == FALSE) {
	FilePushDir();
	FileSetStandardPath(SP_SYSTEM);
	pccomLib = GeodeUseLibrary(pccomName, 0, 0, &err);
	if (pccomLib != NullHandle) {
	    /* 
	     * Get the address of the entry point for PCComInit and call it,
	     * passing SERIAL_COM1, SB_9600 as the values to use for the
	     * serial line (for file transfer on the Zoomer).  Tell the
	     * PCCom Library to send text output to PCCom2TextObj, and to
	     * notify us if a remote exit occurs.
	     */
	    if ((PCComReturnType) ProcCallFixedOrMovable_pascal(SERIAL_COM1, 
		 SB_9600, 10, @PCCom2TextObj, 
		 PCCIF_NOTIFY_OUTPUT | PCCIF_NOTIFY_EXIT,
	    	 ProcGetLibraryEntry(pccomLib, PCCEP_INIT)) != PCCRT_NO_ERROR)
	       FreeLibrary();
	    else 
		pccomLoaded = TRUE;
	}
	FilePopDir();
    }
}



/***********************************************************************
 *		MSG_PCCOM2_ABORT_PCCOM for PCCom2ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Abort the current file transfer.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom2ProcessClass, MSG_PCCOM2_ABORT_PCCOM
{
    if (pccomLoaded == TRUE) {
    	ProcCallFixedOrMovable_pascal(
			ProcGetLibraryEntry(pccomLib, PCCEP_ABORT));
    }
    ResetText();
}



/***********************************************************************
 *		MSG_PCCOM2_EXIT_PCCOM for PCCom2ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    Close the serial connection.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom2ProcessClass, MSG_PCCOM2_EXIT_PCCOM
{

    if (pccomLoaded == TRUE) {
	/*
	 * Tell PCCom to close the serial connection and destroy
	 * the thread created to run it.  We can't free the PCCom 
	 * Library until we know that the thread has been destroyed.  
	 * MSG_PROCESS_NOTIFY_THREAD_EXIT will be sent to the
	 * process when the thread has been destroyed, and then
	 * it is safe to free the library.
	 */
    	ProcCallFixedOrMovable_pascal(
			ProcGetLibraryEntry(pccomLib, PCCEP_EXIT));
    }
    ResetText();
}



/***********************************************************************
 *		MSG_PROCESS_NOTIFY_THREAD_EXIT
 ***********************************************************************
 * SYNOPSIS:	    The thread running the serial connection has been 
 *	    	    destroyed, so the PCCom Library can be freed now.
 *
 * PARAMETERS:	    ThreadHandle exitProcess
 *	    	    word    	 exitCode
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom2ProcessClass, MSG_PROCESS_NOTIFY_THREAD_EXIT
{
    /* 
     *  If the exiting thread is the same as that which was
     *  passed to us in MSG_META_NOTIFY:GWNT_PCCOM_EXIT_PCCOM,
     *  we can now free the PCCom Library. 
     */
    if (exitProcess == thread)
	FreeLibrary();
	
    @callsuper();
}


/***********************************************************************
 *		MSG_META_DETACH for PCCom2ProcessClass
 ***********************************************************************
 * SYNOPSIS:	    The application is shutting down, exit PCCom.
 * PARAMETERS:	    void 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom2ProcessClass, MSG_META_DETACH
{

    if (pccomLoaded == TRUE) {
	@call self::MSG_PCCOM2_EXIT_PCCOM();
    }

    /* Let our superclass do the rest of the detach work */
    @callsuper();
}




/*
 ***************************************************************************
 *		Code for PCCom2TextClass 
 ***************************************************************************
 */

/***********************************************************************
 *		MSG_META_NOTIFY
 ***********************************************************************
 * SYNOPSIS:	    Display a char sent from PCCom Library
 * PARAMETERS:	    if notificationType - GWNT_PCCOM_DISPLAY_CHAR
 * 	    	    	data -  char to display
 *	    	    if notificationType - GWNT_PCCOM_EXIT
 *	    	    	data - ThreadHandle of thread that is being destroyed
 * STRATEGY: 
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom2TextClass, MSG_META_NOTIFY
{
    char character;

    if (notificationType == GWNT_PCCOM_DISPLAY_CHAR) {
	character = (char)data;

	/*
	 * If character is backspace, reset position to previous position 
	 * and draw a white rectangle to "erase" the character which
	 * was drawn there.
	 */
	if (character == C_BS) {
	    if (@call self::MSG_VIS_TEXT_GET_TEXT_SIZE() > 0) {
		@call self::MSG_VIS_TEXT_SELECT_END();
		@call self::MSG_VIS_TEXT_SELECT_RELATIVE(-1,0);
		@call self::MSG_VIS_TEXT_DELETE_SELECTION();
	    }
	    
	} else {
	    @call self::MSG_VIS_TEXT_APPEND_PTR(&character, 1);
	}
    } else if (notificationType == GWNT_PCCOM_EXIT) {

	/*
	 * If the serial connection was closed from the remote machine,
	 * we want to free the PCCom library only AFTER we have been
	 * notified that this thread has exited. Save the ThreadHandle
	 * in the thread variable so that we can compare it to the
	 * value passed in MSG_PROCESS_NOTIFY_THREAD_EXIT.
	 */
	 thread = data;
	 ResetText();
    }
}



/***********************************************************************
 *		MSG_META_NOTIFY_WITH_DATA_BLOCK
 ***********************************************************************
 * SYNOPSIS:	    Display a string sent from PCCom Library
 * PARAMETERS:	    block = handle of block containing null-terminated string
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
@method PCCom2TextClass, MSG_META_NOTIFY_WITH_DATA_BLOCK
{
    if	(notificationType == GWNT_PCCOM_DISPLAY_STRING) {
	@call self::MSG_VIS_TEXT_APPEND_BLOCK(data, 0);
	MemFree(data);
    }
}



/***********************************************************************
 *		ResetText
 ***********************************************************************
 * SYNOPSIS:	    Delete all text.
 * PARAMETERS:	    void (void)
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
void ResetText()
{
    @call PCCom2TextObj::MSG_VIS_TEXT_DELETE_ALL();
}


/***********************************************************************
 *		FreeLibrary
 ***********************************************************************
 * SYNOPSIS:	    Delete all text.
 * PARAMETERS:	    void (void)
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	Cassie	1/94		Initial Revision
 *
 ***********************************************************************/
void FreeLibrary()
{
    if (pccomLib != NullHandle) {
	GeodeFreeLibrary(pccomLib);
	pccomLib = NullHandle;
    }
    pccomLoaded = FALSE;
}



