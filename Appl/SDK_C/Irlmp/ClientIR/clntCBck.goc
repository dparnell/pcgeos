/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1996 -- All Rights Reserved

PROJECT:	GEOS
MODULE:		Client ir test app
FILE:		clientirCallback.goc

AUTHOR:		Andy Chiu, Mar 11, 1996

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	AC	3/11/96   	Initial version.
	RainerB	12/02/2022	Some unused symbols removed

DESCRIPTION:
	

	$Id: clntCBck.goc,v 1.1 97/04/04 16:40:45 newdeal Exp $

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

@define __CLIENTIR_CALLBACK_GOC
@include "clientir.goh"


/***********************************************************************
 *		ClientirIrlmpDiscoveryCallback
 ***********************************************************************
 * SYNOPSIS:	Callback when discovery happens
 * CALLED BY:	Irlmp library
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 *       data   = chunk array of DiscoveryLog
 *       status = IrlmpDiscoveryStatus
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal ClientirIrlmpDiscoveryCallback (ClientHandle client,
			     IrlmpIndicationOrConfirmation type,
			     word extra,
			     dword data, 
			     word status)
{
    word numElements;
    optr chunkArray = (optr) data;
    word elementSize;
    DiscoveryLog *log;
    
    GeodeLoadDGroup(extra);

    numElements = ChunkArrayGetCount(chunkArray);
    if (numElements) {

	/* Get the first DiscoveryLog in the array.  It can't be out of */
	/* bounds!                                                      */
	/* ------------------------------------------------------------ */
	log = ChunkArrayElementToPtr(chunkArray, 0, &elementSize);
	irlapAddr = log->DL_devAddr;
	CUShowStatusOptr(@discoveryMsg);
	CUSetIrlapAddr();
    }
    else 
	CUShowStatusOptr(@discoveryFailedMsg);
    
    /* Unregister, since we're done with discovery */
    /* ------------------------------------------- */
    IrlmpUnregister(client);

}	/* End of ClientirIrlmpDiscoveryCallback.	*/


/***********************************************************************
 *		CCConnectConfirm
 ***********************************************************************
 * SYNOPSIS:	LM_Connect.confirm
 * CALLED BY:	ClientirIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal CCConnectConfirm (IrlmpConnectArgs *connectArgs)
{
    CUShowStatusOptr(@connectConfirmMsg);
    if (connectArgs->ICA_dataSize) {
	CUSetRecvText((IrlmpDataArgs *)connectArgs);
	CUSetRemoteLsap((word) connectArgs->ICA_lsapID.ILI_lsapSel);
	HugeLMemFree(connectArgs->ICA_data);
    }
    
}	/* End of CCConnectConfirm.	*/


/***********************************************************************
 *		CCDisconnectIndication
 ***********************************************************************
 * SYNOPSIS:	LM_Disconnect.indication
 * CALLED BY:	ClientirIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal CCDisconnectIndication (ClientHandle client, IrlmpDataArgs *dataArgs)
{
    CUShowStatusOptr(@disconnectIndicationMsg);
    if (dataArgs->IDA_dataSize) {
	CUSetRecvText(dataArgs);
	HugeLMemFree(dataArgs->IDA_data);
    }
    
    IrlmpUnregister(client);

}	/* End of CCDisconnectIndication.	*/


/***********************************************************************
 *		CCDataIndication
 ***********************************************************************
 * SYNOPSIS:	LM_Data.indication
 * CALLED BY:	ClientirIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal CCDataIndication (IrlmpDataArgs *dataArgs)
{
    CUShowStatusOptr(@dataIndicationMsg);
    if (dataArgs->IDA_dataSize) {
	CUSetRecvText(dataArgs);
	HugeLMemFree(dataArgs->IDA_data);
    }

}	/* End of CCDataIndication.	*/


/***********************************************************************
 *		CCUDataIndication
 ***********************************************************************
 * SYNOPSIS:	LM_UData.indication
 * CALLED BY:	ClientirIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal CCUDataIndication (IrlmpDataArgs *dataArgs)
{
    CUShowStatusOptr(@udataIndicationMsg);
    if (dataArgs->IDA_dataSize) {
	CUSetRecvText(dataArgs);
	HugeLMemFree(dataArgs->IDA_data);
    }

}	/* End of CCUDataIndication.	*/


/***********************************************************************
 *		CCStatusIndication
 ***********************************************************************
 * SYNOPSIS:	LM_Status.indication
 * CALLED BY:	ClientirIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/12/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal CCStatusIndication (void)
{
    CUShowStatusOptr(@statusIndicationMsg);

}	/* End of CCStatusIndication.	*/



/***********************************************************************
 *		CCStatusConfirmation
 ***********************************************************************
 * SYNOPSIS:	LM_Status.confirm
 * CALLED BY:	ClientirIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/12/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal CCStatusConfirmation (ConnectionStatus status)
{
    optr statusOptr;
    if (status & CS_IMPENDING_DISCONNECTION) {
	if (status & CS_UNACKED_DATA)
	    /* Noisy, unacked */
	    statusOptr = @statusNoisyUnackedMsg;
	else
	    /* Noisy no unacked */
	    statusOptr = @statusNoisyMsg;
    }
     /* Not noisy */
    else if (status & CS_UNACKED_DATA)
	/* not noisy, unacked */
	statusOptr = @statusUnackedMsg;
    else
	/* not noisy, not unacked */
	statusOptr = @statusOkayMsg;

    CUShowStatusOptr(statusOptr);

}	/* End of CCStatusConfirmation.	*/


/***********************************************************************
 *		CCGetValueByClassConfirmation
 ***********************************************************************
 * SYNOPSIS:	Show the results and unregister
 * CALLED BY:	ClientirIrlmpCallback
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/14/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal CCGetValueByClassConfirmation (ClientHandle client,
				       optr        objectArray,
				       word         returnValue)
{
    char *lineFeed;
    char buf[UHTA_NULL_TERM_BUFFER_SIZE];

    IrlmpDisconnectIas(client);

    /* To avoid a deadlock, we have to queue the message  */
    /* The endpoint block was locked to call the callback */
    /* and the unregister routine will also try to get    */
    /* exclusive access                                   */
    @send ConstructOptr(GeodeGetCodeProcessHandle(),0)::MSG_CP_UNREGISTER();

    MemLock(HandleOf(@returnValueMsg));

    lineFeed = LMemDeref(@lineFeedMsg);
    
    CUSetRecvTextPtr(lineFeed);
    
    /* The first byte is the return value */
    UtilHex32ToAscii(buf, (dword) returnValue, UHTAF_NULL_TERMINATE);
    CUSetRecvTextPtr(LMemDeref(@returnValueMsg));
    CUSetRecvTextPtr(buf);
    CUSetRecvTextPtr(lineFeed);

    /* The number of matches is the next two words */
    if (!returnValue) {
	UtilHex32ToAscii(buf, (dword)ChunkArrayGetCount(objectArray),
			 UHTAF_NULL_TERMINATE);
	CUSetRecvTextPtr(LMemDeref(@matchesMsg));
	CUSetRecvTextPtr(buf);
	CUSetRecvTextPtr(lineFeed);
    }

    MemUnlock(HandleOf(@returnValueMsg));

}	/* End of CCGetValueByClassConfirmation.	*/


/***********************************************************************
 *		ClientirIrlmpCallback
 ***********************************************************************
 * SYNOPSIS:	Callback routine for the Irlmp Library
 * CALLED BY:	Irlmp library
 * RETURN:	nothing
 * SIDE EFFECTS:
 *	
 * STRATEGY:
 *	
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	AC	3/11/96   	Initial Revision
 *
 ***********************************************************************/
void
_pascal ClientirIrlmpCallback (ClientHandle client,
			     IrlmpIndicationOrConfirmation type,
			     word extra,
			     dword data, 
			     word status)
{
    GeodeLoadDGroup(extra);

    switch (type) {
        case IIC_CONNECT_CONFIRMATION:
	  CCConnectConfirm((IrlmpConnectArgs *)data);
	  break;
	case IIC_DISCONNECT_INDICATION:
	  CCDisconnectIndication(client,(IrlmpDataArgs *) data);
	  break;
	case IIC_DATA_INDICATION:
	  CCDataIndication((IrlmpDataArgs *)data);
	  break;
        case IIC_UDATA_INDICATION:
	  CCUDataIndication((IrlmpDataArgs *)data);
	  break;
	case IIC_STATUS_INDICATION:
	  CCStatusIndication();
	  break;
	case IIC_STATUS_CONFIRMATION:
	  CCStatusConfirmation(status);
	  break;
	case IIC_GET_VALUE_BY_CLASS_CONFIRMATION:
	  CCGetValueByClassConfirmation(client, (optr) data,status);
	  break;
        default:
	  break;
    }

}	/* End of ClientirIrlmpCallback.	*/





