/***********************************************************************
 *
 *	Copyright (c) Geoworks 1991 -- All Rights Reserved
 *
 * PROJECT:	GEOS
 * MODULE:	UICtrl (Sample GEOS application)
 * FILE:	uitsctrl.goc
 * AUTHOR:	Tony Requist: April 1, 1991
 *
 * REVISION HISTORY:
 *      Name    Date            Description
 *      ----    ----            -----------
 *      tony    4/1/91		Initial version
 *	RainerB	11/19/2022	Paramters for MSG_VIS_TEXT_SET_TEXT_STYLE fixed
 *
 * DESCRIPTION:
 *	This file implements the UI controller class UICTextStyleControlClass.
 *
 *
 * RCS STAMP:
 *	$Id: uitsctrl.goc,v 1.1 97/04/04 16:37:07 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>
#include <Ansi/string.h>

#include <geoworks.h>
@include <uitsctrl.goh>

/*
 ***************************************************************************
 *		Constants and structures
 ***************************************************************************
 */

/*
 ***************************************************************************
 *		Global variables
 ***************************************************************************
 */

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@classdecl	UICTextStyleControlClass ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

/*
 * Style control
 */

@start TextStyleControlUI, notDetachable ;

@object GenItemGroupClass PlainTextList = {
	GI_states = @default & ~GS_USABLE;
	GI_comp = @PlainTextEntry;
	GIGI_applyMsg = MSG_TSC_PLAIN_TEXT_CHANGE;
	GIGI_destination = (TO_OBJ_BLOCK_OUTPUT);
}

@object GenItemClass PlainTextEntry = {
	GI_visMoniker = 'P', "Plain Text";
	GI_kbdAccelerator = control 'p';
	GII_identifier = 0;
}

/* --- */

@object GenBooleanGroupClass TextStyleList = {
	GI_states = @default & ~GS_USABLE;
	GI_comp = @BoldEntry, @ItalicEntry, @UnderlineEntry, @StrikeThruEntry,
		  @SuperscriptEntry, @SubscriptEntry;
	GBGI_destination = (TO_OBJ_BLOCK_OUTPUT);
	GBGI_applyMsg = MSG_TSC_STYLE_CHANGE;
}

@object GenBooleanClass BoldEntry = {
	GI_visMoniker = 'B', "Bold";
	GI_kbdAccelerator = control 'b';
	GBI_identifier = TS_BOLD;
}

@object GenBooleanClass ItalicEntry = {
	GI_visMoniker = 'I', "Italic";
	GI_kbdAccelerator = control 'i';
	GBI_identifier = TS_ITALIC;
}

@object GenBooleanClass UnderlineEntry = {
	GI_visMoniker = 'U', "Underline";
	GI_kbdAccelerator = control 'u';
	GBI_identifier = TS_UNDERLINE;
}

@object GenBooleanClass StrikeThruEntry = {
	GI_visMoniker = 'S', "Strike Thru";
	GBI_identifier = TS_STRIKE_THRU;
}

@object GenBooleanClass SuperscriptEntry = {
	GI_visMoniker = '<', "Superscript (<)";
	GBI_identifier = TS_SUPERSCRIPT;
}

@object GenBooleanClass SubscriptEntry = {
	GI_visMoniker = '>', "Subscript (>)";
	GBI_identifier = TS_SUBSCRIPT;
}

@end TextStyleControlUI

/*
 * Toolbox UI
 */

@start TextStyleControlToolboxUI, notDetachable ;

@object GenItemGroupClass PlainTextToolList = {
	GI_states = @default & ~GS_USABLE;
	GI_comp = @PlainTextToolEntry;
	GIGI_applyMsg = MSG_TSC_PLAIN_TEXT_CHANGE;
	GIGI_destination = (TO_OBJ_BLOCK_OUTPUT);
	HINT_TOOLBOX;
}

@object GenItemClass PlainTextToolEntry = {
	GI_visMoniker = " P ";
	GII_identifier = 0;
}

/* --- */

@object GenBooleanGroupClass TextStyleToolList = {
	GI_states = @default & ~GS_USABLE;
	GI_comp = @BoldToolEntry, @ItalicToolEntry, @UnderlineToolEntry,
		  @StrikeThruToolEntry, @SuperscriptToolEntry,
	    	  @SubscriptToolEntry;
	GBGI_applyMsg = MSG_TSC_STYLE_CHANGE;
	GBGI_destination = (TO_OBJ_BLOCK_OUTPUT);
	HINT_TOOLBOX;
}

@object GenBooleanClass BoldToolEntry = {
	GI_visMoniker = " B ";
	GBI_identifier = TS_BOLD;
}

@object GenBooleanClass ItalicToolEntry = {
	GI_visMoniker = " I ";
	GBI_identifier = TS_ITALIC;
}

@object GenBooleanClass UnderlineToolEntry = {
	GI_visMoniker = " U ";
	GBI_identifier = TS_UNDERLINE;
}

@object GenBooleanClass StrikeThruToolEntry = {
	GI_visMoniker = " S ";
	GBI_identifier = TS_STRIKE_THRU;
}

@object GenBooleanClass SuperscriptToolEntry = {
	GI_visMoniker = " < ";
	GBI_identifier = TS_SUPERSCRIPT;
}

@object GenBooleanClass SubscriptToolEntry = {
	GI_visMoniker = " > ";
	GBI_identifier = TS_SUBSCRIPT;
}

@end TextStyleControlToolboxUI

/*
 * Strings for controllers
 */

@start ControlStrings, data ;

@chunk char TSCName[] = "Text Style";

@chunk char SuperscriptName[] = "Superscript";
@chunk char SubscriptName[] = "Subscript";
@chunk char StrikeThruName[] = "Strike Thru";
@chunk char UnderlineName[] = "Underline";
@chunk char ItalicName[] = "Italic";
@chunk char BoldName[] = "Bold";
@chunk char PlainTextName[] = "Plain Text";

@end ControlStrings

/*
 ***************************************************************************
 *		Code for UICTextStyleControlClass
 ***************************************************************************
 */


/***********************************************************************
 *
 * MESSAGE: 	MSG_GEN_CONTROL_GET_INFO for UICTextStyleControlClass
 *
 * DESCRIPTION:	Return information for building the controller
 *
 * PARAMTERS:
 *	(GenControlBuildInfo *info)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	11/18/91		Initial Revision
 *
 ***********************************************************************/
@method UICTextStyleControlClass, MSG_GEN_CONTROL_GET_INFO
{
	word size;
	HugeArrayDirectory *elemPtr;
#ifdef __HIGHC__
_pragma_const_in_code;
#endif

    static const char TSC_IniFileKey[] = "textStyleControl";

    static const GCNListType TSC_gcnList[] = {
	{MANUFACTURER_ID_GEOWORKS, GAGCNLT_APP_TARGET_NOTIFY_TEXT_CHAR_ATTR_CHANGE}
    };

    static const NotificationType TSC_notifyTypeList[] = {
	{MANUFACTURER_ID_GEOWORKS, GWNT_TEXT_CHAR_ATTR_CHANGE}
    };

    /* --- */

    static const GenControlChildInfo TSC_childList[] = {
	{OptrToChunk(@PlainTextList), TSCF_PLAIN, GCCF_IS_DIRECTLY_A_FEATURE},
	{OptrToChunk(@TextStyleList), TSCF_BOLD|TSCF_ITALIC|TSCF_UNDERLINE|TSCF_STRIKE_THRU|
				    TSCF_SUBSCRIPT|TSCF_SUPERSCRIPT, 0}
    };

    /*
     * Careful, this table is in the *opposite* order as the record which
     * it corresponds to.
     */

    static const GenControlFeaturesInfo TSC_featuresList[] = {
	{OptrToChunk(@SuperscriptEntry), @SuperscriptName, 0},
	{OptrToChunk(@SubscriptEntry), @SubscriptName, 0},
	{OptrToChunk(@StrikeThruEntry), @StrikeThruName, 0},
	{OptrToChunk(@UnderlineEntry), @UnderlineName, 0},
	{OptrToChunk(@ItalicEntry), @ItalicName, 0},
	{OptrToChunk(@BoldEntry), @BoldName, 0},
	{OptrToChunk(@PlainTextList), @PlainTextName, 0}
    };

    /* --- */

    static const GenControlChildInfo TSC_toolList[] = {
	{OptrToChunk(@PlainTextToolList), TSCTF_PLAIN, GCCF_IS_DIRECTLY_A_FEATURE},
	{OptrToChunk(@TextStyleToolList), TSCTF_BOLD|TSCTF_ITALIC|TSCTF_UNDERLINE|
			TSCTF_STRIKE_THRU|TSCTF_SUBSCRIPT|TSCTF_SUPERSCRIPT, 0}
    };

    /*
     * Careful, this table is in the *opposite* order as the record which
     * it corresponds to.
     */

    static const GenControlFeaturesInfo TSC_toolFeaturesList[] = {
	{OptrToChunk(@SuperscriptToolEntry), @SuperscriptName, 0},
	{OptrToChunk(@SubscriptToolEntry), @SubscriptName, 0},
	{OptrToChunk(@StrikeThruToolEntry), @StrikeThruName, 0},
	{OptrToChunk(@UnderlineToolEntry), @UnderlineName, 0},
	{OptrToChunk(@ItalicToolEntry), @ItalicName, 0},
	{OptrToChunk(@BoldToolEntry), @BoldName, 0},
	{OptrToChunk(@PlainTextToolList), @PlainTextName, 0}
    };

    /* The ## denote fields filled in dynamically */

    static GenControlBuildInfo TSC_dupInfo = {
	GCBF_SUSPEND_ON_APPLY,		    /* GCBI_flags */
	TSC_IniFileKey,			    /* GCBI_initFileKey */
	TSC_gcnList,			    /* GCBI_gcnList */
	ARRAY_LEN(TSC_gcnList,GCNListType), /* GCBI_gcnCount */
	TSC_notifyTypeList,		    /* GCBI_notificationList */
	ARRAY_LEN(TSC_notifyTypeList, NotificationType),
					    /* GCBI_notificationCount */
	@TSCName,			    /* GCBI_controllerName */

	/* ## */ NullHandle,		    /* GCBI_dupBlock */
	TSC_childList,			    /* GCBI_childList */
	ARRAY_LEN(TSC_childList, GenControlChildInfo),
					    /* GCBI_childCount */
	TSC_featuresList,		    /* GCBI_featuresList */
	ARRAY_LEN(TSC_featuresList, GenControlFeaturesInfo),
					    /* GCBI_featuresCount */
	TSC_DEFAULT_FEATURES,		    /* GCBI_features */

	/* ## */ NullHandle,		    /* GCBI_toolBlock */
	TSC_toolList,			    /* GCBI_toolList */
	ARRAY_LEN(TSC_toolList, GenControlChildInfo),
					    /* GCBI_toolCount */
	TSC_toolFeaturesList,		    /* GCBI_toolFeaturesList */
	ARRAY_LEN(TSC_toolFeaturesList, GenControlFeaturesInfo),
					    /* GCBI_toolFeaturesCount */
	TSC_DEFAULT_TOOLBOX_FEATURES	    /* GCBI_toolFeatures */
    };

#ifdef __HIGHC__
_pragma_end_const_in_code;
#endif

    /*
     * Copy our structure which contains most of the correct
     * fields (everything that can be correct given compiler limitations)
     */
    memcpy(info, MemLockFixedOrMovable((void*)(&TSC_dupInfo)),
					sizeof(GenControlBuildInfo));
    MemUnlockFixedOrMovable((void*)&TSC_dupInfo);
    /*
     * Fill in the rest of the fields by hand
     */
    info->GCBI_dupBlock = HandleOf(@PlainTextList);
    info->GCBI_toolBlock = HandleOf(@PlainTextToolList);

	HugeArrayLock(NullHandle, NullHandle, 1, &elemPtr, &size);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_TSC_PLAIN_TEXT_CHANGE for UICTextStyleControlClass
 *
 * DESCRIPTION:	Handle a change in the "Plain" state
 *
 * PARAMTERS:
 *	void (word selection, word numSelections, byte stateFlags)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	11/18/91	Initial Revision
 *	eb	11/21/94	swapped order of VisTextRange params
 *	RainerB 11/19/2022	VIS_TEXT_RANGE_SELECTION must be the last parameter
 *
 ***********************************************************************/
@method UICTextStyleControlClass, MSG_TSC_PLAIN_TEXT_CHANGE
{
    EventHandle msg;

    msg = @record VisTextClass::MSG_VIS_TEXT_SET_TEXT_STYLE(0, 0,
					     0xff, 0,
					     0, VIS_TEXT_RANGE_SELECTION);
    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_TSC_STYLE_CHANGE for UICTextStyleControlClass
 *
 * DESCRIPTION:	Handle change to style list
 *
 * PARAMTERS:
 *	void (word selectedBooleans, word indeterminateBooleans,
 *	      word modifiedBooleans)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	11/18/91	Initial Revision
 *	eb	11/21/94	swapped order of VisTextRange params
 *	RainerB 11/19/2022	VIS_TEXT_RANGE_SELECTION must be the last parameter
 *
 ***********************************************************************/
@method UICTextStyleControlClass, MSG_TSC_STYLE_CHANGE
{
    EventHandle msg;

    msg = @record VisTextClass::MSG_VIS_TEXT_SET_TEXT_STYLE(0, 0,
					 ~selectedBooleans & modifiedBooleans,
					 selectedBooleans & modifiedBooleans,
					 0, VIS_TEXT_RANGE_SELECTION);
					 /* Pass VIS_TEXT_RANGE_SELECTION as rangeStart and zero as
					  * rangeEnd to use the selected text range as target range. RB
					  */
    @send self::MSG_GEN_OUTPUT_ACTION(msg, pself->GCI_output);
}

/***********************************************************************
 *
 * MESSAGE:	MSG_GEN_CONTROL_UPDATE_UI for UICTextStyleControlClass
 *
 * DESCRIPTION:	Handle notification of attributes change
 *
 * PARAMTERS:
 *	void (MemHandle toolBlock, MemHandle childBlock,
 *	      WordFlags toolboxFeatures, WordFlags features, MemHandle data,
 *	      word changeID, ManufacturerID manufIDA)
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	11/18/91		Initial Revision
 *
 ***********************************************************************/
#define TOOL_LIST_FEATURES (TSCF_BOLD|TSCF_ITALIC|TSCF_UNDERLINE|\
			    TSCF_STRIKE_THRU|TSCF_SUBSCRIPT|TSCF_SUPERSCRIPT)

@method UICTextStyleControlClass, MSG_GEN_CONTROL_UPDATE_UI
{
    VisTextNotifyCharAttrChange *ndata;
    word styles, diffs;

    /*
     * Get the data that we need to update from the block passed
     */
    ndata = (VisTextNotifyCharAttrChange *) MemLock(data);
    styles = ndata->VTNCAC_charAttr.VTCA_textStyles;
    diffs = ndata->VTNCAC_charAttrDiffs.VTCAD_textStyles;
    MemUnlock(data);

    /*
     * Set the text style list
     */
    if (features & (TSCF_BOLD|TSCF_ITALIC|TSCF_UNDERLINE|TSCF_STRIKE_THRU|
		    TSCF_SUBSCRIPT|TSCF_SUPERSCRIPT)) {
    	@send childBlock,(ChunkHandle)@TextStyleList::
		MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(styles, diffs);
    }

    /*
     * Set the plain text list
     */
    if (features & TSCF_PLAIN) {
	@send childBlock, (ChunkHandle)@PlainTextList::
		MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(styles, diffs);
    }

    /*
     * Set text style tool
     */
    if (toolboxFeatures & TOOL_LIST_FEATURES) {
    	@send toolBlock, (ChunkHandle)@TextStyleToolList::
		MSG_GEN_BOOLEAN_GROUP_SET_GROUP_STATE(styles, diffs);
    }

    /*
     * Set the plain text tool list
     */
    if (toolboxFeatures & TSCTF_PLAIN) {
	@send toolBlock, (ChunkHandle)@PlainTextToolList::
		MSG_GEN_ITEM_GROUP_SET_SINGLE_SELECTION(styles, diffs);
    }
}
