/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

	Copyright (c) Geoworks 1992 -- All Rights Reserved

PROJECT:	Sample Applications
MODULE:		GenView main test app
FILE:		viewsamp.goc

AUTHOR:		Tom Manshreck, Oct 27, 1992

ROUTINES:
	Name			Description
	----			-----------

REVISION HISTORY:
	Name	Date		Description
	----	----		-----------
	TM	10/27/92   	Initial version.
	RainerB	8/7/2022	MSG_UNZOOM_IN_Y: Zoom factor limited to values >= 1

DESCRIPTION:
	This sample application demonstrates the use of the GenView
	object. Full treatment of this object is located within
	Chapter 9 of the Objects book.

	The GenView object provides your application with a window to
	display data within. This data may be graphical or text, a
	generic object tree, or a visible object tree. The GenView
	allows a scrollable, sizable, and scalable window that can
	adjust the display of its data based on the View attributes. 

	The GenView sends out messages that define how your data is
	drawn. You must have an object to receive these messages; this
	object is known as the view's *content* object. The content
	object may be one of three different classes depending on what
	type of data you wish to display.

	If you are displaying just standard graphics, you will want
	the content to be a subclass of GenProcessClass. Your subclass
	should intercept MSG_META_EXPOSED and handle drawing the
	graphics within that handler. This is the model used in this
	sample application.

	If you are displaying a tree of Vis objects, you will need a
	VisContent to act as the View's content object. See the Vis
	sample apps for details on how to use this model.

	If you are displaying a tree of generic objects, you will 
	a GenContent object to act as the View's content object. This
	approach is the least common. See the View/GenContent sample
	app for a demonstration using this model.
	

	$Id: viewsamp.goc,v 1.1 97/04/04 16:36:16 newdeal Exp $
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/
/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

@class	ViewSampProcessClass, GenProcessClass ;

/* define methods for this class here. */

@message void MSG_ZOOM_IN_X();
@message void MSG_UNZOOM_IN_X();
@message void MSG_ZOOM_IN_Y();
@message void MSG_UNZOOM_IN_Y();

@endc   /* end of class definition */

@classdecl	ViewSampProcessClass, neverSaved ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

@start	AppResource ;

@object GenApplicationClass ViewSampApp = {

    GI_visMoniker = list { @ViewSampTextMoniker }
    GI_comp = @ViewSampPrimary;
    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @ViewSampPrimary;
}

@visMoniker ViewSampTextMoniker = "C ViewSamp Sample Application";

@end	AppResource

@start	Interface		/* this resource is for misc UI objects */ ;

@object GenPrimaryClass ViewSampPrimary  = {

    GI_comp = @ViewSampView, 
              @ScrollUpTrigger,
              @ScrollDownTrigger,
              @ScrollLeftTrigger,
              @ScrollRightTrigger,
              @ZoomInXTrigger,
              @UnzoomInXTrigger,
              @ZoomInYTrigger,
              @UnzoomInYTrigger;

    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;
}

/*
 *		GenView object
 *
 * This GenView object creates a window where the application can display
 * portions of the document as necessary. As we want this window to be
 * scrollable, the specific UI (Motif) will create scroll bars which the
 * user can interact with. Whenever a portion of the window needs to be
 * redrawn, the GenView object will invalidate a portion of the window,
 * causing a MSG_META_EXPOSED to be sent to the content object of this
 * application. (The content object in this case is the process.) The
 * application will draw the document into the window as requested.
 * The window keeps track of a mask, which is used to clip the
 * application's drawing operations, so that only the invalid portion
 * of the window is drawn to. 
 */

@object GenViewClass ViewSampView = {

    /* 
     * Make view scrollable in X and Y. Also make sure that the
     * GenView remains no larger than its content object. 
     */

    GVI_horizAttrs = @default | GVDA_SCROLLABLE | GVDA_NO_LARGER_THAN_CONTENT;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE | GVDA_NO_LARGER_THAN_CONTENT;

    /* Set some document bounds (we'll just use 8 1/2 by 11 inches) */
    GVI_docBounds = {0, 0, 72*17/2, 11*72};

    /*
     * When the contents of this view (i.e. the document) must be updated,
     * the UI should send a MSG_META_EXPOSED to the ViewSampProcessClass
     * object.
     */

    GVI_content = process;

    /*
     * This view will not take text input, so specify that no floating
     * keyboard should come up. Otherwise, we would get a floating
     * keyboard by default on pen-based systems.
     */
     ATTR_GEN_VIEW_DOES_NOT_ACCEPT_TEXT_INPUT;
}

/*
 * This trigger scrolls the GenView's display up one increment amount.
 * Double-clicking on the trigger scrolls the View to the top.
 */
@object GenTriggerClass ScrollUpTrigger = {
    GI_visMoniker = "Up";
    GTI_destination = ViewSampView;
    GTI_actionMsg = MSG_GEN_VIEW_SCROLL_UP;
    ATTR_GEN_TRIGGER_CUSTOM_DOUBLE_PRESS = MSG_GEN_VIEW_SCROLL_TOP;  
}

/*
 * This trigger scrolls the GenView's display down one increment amount.
 * Double-clicking on the trigger scrolls the View to the bottom.
 */
@object GenTriggerClass ScrollDownTrigger = {
    GI_visMoniker = "Down";
    GTI_destination = ViewSampView;
    GTI_actionMsg = MSG_GEN_VIEW_SCROLL_DOWN;
    ATTR_GEN_TRIGGER_CUSTOM_DOUBLE_PRESS = MSG_GEN_VIEW_SCROLL_BOTTOM;
}

/*
 * This trigger scrolls the GenView's display left one increment.
 * Double-clicking on the trigger scrolls the View to the left edge.
 */
@object GenTriggerClass ScrollLeftTrigger = {
    GI_visMoniker = "Left";
    GTI_destination = ViewSampView;
    GTI_actionMsg = MSG_GEN_VIEW_SCROLL_LEFT;
    ATTR_GEN_TRIGGER_CUSTOM_DOUBLE_PRESS = MSG_GEN_VIEW_SCROLL_LEFT_EDGE;
}

/*
 * This trigger scrolls the GenView's display right one increment.
 * Double-clicking on the trigger scrolls the View to the right edge.
 */
@object GenTriggerClass ScrollRightTrigger = {
    GI_visMoniker = "Right";
    GTI_destination = ViewSampView;
    GTI_actionMsg = MSG_GEN_VIEW_SCROLL_RIGHT;
    ATTR_GEN_TRIGGER_CUSTOM_DOUBLE_PRESS = MSG_GEN_VIEW_SCROLL_RIGHT_EDGE;
}

/*
 * This trigger zooms the GenView's display in the X direction one
 * increment by adjusting the GenView's scale factor.
 */
@object GenTriggerClass ZoomInXTrigger = {
    GI_visMoniker = "Zoom in X";
    GTI_destination = process;
    GTI_actionMsg = MSG_ZOOM_IN_X;
}

/*
 * This trigger unzooms the GenView's display in the X direction one
 * increment by adjusting the GenView's scale factor.
 */
@object GenTriggerClass UnzoomInXTrigger = {
    GI_visMoniker = "Unzoom in X";
    GTI_destination = process;
    GTI_actionMsg = MSG_UNZOOM_IN_X;
}

/*
 * This trigger zooms the GenView's display in the Y direction one
 * increment by adjusting the GenView's scale factor.
 */
@object GenTriggerClass ZoomInYTrigger = {
    GI_visMoniker = "Zoom in Y";
    GTI_destination = process;
    GTI_actionMsg = MSG_ZOOM_IN_Y;
}

/*
 * This trigger unzooms the GenView's display in the Y direction one
 * increment by adjusting the GenView's scale factor.
 */
@object GenTriggerClass UnzoomInYTrigger = {
    GI_visMoniker = "Unzoom in Y";
    GTI_destination = process;
    GTI_actionMsg = MSG_UNZOOM_IN_Y;
}

@end Interface

/*
 ***************************************************************************
 *		Code for ViewSampProcessClass
 ***************************************************************************
 */

/* 
 * Declare this routine here because it is used in the
 * MSG_META_EXPOSED handler below.
 */
void ViewSampDrawText(GStateHandle gstate);


/***********************************************************************
 *		MSG_META_EXPOSED for ViewSampProcessClass
 ***********************************************************************
 * SYNOPSIS:	This message is sent by the windowing system when we 
 *		must redraw a portion of the document in the View
 *		area. It is sent anytime a portion of the window that
 *		is visible has become invalid and needs to be redrawn
 *		or whenever a portion becomes newly visible.
 * 		
 * PARAMETERS:	    
 *	void (WindowHandle win)
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *		Correct response is to create a GState on the passed
 * 		window, call GrBeginUpdate() with that gstate, redraw
 * 		the window, finish by calling GrEndUpdate(). Drawing
 *		will be clipped to the invalid area of the window at
 *		the time that GrBeginUpdate() is called.
 *		Invalidations occuring during the redraw will result
 *		in the reduction in the size of the update region, and
 *		result in another MSG_META_EXPOSED being generated, to
 *		repair the new "invalid" area.
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method ViewSampProcessClass, MSG_META_EXPOSED
{
    GStateHandle gstate;

    /*
     * Create a default graphics state that we can use while drawing
     * to the GenView.
     */
    gstate = GrCreateState(win);

    /*
     * GrBeginUpdate() starts a window update. This tells the windowing
     * system that we are in the process of drawing to this window.
     * This routine should be called by application to update exposed
     * region, on reciept of MSG_META_EXPOSED.
     */
    GrBeginUpdate(gstate);

    /*
     * If we had background graphics to draw, we would call the
     * apropriate graphics routines now.
     */

    /*
     * Draw the text into the window using our own routine.
     */
    ViewSampDrawText(gstate);

    /*
     * Now indicate that we are done drawing to the window and free the gstate.
     */
    GrEndUpdate(gstate);

    /*
     * Remember to destroy any gstates created that are no longer
     * needed. 
     */
    GrDestroyState(gstate);
}


/***********************************************************************
 *				ViewSampDrawText
 ***********************************************************************
 * SYNOPSIS:	This routine draws a simple line of text onto the   
 *		document.
 *
 * CALLED BY:	MSG_META_EXPOSED handler for ViewSampProcessClass
 *   
 * RETURN:	Nothing. 
 *   
 * SIDE EFFECTS:    
 *
 * STRATEGY:	    
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/

/* These constants are used in the code below: */

#define TEXT_POINT_SIZE		48.0	/* point size */
#define TEXT_ROTATION		(360.0-15)	/* angle of rotation */
#define TEXT_X_POSITION		30	/* x position, in document coords. */
#define TEXT_Y_POSITION		0	/* y position, in document coords. */

void
ViewSampDrawText(
    GStateHandle gstate)		/* GState to draw to. */
{
    /*
     * First we change some of the default GState values, such as the
     * font. Text drawn in this gstate will be in URW_SANS with a
     * point size of 48. 
     */
    GrSetFont(gstate, FID_DTC_URW_SANS, MakeWWFixed(TEXT_POINT_SIZE));

    /*
     * Set the text color to light blue.
     */
    GrSetTextColor(gstate, CF_INDEX, C_LIGHT_BLUE, 0, 0);

    /*
     * Apply a rotation to the transformation matrix, so the text
     * will be drawn at an angle.
     */
/*    GrApplyRotation(gstate, MakeWWFixed(TEXT_ROTATION)); */

    /*
     * Finally, Draw the text onto the document at the passed
     * coordinate position. The text will start at this position.
     */
    GrDrawText(gstate, 
		TEXT_X_POSITION,
		TEXT_Y_POSITION,
		"The quick brown fox jumped.", 
		0	/* 
			 * Text is null-terminated, so pass zero for
			 * the size.
			 */);
}


/***********************************************************************
 *		MSG_ZOOM_IN_X for ViewSampProcessClass
 ***********************************************************************
 * SYNOPSIS:	This message zooms the View horizontally by altering
 *		the scale factor in the X direction. The scale factor
 *		is bumped up one each time this message is called.   
 * PARAMETERS:
 *	void()	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method ViewSampProcessClass, MSG_ZOOM_IN_X
{
    GetScaleParams newScaleFactor;

    /*
     * First retreive the current scale factor of the GenView object.
     * This also locks the object block so that we can alter the
     * instance data. 
     */
    @call ViewSampView::MSG_GEN_VIEW_GET_SCALE_FACTOR(&newScaleFactor);

    /*
     * Bump up the scale factor in the X direction by one.
     */
    newScaleFactor.GSP_xScaleFactor += MakeWWFixed(1.0);

    /*
     * Reset the scale factor of the GenView to the new set of scale
     * factors. (GSP_yScaleFactor remains unchanged.)
     */
    @call ViewSampView::MSG_GEN_VIEW_SET_SCALE_FACTOR(
	0L, 0L, SVT_AROUND_UPPER_LEFT,
	newScaleFactor.GSP_yScaleFactor,
	newScaleFactor.GSP_xScaleFactor);
}


/***********************************************************************
 *		MSG_UNZOOM_IN_X for ViewSampProcessClass
 ***********************************************************************
 * SYNOPSIS:	This message reduces the scale factor in the X
 *		direction by one each time the message is called,
 *		until a scale factor of zero is reached. If
 *		the scale factor is already zero, this message does
 *		nothing.   
 * PARAMETERS:
 *	void()	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method ViewSampProcessClass, MSG_UNZOOM_IN_X
{
    GetScaleParams newScaleFactor;

    /*
     * First retreive the current scale factor of the GenView object.
     * This also locks the object block so that we can alter the
     * instance data. 
     */
    @call ViewSampView::MSG_GEN_VIEW_GET_SCALE_FACTOR(&newScaleFactor);

    /*
     * If the scale factor is currently greater than or equal to one,
     * decrement it by one.
     */
    if (newScaleFactor.GSP_xScaleFactor > MakeWWFixed(1.0)) {
	newScaleFactor.GSP_xScaleFactor -= MakeWWFixed(1.0);
    }

    /*
     * Reset the scale factor of the GenView to the new set of scale
     * factors. (GSP_yScaleFactor remains unchanged.)
     */
    @call ViewSampView::MSG_GEN_VIEW_SET_SCALE_FACTOR(
	0L, 0L, SVT_AROUND_UPPER_LEFT,
	newScaleFactor.GSP_yScaleFactor,
	newScaleFactor.GSP_xScaleFactor);
}


/***********************************************************************
 *		MSG_ZOOM_IN_Y for ViewSampProcessClass
 ***********************************************************************
 * SYNOPSIS:	This message zooms the View horizontally by altering
 *		the scale factor in the X direction. The scale factor
 *		is bumped up one each time this message is called.
 * 
 * PARAMETERS:
 *	void()	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *
 ***********************************************************************/
@method ViewSampProcessClass, MSG_ZOOM_IN_Y
{
    GetScaleParams newScaleFactor;

    /*
     * First retreive the current scale factor of the GenView object.
     * This also locks the object block so that we can alter the
     * instance data. 
     */
    @call ViewSampView::MSG_GEN_VIEW_GET_SCALE_FACTOR(&newScaleFactor);

    /*
     * Bump up the scale factor in the Y direction by one.
     */
    newScaleFactor.GSP_yScaleFactor += MakeWWFixed(1.0);

    /*
     * Reset the scale factor of the GenView to the new set of scale
     * factors. (GSP_xScaleFactor remains unchanged.)
     */
    @call ViewSampView::MSG_GEN_VIEW_SET_SCALE_FACTOR(
	0L, 0L, SVT_AROUND_UPPER_LEFT,
	newScaleFactor.GSP_yScaleFactor,
	newScaleFactor.GSP_xScaleFactor);

}


/***********************************************************************
 *		MSG_UNZOOM_IN_Y for ViewSampProcessClass
 ***********************************************************************
 * SYNOPSIS:	This message reduces the scale factor in the Y
 *		direction by one each time the message is called,
 *		until a scale factor of zero is reached. If
 *		the scale factor is already zero, this message does
 *		nothing.   
 *    
 * PARAMETERS:
 *	void()	    
 * SIDE EFFECTS:    
 *
 * STRATEGY:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	TM	10/27/92   	Initial Revision
 *	RainerB	8/7/2022	Zoom factor limited to values >= 1
 *
 ***********************************************************************/
@method ViewSampProcessClass, MSG_UNZOOM_IN_Y
{
    GetScaleParams newScaleFactor;

    /*
     * First retreive the current scale factor of the GenView object.
     * This also locks the object block so that we can alter the
     * instance data. 
     */
    @call ViewSampView::MSG_GEN_VIEW_GET_SCALE_FACTOR(&newScaleFactor);

    /*
     * If the scale factor is currently greater than or equal to one,
     * decrement it by one.
     */
    if (newScaleFactor.GSP_yScaleFactor > MakeWWFixed(1.0)) {
	newScaleFactor.GSP_yScaleFactor -= MakeWWFixed(1.0);
    }

    /*
     * Reset the scale factor of the GenView to the new set of scale
     * factors. (GSP_xScaleFactor remains unchanged.)
     */
    @call ViewSampView::MSG_GEN_VIEW_SET_SCALE_FACTOR(
	0L, 0L, SVT_AROUND_UPPER_LEFT,
	newScaleFactor.GSP_yScaleFactor,
	newScaleFactor.GSP_xScaleFactor);
}

