/***********************************************************************
 *
 *	Copyright (c) Geoworks 1991 -- All Rights Reserved
 *
 * PROJECT:	GEOS
 * MODULE:	GenContent (Sample GEOS application)
 * FILE:	GenContent.goc
 * AUTHOR:	Tony Requist: April 1, 1991
 *			RainerB:	  August 7, 2022: HINT_INITAL_SIZE added to the View
 *
 * DESCRIPTION:
 *	This file source code for the GenContent application. This code will
 *	be compiled by GOC, and then linked by the GLUE linker to produce
 *	a runnable .geo application file.
 *
 * RCS STAMP:
 *	$Id: gencontent.goc,v 1.1 97/04/04 16:36:19 newdeal Exp $
 *
 ***********************************************************************/

/*
 ***************************************************************************
 *		Include files
 ***************************************************************************
 */

@include <stdapp.goh>

/*
 ***************************************************************************
 *		Class & Message Definitions
 ***************************************************************************
 */

/*
 * Here we define "GenContentProcessClass" as a subclass of the system provided
 * "GenProcessClass". As this application is launched, an instance of this class
 * will be created, and will handle all application-related events (messages).
 * The application thread will be responsible for running this object,
 * meaning that whenever this object handles a method, we will be executing
 * in the application thread.
 */

@class	GenContentProcessClass, GenProcessClass ;

/* define methods for this class here. */

@message void MSG_TOGGLE_VIEW_USABLE();
@message void MSG_TOGGLE_VIEW_CONTENTS_USABLE();
@message void MSG_TOGGLE_VALUE_USABLE();
@message void MSG_TOGGLE_VALUE_ENABLED();

@endc   /* end of class definition */

/*
 * This class definition must be stored in memory at runtime, so that
 * the GEOS messaging system can examine it.
 *
 * The neverSaved flag is necessary because ProcessClass objects are
 * hybrid objects.
 */

@classdecl	GenContentProcessClass, neverSaved ;

/*
 ***************************************************************************
 *		UI Objects
 ***************************************************************************
 */

/*
 *		Application Object
 *
 * The very top-level generic object of an application MUST be a GenApplication
 * object. The gencontent.gp file contains "appobj" statement which indicates
 * that this "GenContentApp" object is in fact the top-level UI object.
 * This object should be in its own resource so that GeoManager can load it
 * quickly to grab the icon for this application. GeoManager will store this
 * icon in its "Token Database", so that the icon image can be reused quickly.
 */

@start	AppResource ;

@object GenApplicationClass GenContentApp = {

    /*
     * The geoManager uses this token information to store this application's
     * icon in a database.
     *
     * Four letters used as index to refer to this application in the token
     * database.
     */


    GI_visMoniker = list { @GenContentTextMoniker }

    /*
     * Manufacturer ID number. Also used for accessing database, to ensure
     * uniqueness.
     */


    /*
     * The GenApplication object only has one child: the main application
     * window.
     */

    GI_comp = @GenContentPrimary;

    /*
     * The main window should appear on-screen when the application is
     * launched.
     */

    gcnList(MANUFACTURER_ID_GEOWORKS,GAGCNLT_WINDOWS) = @GenContentPrimary;
}

@visMoniker GenContentTextMoniker = "C GenContent Sample Application";

@end	AppResource

/*
 *		Primary window
 *
 * Every application has at least one GenPrimary object. This object serves
 * as the main window of the application. Inside this window, various UI
 * components, such as menus or lists, can be placed.
 */

@start	Interface		/* this resource is for misc UI objects */ ;

@object GenPrimaryClass GenContentPrimary  = {

    GI_comp = @ViewUsable, @ViewContentsUsable, @GenContentView;	
		
    ATTR_GEN_DISPLAY_NOT_MINIMIZABLE;
    HINT_SIZE_WINDOW_AS_DESIRED;

}

/*
 *		GenView object
 *
 * This GenView object creates a window where the application can display
 * portions of the document as necessary. As we want this window to be
 * scrollable, the specific UI (Motif) will create scroll bars which the
 * user can interact with. Whenever a portion of the window needs to be
 * redrawn, the GenView object will invalidate a portion of the window,
 * causing a MSG_META_EXPOSED to be sent to the application. The application
 * will draw the document into the window as requested. The window keeps
 * track of a mask, which is used to clip the application's drawing operations,
 * so that only the invalid portion of the window is drawn to.
 */

@object GenViewClass GenContentView = {

    /* Make view scrollable in X and Y */

    GVI_horizAttrs = @default | GVDA_SCROLLABLE;
    GVI_vertAttrs  = @default | GVDA_SCROLLABLE;

    /* Let the view know that its contents are generic. */

    GVI_attrs = @default | GVA_GENERIC_CONTENTS | GVA_SAME_COLOR_AS_PARENT_WIN |
                           GVA_SEND_ALL_KBD_CHARS;

    /*
     * when the contents of this view (i.e. the document) must be updated,
     * the UI should send a MSG_META_EXPOSED to the GenContentProcessClass
     * object.
     */

    GVI_content = GenContentContent;

    /* 
     * For the fun of it, we'll put some triggers next to the horizontal
     * scrollbar.
     */
/*    GI_comp = ValueUsable, ValueEnabled; */


    /* We want to make an object inside the view as the focus.  Mark the
     * view as getting the default focus at this level.
     */
    HINT_DEFAULT_FOCUS;  
    
    /* Set a larger initial size for the view so that most objects can be
     * seen initially.
     */    
    HINT_INITIAL_SIZE = SST_PIXELS | 400, SST_PIXELS | 200;
}


@object GenTriggerClass ViewUsable = {
  GI_visMoniker = "Toggle view usable";
  GTI_actionMsg = MSG_TOGGLE_VIEW_USABLE;
  GTI_destination = process;
}
@object GenTriggerClass ViewContentsUsable = {
  GI_visMoniker = "Toggle view contents usable";
  GTI_actionMsg = MSG_TOGGLE_VIEW_CONTENTS_USABLE;
  GTI_destination = process;
}

/*
@object GenTriggerClass ValueUsable = {
  GI_visMoniker = "Toggle value usable";
  GTI_actionMsg = MSG_TOGGLE_VALUE_USABLE;   
  GTI_destination = process;
  HINT_SEEK_X_SCROLLER_AREA;
}
@object GenTriggerClass ValueEnabled = {
  GI_visMoniker = "Toggle value enabled";
  GTI_actionMsg = MSG_TOGGLE_VALUE_ENABLED;  
  GTI_destination = process;
  HINT_SEEK_X_SCROLLER_AREA;
}
*/

@end Interface

@start ContentInterface ;


@object GenContentClass GenContentContent = {
  GCI_genView = GenContentView;
  GI_comp = @Honk, @Snort, @Whiffle, @MyValue; 
}

@object GenTriggerClass Honk = {
  GI_visMoniker = "Honk";
}
@object GenTextClass Snort = {
  GTXI_text = "Snort";
  HINT_DEFAULT_FOCUS;
}
@object GenItemGroupClass Whiffle = {
  GI_comp = @One, @Two, @Three, @Four, @Five, @Six;
  GI_visMoniker = "Whiffle";
  HINT_ALLOW_CHILDREN_TO_WRAP;
}
@object GenItemClass One = {
  GI_visMoniker = "One";
  GII_identifier = 0;
}
@object GenItemClass Two = {
  GI_visMoniker = "Two";
  GII_identifier = 1;
}
@object GenItemClass Three = {
  GI_visMoniker = "Three";
  GII_identifier = 2;
}
@object GenItemClass Four = {
  GI_visMoniker = "Four";
  GII_identifier = 3;
}
@object GenItemClass Five = {
  GI_visMoniker = "Five";
  GII_identifier = 4;
}
@object GenItemClass Six = {
  GI_visMoniker = "Six";
  GII_identifier = 5;
}

@object GenValueClass MyValue = {
  GI_visMoniker = "You are number: ";
  GVLI_value = 6;
}

@end ContentInterface

/*
 ***************************************************************************
 *		Code for GenContentProcessClass
 ***************************************************************************
 */

/***********************************************************************
 *
 * MESSAGE:	GenContentProcessExposed -- MSG_META_EXPOSED for GenContentProcessClass
 *
 * DESCRIPTION:	This method is sent by the Windowing System when we must
 *		redraw a portion of the document in the View area.
 *
 * PARAMTERS:
 *	void (WindowHandle win)
 *
 * STRATEGY:
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	tony	4/91		Initial Revision
 *
 ***********************************************************************/
@method GenContentProcessClass, MSG_META_EXPOSED
{
    GStateHandle gstate;
    /*
     * Get a default graphics state that we can use while drawing.
     */
    gstate = GrCreateState(win);
    /*
     * Start a window update. This tells the windowing system that we are in
     * the process of drawing to this window.
     */
    GrBeginUpdate(gstate);
    /*
     * Draw stuff here.
     */

    /*
     * Now indicate that we are done drawing to the window and free the gstate.
     */
    GrEndUpdate(gstate);
    GrDestroyState(gstate);
}



/***********************************************************************
 *
 * MESSAGE:	MSG_TOGGLE_VIEW_USABLE for GenContentProcessClass
 *
 * DESCRIPTION:	Toggles view usable.
 *
 * PARAMETERS:  void ()
 *
 * STRATEGY:
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	12/ 6/91		Initial Revision
 *
 ***********************************************************************/
@method GenContentProcessClass, MSG_TOGGLE_VIEW_USABLE {
  if (@call GenContentView::MSG_GEN_GET_USABLE()) {
    @call GenContentView::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
  } else {
    @call GenContentView::MSG_GEN_SET_USABLE(VUM_NOW);
  }
}


/***********************************************************************
 *
 * MESSAGE:	MSG_TOGGLE_VIEW_CONTENTS_USABLE for GenContentProcessClass
 *
 * DESCRIPTION:	Toggles view contents usable.
 *
 * PARAMETERS:  void ()
 *
 * STRATEGY:
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	12/ 6/91		Initial Revision
 *
 ***********************************************************************/
@method GenContentProcessClass, MSG_TOGGLE_VIEW_CONTENTS_USABLE {
  if (@call Honk::MSG_GEN_GET_USABLE()) {
    @call Honk::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
    @call Snort::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
    @call Whiffle::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
    @call MyValue::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
  } else {
    @call Honk::MSG_GEN_SET_USABLE(VUM_NOW);
    @call Snort::MSG_GEN_SET_USABLE(VUM_NOW);
    @call Whiffle::MSG_GEN_SET_USABLE(VUM_NOW);
    @call MyValue::MSG_GEN_SET_USABLE(VUM_NOW);
  }
}



/***********************************************************************
 *
 * MESSAGE:	MSG_TOGGLE_VALUE_USABLE for GenContentProcessClass
 *
 * DESCRIPTION:	Toggles value usable.
 *
 * PARAMETERS:  void ()
 *
 * STRATEGY:
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	12/ 6/91	Initial Revision
 *
 ***********************************************************************/
@method GenContentProcessClass, MSG_TOGGLE_VALUE_USABLE {
  if (@call MyValue::MSG_GEN_GET_USABLE()) {
    @call MyValue::MSG_GEN_SET_NOT_USABLE(VUM_NOW);
  } else {
    @call MyValue::MSG_GEN_SET_USABLE(VUM_NOW);
  }
}





/***********************************************************************
 *
 * MESSAGE:	MSG_TOGGLE_VALUE_ENABLED for GenContentProcessClass
 *
 * DESCRIPTION:	Toggles value enabled.
 *
 * PARAMETERS:  void ()
 *
 * STRATEGY:
 *
 * KNOWN BUGS/SIDE EFFECTS/CAVEATS/IDEAS:
 *
 * REVISION HISTORY:
 *	Name	Date		Description
 *	----	----		-----------
 *	chris	12/ 6/91	Initial Revision
 *
 ***********************************************************************/
@method GenContentProcessClass, MSG_TOGGLE_VALUE_ENABLED {
  if (@call MyValue::MSG_GEN_GET_ENABLED()) {
    @call MyValue::MSG_GEN_SET_NOT_ENABLED(VUM_NOW);
  } else {
    @call MyValue::MSG_GEN_SET_ENABLED(VUM_NOW);
  }
}




