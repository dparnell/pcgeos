/***********************************************************************
 *
 *	Copyright (c) GeoWorks 1992 -- All Rights Reserved
 *
 * PROJECT:	  PCGEOS
 * MODULE:	  bigcalcData.ui
 * FILE:	  bigcalcData.ui
 *
 * AUTHOR:  	  Christian Puscasiu, Apr 17, 1992
 *
 * REVISION HISTORY:
 *	Date	  Name	    Description
 *	----	  ----	    -----------
 *	4/17/92	  CP	    Initial version
 *	10/29/96  andres    Don't need most of this for DOVE
 *	11/18/96  andres    Don't need most of this for PENELOPE
 *
 *
 * DESCRIPTION:
 *	
 *
 *
 * 	$Id: bigcalcData.ui,v 1.1 97/04/04 14:38:14 newdeal Exp $
 *
 ***********************************************************************/


/*************** DON'T CARE ABOUT THIS FILE FOR RESPONDER ***************/


start	DescriptionResource, data;



/*-------------- Descriptions ----------------------*/

/* SSheet Functions Descriptions */

chunk	PCFFutureValueDescription	= "Calculate the future value of a \
series of fixed payments subject to a compounding interest rate.";
chunk	PCFPaymentDescription		= "Calculate the periodic payment \
amount required to pay off a loan over a specified time.";
chunk	PCFCtermDescription	= "Calculate the time for a present value to \
reach a future value using a compounding interest rate.";
chunk	PCFDblDeclBalanceDescription	= "Calculate the depreciation of an \
asset using the double-declining balance method.";
chunk	PCFPresentValueDescription	= "Calculate the present value of a \
stream of payments subject to a compounding interest rate.";
chunk	PCFRateDescription	= "Calculate the compounding interest rate \
required for a present value to reach a future value in a specified period \
of time.";
chunk	PCFStraightLineDepDescription	= "Calculate the depreciation of an \
asset using the straight-line depreciation method.";
chunk	PCFSumOfYearDepDecription	= "Calculate the depreciation of an \
asset using the sum-of-years\'-digits depreciation method.";
chunk	PCFTermDescrpition	= "Calculate the time for a stream \
of fixed payments to reach a future value.";

/* Stats Functions Descriptions */

chunk	PCFAverageDescription	= "Calculate the average of a list of numbers \
(statistical mean)";
chunk	PCFStandardDeviationDescription	= "Calculate the standard deviation \
of a list of numbers.";
chunk	PCFSumDescription	= "Sum a list of numbers.";
chunk	PCFVarianceDescription	= "Calculate the statistical variance of a \
list of numbers.";

/* Sales Functions Descriptions */

chunk	PCFSalesTaxDescription	= "Calculate the sales tax for a transaction.";
chunk	PCFSalesTotalDescription	= "Calculate the transaction total including sales tax.";
chunk	PCFProfitMarginDescription	= "Calculate the profit margin on a sale.";
chunk	PCFMarkupCostDescription	= "Calculate the retail price of an \
item based on a percentage markup from the wholesale cost.";

chunk	PCFMarkupProfitDescription	= "Calculate the retail price of an \
item required to achieve a desired profit margin.";

chunk	PCFDiscountDescription	= "Calculate the sale price of a discounted item.";
chunk	PCFBreakEvenDescription	= "Calculate the number of unit sales \
required to recover fixed initial costs.";
chunk	PCFBreakevenProfitDescription	= "Calculate the number of unit sales \
required to achieve a desired profit.";

/* Consumer Functions Descriptions */

chunk	PCFHomeLoanDescription	= "Estimate what price home you can purchase.";
chunk	PCFCarLoanDescription	= "Estimate the monthly cost of owning a \
new car.";
chunk	PCFCollegeDescription	= "Estimate the amount you should put away each month to pay for your child\'s college education.";
chunk	PCFSavingsGoalDescription	= "Calculate the amount you should \
save each month.";
chunk	PCFCarMilageDescription	= "Calculate your car\'s fuel efficiency.";
chunk	PCFCarLeaseDescription	= "Estimate the residual (buy-out) value of \
a car at the end of a lease.";
chunk	PCFLoanAmountDescription	= "Calculate the largest loan you can afford.";
chunk	PCFLoanPmtDescription	= "Calculate the monthly payment on a loan.";
chunk	PCFLoanInterestDescription	= "Calculate the sum of interest \
payments over the life of a loan.";
chunk	PCFHomeSaleDescription	= "Calculate the net proceeds from the sale of a home.";
chunk	PCFHomePurLoanDescription	= "Calculate the loan amount needed \
to purchase a home.";


chunk	EvalErrorString		= "ERROR";
chunk	ConvertJoinString	= " to ";


/* Quick Help strings */

chunk	ConsumerTriggerHelp	= "Frequently used household calculations like car lease payments";
chunk	SalesTriggerHelp	= "Frequently used business calculations like profit margin";
chunk	StatsTriggerHelp	= "Frequently used statistical calculations like standard deviation";
chunk	SSheetTriggerHelp	= "Frequently used financial calculations like depreciation";

end	DescriptionResource;


start	DataResource, data;

/*------------ PCF DataStructures ----------------- */

/*	The PCF`s data is laid out in the following way:
	the first byte says what type of a PCF it is, then 
	if it is a 
		FixedArgsPCF:
			byte	for the result format
			word	for the ID
			word	offset for the formula
			word	offset for the moniker
			byte	for the number of Args
			word	offset for the result text
		as many	words	as neccseary to describe Args in reverse order
		eg:
chunk	FooPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_FOO
	word	offset	FooFormula
	word	offset	FooMoniker
	byte	2
	word	offset	FooResultText
	word	offset	FooText2
	word	offset	FooText1
	word	offset	PCFFooDescription
}

chunk	FooFormula	= "FOO($0,$1)";
chunk	FooMoniker	= "Foo";
chunk	FooResultText	= "Foo:";
chunk	FooText2	= "Foo2:";
chunk	FooText1	= "Foo1:";

		VariableArgsPCF:
			word	for the ID
			word	offset for the formula
			word	offset for the moniker
			word	offset for the description of the input field
			word	offset for the result text
		byte	number of minimum arguments
*/

/*------------- SSheet Function PCFData ----------------*/

chunk	FutureValuePCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_FUTURE_VALUE
	word	offset FVFormula
	word	offset FVMoniker
	byte	4
	word	offset FVText
	word	offset NumberOfYearsLine
	word	offset PeriodsPerYearLine
	word	offset AnnualInterestLine
	word	offset PaymentAmountPVLine
	word	offset FutureValueDescription
}
localize not;

chunk	FVFormula	= "FV($0,$1/100/$2,$3*$2)";
chunk	FVMoniker	= "Future Value";
chunk	FutureValueDescription	= "Calculate the future value of a \
series of fixed payments subject to a compounding interest rate.";

chunk	PaymentPCFData		= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_PAYMENT
	word	offset PMTFormula
	word	offset PMTMoniker
	byte	4
	word	offset PMTText
	word	offset NumberOfYearsLine
	word	offset PeriodsPerYearLine
	word	offset AnnualInterestLine
	word	offset PrincipalLine
	word	offset PaymentDescription
}
localize not;

chunk	PMTFormula	= "PMT($0,$1/100/$2,$3*$2)";
chunk	PMTMoniker	= "Payment";
chunk	PaymentDescription	= "Calculate the periodic payment amount \
required to pay off a loan over a specified time.";

chunk	PresentValuePCFData		= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_PRESENT_VALUE
	word	offset PVFormula
	word	offset PVMoniker
	byte	4
	word	offset PVText
	word	offset NumberOfYearsLine
	word	offset PeriodsPerYearLine
	word	offset AnnualInterestLine
	word	offset PaymentAmountPVLine
	word	offset PresentValueDescription
}
localize not;

chunk	PVFormula	= "PV($0,$1/100/$2,$3*$2)";
chunk	PVMoniker	= "Present Value";
chunk	PresentValueDescription	= "Calculate the present value of a \
series of payments subject to a compounding interest rate.";

chunk	RatePCFData			= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_GLOBAL_SETTINGS
	word	PCFID_RATE
	word	offset RateFormula
	word	offset RateMoniker
	byte	3
	word	offset RateText
	word	offset NumberOfYearsLine
	word	offset FVLine
	word	offset PVLine
	word	offset RateDescription
}
localize not;

chunk	RateFormula	= "((($1/$0)^(1/$2))-1)*100";
chunk	RateMoniker	= "Compound Rate";
chunk	RateDescription	= "Calculate the compounding interest \
rate required for a present value to reach a future value in a specified \
period of time.";

chunk	TermPCFData			= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_INTEGER
	word	PCFID_TERM
	word	offset TermFormula
	word	offset TermMoniker
	byte	4
	word	offset CtermText
	word	offset FVLine
	word	offset NumberOfPeriodsPerYearLine
	word	offset AnnualInterestLine
	word	offset PaymentAmountPVLine
	word	offset TermDescrpition
}
localize not;

chunk	TermFormula	= "TERM($0,$1/(100*$2),$3)";
chunk	TermMoniker	= "Term of Payments";
chunk	TermDescrpition	= "Calculate the time for a stream of \
fixed payments to reach a future value.";

chunk	CtermPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_INTEGER
	word	PCFID_CTERM
	word	offset CtermFormula
	word	offset CtermMoniker
	byte	4
	word	offset CtermText
	word	offset FVLine
	word	offset NumberOfPeriodsPerYearLine
	word	offset AnnualInterestLine
	word	offset PVLine
	word	offset CtermDescription
}
localize not;

chunk	CtermFormula	= "CTERM($1/(100*$2),$3,$0)";
chunk	CtermMoniker	= "Compound Term";
chunk	CtermDescription	= "Calculate the time for a present value to \
reach a future value using a compounding interest rate.";

chunk	DblDeclBalancePCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_DBL_DECL_BALANCE
	word	offset	DDBFormula
	word	offset	DDBMoniker
	byte	4
	word	offset	DDBText
	word	offset	PeriodLine
	word	offset	LifeLine
	word	offset	SalvageLine
	word	offset	CostLine
	word	offset	DblDeclBalanceDescription
}
localize not;

chunk	DDBFormula	= "DDB($0,$1,$2,$3)";
chunk	DDBMoniker	= "Double-Declining Balance";
chunk	DblDeclBalanceDescription	= "Calculate the depreciation of an \
asset using the double-declining balance method, where depreciation is \
highest in the first period and decreases by a factor of two each period \
thereafter.";

chunk	StraightLineDepPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_STRAIGHT_LINE_DEP
	word	offset	SLNFormula
	word	offset	SLNMoniker
	byte	3
	word	offset	SLNText
	word	offset	LifeLine
	word	offset	SalvageLine
	word	offset	CostLine
	word	offset	StraightLineDepDescription
}
localize not;

chunk	SLNFormula	= "SLN($0,$1,$2)";
chunk	SLNMoniker	= "Straight-Line Depreciation";
chunk	StraightLineDepDescription	= "Calculate the depreciation of an \
asset using the straight-line depreciation method, where the depreciation is \
the same for each period.";

chunk	SumOfYearDepPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_SUM_OF_YEAR_DEP
	word	offset	SYDFormula
	word	offset	SYDMoniker
	byte	4
	word	offset	DDBText
	word	offset	PeriodLine
	word	offset	LifeLine
	word	offset	SalvageLine
	word	offset	CostLine
	word	offset SumOfYearDepDecription
}
localize not;

chunk	SYDFormula	= "SYD($0,$1,$2,$3)";
chunk	SYDMoniker	= "Sum-of-Years Depreciation";
chunk	SumOfYearDepDecription	= "Calculate the depreciation of an asset using the \
sum-of-years\'-digits depreciation method, where the depreciation is highest in the first \
year and decreases over the life of the asset.";


/* --------------- Stats PCFData --------------------*/

chunk	AveragePCFData		= data {
	byte	PCFT_VARIABLE_ARGS
	byte	PCFRF_GLOBAL_SETTINGS
	word	PCFID_AVERAGE
	byte	1
	word	offset AverageFormula
	word	offset AverageMoniker
	word	offset AverageText
	word	offset AverageDescription
}
localize not;

chunk	AverageFormula	= "AVG(";
chunk	AverageMoniker	= "Average";
chunk	AverageDescription	= "Calculate the average value of a list of \
numbers.";

chunk	SumPCFData		= data {
	byte	PCFT_VARIABLE_ARGS
	byte	PCFRF_GLOBAL_SETTINGS
	word	PCFID_SUM
	byte	1
	word	offset SumFormula
	word	offset SumMoniker
	word	offset SumText
	word	offset SumDescription
}
localize not;

chunk	SumFormula	= "SUM(";
chunk	SumMoniker	= "Sum";
chunk	SumDescription	= "Sum a list of numbers.";

chunk	StandardDeviationPCFData = data {
	byte	PCFT_VARIABLE_ARGS
	byte	PCFRF_GLOBAL_SETTINGS
	word	PCFID_STANDARD_DEVIATION
	byte	2
	word	offset STDFormula
	word	offset STDMoniker
	word	offset STDText
	word	offset StandardDeviationDescription
}
localize not;

chunk	STDFormula	= "STD(";
chunk	STDMoniker	= "Standard Deviation";
chunk	StandardDeviationDescription	= "Calculate the standard deviation \
from the average of a list of numbers.";

chunk	VariancePCFData = data {
	byte	PCFT_VARIABLE_ARGS
	byte	PCFRF_GLOBAL_SETTINGS
	word	PCFID_VARIANCE
	byte	2
	word	offset VarianceFormula
	word	offset VarianceMoniker
	word	offset VarianceText
	word	offset VarianceDescription
}
localize not;

chunk	VarianceFormula	= "VAR(";
chunk	VarianceMoniker	= "Variance";
chunk	VarianceDescription	= "Calculate the statistical variance \
from the average of a list of numbers.";


/*-------------- Sales PCFData ------------------*/

chunk	SalesTaxPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_SALES_TAX
	word	offset SalesTaxFormula
	word	offset SalesTaxMoniker
	byte	2
	word	offset SalesTaxText
	word	offset TaxRateLine
	word	offset TaxableAmountLine
	word	offset SalesTaxDescription
}
localize not;

chunk	SalesTaxFormula		= "$0*($1/100)";
chunk	SalesTaxMoniker		= "Sales Tax";
chunk	SalesTaxText		= "Sales tax:";
chunk	SalesTaxDescription	= "Calculate the sales tax for a transaction.";

chunk	SalesTotalPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_SALES_TOTAL
	word	offset SalesTotalFormula
	word	offset SalesTotalMoniker
	byte	2
	word	offset SalesTotalText
	word	offset TaxRateLine
	word	offset TaxableAmountLine
	word	offset SalesTotalDescription
}
localize not;

chunk	SalesTotalText	= "Total sale:";
chunk	SalesTotalFormula	= "$0+($0*($1/100))";
chunk	SalesTotalMoniker	= "Total Sale";
chunk	SalesTotalDescription	= "Calculate the transaction total, including sales tax.";

chunk	ProfitMarginPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_PROFIT
	word	offset ProfitMarginFormula
	word	offset ProfitMarginMoniker
	byte	2
	word	offset ProfitMarginText
	word	offset RetailPriceLine
	word	offset WholesaleLine
	word	offset ProfitMarginDescription
}
localize not;

chunk	ProfitMarginText	= "Profit margin (percent):";
chunk	ProfitMarginMoniker	= "Profit Margin";
chunk	ProfitMarginFormula	= "(($1-$0)/$1)*100";
chunk	ProfitMarginDescription	= "Calculate the profit margin.";

chunk	MarkupCostPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_MARKUP_COST
	word	offset MarkupCostFormula
	word	offset MarkupCostMoniker
	byte	2
	word	offset RetailPriceText
	word	offset MarkupLine
	word	offset WholesaleLine
	word	offset MarkupCostDescription
}
localize not;

chunk	MarkupCostMoniker	= "Markup (Cost-Based)";
chunk	MarkupCostFormula	= "$0+($0*($1/100))";
chunk	MarkupText		= "Markup:";
chunk	MarkupCostDescription	= "Calculate the retail price of an item \
based on a percentage markup from the wholesale cost.";

chunk	MarkupProfitPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_MARKUP_PROFIT
	word	offset MarkupProfitFormula
	word	offset MarkupProfitMoniker
	byte	2
	word	offset RetailPriceText
	word	offset DesiredProfitMarginLine
	word	offset WholesaleLine
	word	offset MarkupProfitDescription
}
localize not;

chunk	MarkupProfitFormula	= "(100*$0)/(100-$1)";
chunk	MarkupProfitMoniker	= "Markup (Profit-Based)";
chunk	DesiredProfitMarginText	= "Desired profit margin:";
chunk	MarkupProfitDescription	= "Calculate the retail price of an item \
required to achieve a desired profit margin.";

chunk	DiscountPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_DISCOUNT
	word	offset DiscountFormula
	word	offset DiscountMoniker
	byte	2
	word	offset DiscountedPriceText
	word	offset DiscountLine
	word	offset RetailPriceLine
	word	offset DiscountDescription
}
localize not;

chunk	DiscountFormula		= "$0-($0*($1/100))";
chunk	DiscountMoniker		= "Discount";
chunk	DiscountText		= "Discount:";
chunk	DiscountedPriceText	= "Discounted price:";
chunk	DiscountDescription	= "Calculate the sale price of a discounted \
item.";

chunk	BreakEvenPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_GLOBAL_SETTINGS
	word	PCFID_BREAK_EVEN
	word	offset BreakEvenFormula
	word	offset BreakEvenMoniker
	byte	3
	word	offset SalesRequiredText
	word	offset UnitPriceLine
	word	offset VariableCostUnitLine
	word	offset FixedCostLine
	word	offset BreakEvenDescription
}
localize not;

chunk	BreakEvenFormula	= "$0/($2-$1)";
chunk	BreakEvenMoniker	= "Break Even";
chunk	UnitPriceText		= "Retail price:";
chunk	BreakEvenDescription	= "Calculate the number of unit sales \
required to recover fixed initial costs.";

chunk	BreakevenProfitPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_GLOBAL_SETTINGS
	word	PCFID_BREAKEVEN_PROFIT
	word	offset BreakevenProfitFormula
	word	offset BreakevenProfitMoniker
	byte	4
	word	offset SalesRequiredText
	word	offset DesiredProfitLine
	word	offset UnitPriceLine
	word	offset VariableCostUnitLine
	word	offset FixedCostLine
	word	offset BreakevenProfitDescription
}
localize not;

chunk	BreakevenProfitFormula	= "($0+$3)/($2-$1)";
chunk	BreakevenProfitMoniker	= "Profit Goal";
chunk	DesiredProfitText	= "Desired profit:";
chunk	SalesRequiredText	= "Unit sales required:";
chunk	BreakevenProfitDescription	= "Calculate the number of unit sales \
required to achieve a desired profit.";

/* ---------- Customer PCFData ------------------*/

chunk	HomeLoanPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_HOME_LOAN
	word	offset HomeLoanFormula
	word	offset HomeLoanMoniker
	byte	4
	word	offset HomeYouCanAffordText
	word	offset DownPaymentLine2
	word	offset TermOfLoanLine
	word	offset MortgageRateLine
	word	offset MonthlyMortgagePayment
	word	offset HomeLoanDescription
}
localize not;

chunk	HomeYouCanAffordText	= "Home purchase price:";
chunk	HomeLoanMoniker	= "Home Buying Power";
chunk	HomeLoanFormula	= "PV($0,$1/1200,$2*12)+$3";
chunk	HomeLoanDescription	= "Estimate what price home you can purchase.";


chunk	CarLoanPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_CAR_LOAN
	word	offset CarLoanFormula
	word	offset CarLoanMoniker
	byte	7
	word	offset MonthlyCarCostText
	word	offset FuelCostLine
	word	offset InsuranceCostLine
	word	offset MaintenanceCostLine
	word	offset LoanTermLine
	word	offset AnnualInterestLine
	word	offset DownPaymentLine
	word	offset PriceOfCarLine
	word	offset CarLoanDescription
}
localize not;

chunk	MonthlyCarCostText	= "Monthly cost:";
chunk	CarLoanMoniker	= "Car Purchase";
chunk	CarLoanFormula	= "PMT($0-$1,$2/1200,$3*12)+($4+$5+$6)/12";
chunk	CarLoanDescription	= "Estimate the monthly cost of owning a \
new car.";

chunk	CollegePCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_COLLEGE
	word	offset CollegeFormula
	word	offset CollegeMoniker
	byte	4
	word	offset EstimatedAmountToSaveText
	word	offset YearsToEnrollmentLine
	word	offset InvestmentYieldLine
	word	offset CollegeCostIncreaseLine
	word	offset AnnualCollegeCostLine
	word	offset CollegeDescription
}
localize not;

chunk	EstimatedAmountToSaveText	= "Amount to save each month:";
chunk	CollegeMoniker	= "College Fund";

/*
 * Note - this formula consists of the "savings goal" formula, but with
 * an assumption of having no money initially and the amount to be saved is,
 * of course, the total cost of the education. This is compuer as the sum
 * of the cost of the four years of college, with each successive year
 * costing more than the previous due to inflation. This formulate does *not*
 * account for the interest to be gained on the money while waiting around
 * for years 2, 3 & 4, but this is the best I could do for now. -Don 5/16/00
 */

chunk	CollegeFormula	= "(IF($2=0,(($0*((1+($1/100))^($3+0))+$0*((1+($1/100))^($3+1))+$0*((1+($1/100))^($3+2))+$0*((1+($1/100))^($3+3)))/($3*12)), ($0*((1+($1/100))^($3+0))+$0*((1+($1/100))^($3+1))+$0*((1+($1/100))^($3+2))+$0*((1+($1/100))^($3+3)))*($2/1200)/((((1+($2/1200))^($3*12))-1)*(1+($2/1200)))))";

chunk	CollegeDescription = "Calculate the amount you should save at the beginning of each month to pay for your child\'s 4-year college education.";

chunk	SavingsGoalPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_SAVINGS_GOAL
	word	offset SavingsGoalFormula
	word	offset SavingsGoalMoniker
	byte	4
	word	offset AmountToSaveText
	word	offset AnnualInterestLine
	word	offset NumberMonthsReachGoalLine
	word	offset SavingsGoalLine
	word	offset CurrentBalanceLine
	word	offset SavingsGoalDescription
}
localize not;

chunk	AmountToSaveText	= "Amount to save each month:";
chunk	SavingsGoalMoniker	= "Savings Goal";
chunk	SavingsGoalFormula	= "(IF($3=0,(($1-$0)/$2), ($1-($0*((1+($3/1200))^$2)))*($3/1200)/((((1+($3/1200))^$2)-1)*(1+($3/1200)))))";
chunk	SavingsGoalDescription	= "Calculate the amount you should save at the beginning of each month.";

chunk	CarMilagePCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_CAR_MILAGE
	word	offset CarMilageFormula
	word	offset CarMilageMoniker
	byte	3
	word	offset CarMilageText
	word	offset NumberGallonsLine
	word	offset SecondOdometerLine
	word	offset FirstOdometerLine
	word	CarMilageDescription
}
localize not;

chunk	CarMilageText	= "Your car\'s efficiency:";
chunk	CarMilageMoniker	= "Car Mileage";
chunk	CarMilageFormula	= "$2/($1-$0)*100";
chunk	CarMilageDescription	= "Calculate your car\'s fuel efficiency.";

chunk	CarLeasePCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_CAR_LEASE
	word	offset CarLeaseFormula
	word	offset CarLeaseMoniker
	byte	5
	word	offset ResidualValueText
	word	offset MonthlyCarPaymentLine
	word	offset LeaseTermLine
	word	offset AnnualInterestLine
	word	offset DownPaymentLine
	word	offset OrigPriceOfCarLine
	word	offset CarLeaseDescription
}
localize not;

chunk	ResidualValueText	= "Residual (buy-out) value:";
chunk	CarLeaseMoniker	= "Car Lease";
chunk	CarLeaseFormula	= "($0-$1)-PV($4,$2/1200,$3*12)";
chunk	CarLeaseDescription	= "This worksheet will estimate the residual \
(buy-out) value of a car at the end of a lease.";

chunk	LoanAmountPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_LOAN_AMOUNT
	word	offset LoanAmountFormula
	word	offset LoanAmountMoniker
	byte	3
	word	TotalPaymentsText
	word	offset LoanTermLine
	word	offset AnnualInterestLine
	word	offset MonthlyPaymentLine
	word	LoanAmountDescription
}
localize not;

chunk	TotalPaymentsText	= "Loan Amount:";
chunk	LoanAmountMoniker	= "Loan Amount";
chunk	LoanAmountFormula	= "PV($0,$1/1200,$2*12)";
chunk	LoanAmountDescription	= "Calculate the largest loan you can afford.";

chunk	LoanPmtPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_LOAN_PMT
	word	offset LoanPmtFormula
	word	offset LoanPmtMoniker
	byte	3
	word	offset MonthlyPaymentText
	word	offset LoanTermLine
	word	offset AnnualInterestLine
	word	offset LoanAmountLine
	word	offset LoanPmtDescription
}
localize not;

chunk	LoanPmtMoniker	= "Loan (Single Payment)";
chunk	LoanPmtFormula	= "PMT($0,$1/1200,$2*12)";
chunk	LoanPmtDescription	= "Calculate the monthly payment on a loan.";

chunk	LoanInterestPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_LOAN_INTEREST
	word	offset LoanInterestFormula
	word	offset LoanInterestMoniker
	byte	3
	word	offset LoanInterestText
	word	offset LoanTermLine
	word	offset AnnualInterestLine
	word	offset MonthlyPaymentLine
	word	offset LoanInterestDescription
}
localize not;

chunk	LoanInterestText	= "Total interest paid:";
chunk	LoanInterestMoniker	= "Loan (Total Interest)";
chunk	LoanInterestFormula	= "($0*$2*12)-PV($0,$1/1200,$2*12)";
chunk	LoanInterestDescription	= "Calculate the total of interest payments \
over the life of a loan.";

chunk	HomeSalePCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_HOME_SALE
	word	offset HomeSaleFormula
	word	offset HomeSaleMoniker
	byte	4
	word	offset NetProceedsText
	word	offset ExistingMortgageLine
	word	offset ClosingCostsLine
	word	offset RealEstateFeesLine
	word	offset SalePriceLine
	word	HomeSaleDescription
}
localize not;

chunk	NetProceedsText	= "Net proceeds at close of escrow:";


chunk	HomeSaleMoniker	= "Home Sale";
chunk	HomeSaleFormula	= "$0-($0*($1/100))-$2-$3";
chunk	HomeSaleDescription	= "Calculate the net proceeds from the sale \
of home.";

chunk	HomePurLoanPCFData	= data {
	byte	PCFT_FIXED_ARGS
	byte	PCFRF_DOLLARS_AND_CENTS
	word	PCFID_HOME_PUR_LOAN
	word	offset HomePurLoanFormula
	word	offset HomePurLoanMoniker
	byte	3
	word	offset HomePurLoanResultText
	word	offset DownPaymentHouseLine
	word	offset LoanPointsLine
	word	offset PurchasePriceHouseLine
	word	HomePurLoanDescription
}
localize not;

chunk	HomePurLoanResultText	= "Loan amount:";
chunk	HomePurLoanMoniker	= "Home Purchase";
chunk	HomePurLoanFormula	= "$0+($0-$2)*($1/100)-$2";
chunk	HomePurLoanDescription	= "Calculate the loan amount needed to \
purchase a home.";

/* Common Lines for SSheet functions */

chunk	PeriodsPerYearLine	= data{
	FixedArgsLineStruct <offset PeriodsPerYearText, offset TwelveText, offset PeriodsText>}
localize not;

chunk	PrincipalLine	= data{
	FixedArgsLineStruct <offset PrincipalText, offset FiveKText, offset DollarText>}
localize not;

chunk	PVLine	= data{
	FixedArgsLineStruct <offset PVText, offset ZeroText, offset DollarText>}
localize not;

chunk	FVLine	= data{
	FixedArgsLineStruct <offset FVText, offset ZeroText, offset DollarText>}
localize not;

chunk	PeriodLine	= data{
	FixedArgsLineStruct <offset PeriodText, offset ZeroText, offset YearsText>}
localize not;

chunk	LifeLine	= data{
	FixedArgsLineStruct <offset LifeText, offset ZeroText, offset YearsText>}
localize not;

chunk	SalvageLine	= data{
	FixedArgsLineStruct <offset SalvageText, offset ZeroText, offset DollarText>}
localize not;

chunk	CostLine	= data{
	FixedArgsLineStruct <offset CostText, offset ZeroText, offset DollarText>}
localize not;

chunk	NumberOfPeriodsPerYearLine	= data{
	FixedArgsLineStruct <offset PeriodsPerYearText, offset TwelveText, offset PeriodsText>}
localize not;

chunk	PaymentAmountPVLine	= data{
	FixedArgsLineStruct <offset PMTText, offset ZeroText, offset DollarText>}
localize not;

/* Common Strings for SSheet functions */
chunk	PeriodsPerYearText	= "Periods per year:";
chunk	FVText		= "Future value:";
chunk	PMTText		= "Payment per period:";
chunk	PVText		= "Present value:";
chunk	RateText	= "Annual interest rate (%):";
chunk	CtermText	= "Number of periods to reach future value:";
chunk	DDBText		= "Current year\'s depreciation allowance:";
chunk	SLNText		= "Depreciation allowance each year:";
chunk	PrincipalText	= "Loan Amount:";
chunk	CostText	= "Initial value:";
chunk	SalvageText	= "Salvage value:";
chunk	LifeText	= "Expected lifetime:";
chunk	PeriodText	= "Current age:";


/* Common Lines for Sales functions */

chunk	TaxRateLine	= data{
	FixedArgsLineStruct <offset TaxRateText, offset Eightp25Text, offset PercentText>}
localize not;

chunk	TaxableAmountLine	= data{
	FixedArgsLineStruct <offset TaxableAmountText, offset ZeroText, offset DollarText>}
localize not;

chunk	RetailPriceLine	= data{
	FixedArgsLineStruct <offset RetailPriceText, offset ZeroText, offset DollarText>}
localize not;

chunk	WholesaleLine	= data{
	FixedArgsLineStruct <offset WholesaleText, offset ZeroText, offset DollarText>}
localize not;

chunk	MarkupLine	= data{
	FixedArgsLineStruct <offset MarkupText, offset TenText, offset PercentText>}
localize not;

chunk	DesiredProfitMarginLine	= data{
	FixedArgsLineStruct <offset DesiredProfitMarginText, offset TenText, offset PercentText>}
localize not;

chunk	DiscountLine	= data{
	FixedArgsLineStruct <offset DiscountText, offset TwentyText, offset PercentText>}
localize not;

chunk	UnitPriceLine	= data{
	FixedArgsLineStruct <offset UnitPriceText, offset ZeroText, offset DollarText>}
localize not;


chunk	FixedCostLine	= data{
	FixedArgsLineStruct <offset FixedCostText, offset ZeroText, offset DollarText>}
localize not;

chunk	DesiredProfitLine	= data{
	FixedArgsLineStruct <offset DesiredProfitText, offset ZeroText, offset DollarText>}
localize not;

chunk	VariableCostUnitLine	= data{
	FixedArgsLineStruct <offset VariableCostUnitText, offset ZeroText, offset DollarUnitText>}
localize not;


/* Common Strings for Sales functions */

chunk	TaxableAmountText	= "Taxable Amount:";
chunk	TaxRateText		= "Tax rate:";
chunk	WholesaleText		= "Wholesale cost:";
chunk	RetailPriceText		= "Retail price:";
chunk	FixedCostText		= "Fixed one-time costs:";
chunk	VariableCostUnitText	= "Variable costs:";

/* Common Strings for Stats functions */

chunk	AverageText	= "Average:";
chunk	STDText		= "Standard deviation:";
chunk	SumText		= "Sum:";
chunk	VarianceText	= "Variance:";

/* Common Strings for Consumer functions --------- */

chunk	TermOfLoanLine	= data{
	FixedArgsLineStruct <offset TermOfLoanText, offset ThirtyText, offset YearsText>}
localize not;

chunk	MortgageRateLine	= data{
	FixedArgsLineStruct <offset MortgageRateText, offset EightText, offset PercentYearText>}
localize not;

chunk	MonthlyMortgagePayment	= data{
	FixedArgsLineStruct <offset MonthlyMortgagePaymentText, offset K200Text, offset DollarMonthText>}
localize not;

chunk	FuelCostLine	= data{
	FixedArgsLineStruct <offset FuelCostText, offset SevenFiftyText, offset DollarYearText>}
localize not;

chunk	InsuranceCostLine	= data{
	FixedArgsLineStruct <offset InsuranceCostText, offset KText, offset DollarYearText>}
localize not;

chunk	MaintenanceCostLine	= data{
	FixedArgsLineStruct <offset MaintenanceCostText, offset FiveHundredText, offset DollarYearText>}
localize not;

chunk	LoanTermLine	= data{
	FixedArgsLineStruct <offset LoanTermText, offset FiveText, offset YearsText>}
localize not;

chunk	DownPaymentLine	= data{
	FixedArgsLineStruct <offset DownPaymentText, offset ThreeKText, offset DollarText>}
localize not;

chunk	DownPaymentLine2 = data{
	FixedArgsLineStruct <offset DownPaymentText, offset TwentyKText, offset DollarText>}
localize not;

chunk	PriceOfCarLine	= data{
	FixedArgsLineStruct <offset PriceOfCarText, offset TenKText, offset DollarText>}
localize not;

chunk	OrigPriceOfCarLine	= data{
	FixedArgsLineStruct <offset OrigPriceOfCarText, offset TenKText, offset DollarText>}
localize not;

chunk	YearsToEnrollmentLine	= data{
	FixedArgsLineStruct <offset YearsToEnrollmentText, offset TenText, offset YearsText>}
localize not;

chunk	InvestmentYieldLine	= data{
	FixedArgsLineStruct <offset InvestmentYieldText, offset SevenText, offset PercentYearText>}
localize not;

chunk	CollegeCostIncreaseLine	= data{
	FixedArgsLineStruct <offset CollegeCostIncreaseText, offset SevenText, offset PercentYearText>}
localize not;

chunk	AnnualCollegeCostLine	= data{
	FixedArgsLineStruct <offset AnnualCollegeCostText, offset EightKText, offset DollarText>}
localize not;

chunk	AnnualInterestLine	= data{
	FixedArgsLineStruct <offset AnnualInterestText, offset EightText, offset PercentYearText>}
localize not;

chunk	CurrentBalanceLine	= data{
	FixedArgsLineStruct <offset CurrentBalanceText, offset ZeroText, offset DollarText>}
localize not;

chunk	NumberMonthsReachGoalLine	= data{
	FixedArgsLineStruct <offset NumberMonthsReachGoalText, offset TwentyFourText, offset MonthsText>}
localize not;

chunk	SavingsGoalLine	= data{
	FixedArgsLineStruct <offset SavingsGoalText, offset FiveKText, offset DollarText>}
localize not;

chunk	FirstOdometerLine	= data{
	FixedArgsLineStruct <offset FirstOdometerText, offset ThirtySthFirstText, offset MilesText>}
localize not;

chunk	SecondOdometerLine	= data{
	FixedArgsLineStruct <offset SecondOdometerText, offset ThirtySthSecondText, offset MilesText>}
localize not;

chunk	NumberGallonsLine	= data{
	FixedArgsLineStruct <offset NumberGallonsText, offset EightText, offset GallonsText>}
localize not;

chunk	NumberOfYearsLine	= data{
	FixedArgsLineStruct <offset NumberOfYearsText, offset ThreeText, offset YearsText>}
localize not;

chunk	LeaseTermLine	= data{
	FixedArgsLineStruct <offset LeaseTermText, offset ThreeText, offset YearsText>}
localize not;

chunk	MonthlyPaymentLine	= data{
	FixedArgsLineStruct <offset MonthlyPaymentText, offset KText, offset DollarText>}
localize not;

chunk	MonthlyCarPaymentLine	= data{
	FixedArgsLineStruct <offset MonthlyPaymentText, offset HundredTwentyText, offset DollarText>}
localize not;

chunk	LoanAmountLine	= data{
	FixedArgsLineStruct <offset LoanAmountText, offset Sixty2092Text, offset DollarText>}
localize not;

chunk	ExistingMortgageLine	= data{
	FixedArgsLineStruct <offset ExistingMortgageText, offset HundredKText, offset DollarText>}
localize not;

chunk	ClosingCostsLine	= data{
	FixedArgsLineStruct <offset ClosingCostsText, offset TwoKText, offset DollarText>}
localize not;

chunk	RealEstateFeesLine	= data{
	FixedArgsLineStruct <offset RealEstateFeesText, offset SixText, offset PercentText>}
localize not;

chunk	SalePriceLine	= data{
	FixedArgsLineStruct <offset SalePriceText, offset One67KText, offset DollarText>}
localize not;

chunk	DownPaymentHouseLine	= data{
	FixedArgsLineStruct <offset DownPaymentText, offset FiveKText, offset DollarText>}
localize not;

chunk	LoanPointsLine	= data{
	FixedArgsLineStruct <offset LoanPointsText, offset TwoText, offset PointsText>}
localize not;

chunk	PurchasePriceHouseLine	= data{
	FixedArgsLineStruct <offset PurchasePriceText, offset One60KText, offset DollarText>}
localize not;

/*
chunk		= data{
	FixedArgsLineStruct <offset Text, offset ZeroText, offset DollarText>}

chunk		= data{
	FixedArgsLineStruct <offset Text, offset ZeroText, offset DollarText>}
*/

/* Common Strings for Consumer functions */

chunk	TermOfLoanText		= "Loan term:";
chunk	MortgageRateText	= "Fixed mortgage rate:";
chunk	MonthlyMortgagePaymentText = "Desired mortgage payment:";
chunk	FuelCostText		= "Gasoline and other costs:";
chunk	InsuranceCostText	= "Insurance:";
chunk	MaintenanceCostText	= "Maintenance:";
chunk	LoanTermText		= "Loan term:";
chunk	DownPaymentText		= "Down payment:";
chunk	PriceOfCarText		= "Purchase price:";
chunk	OrigPriceOfCarText 	= "Original purchase price:";
chunk	YearsToEnrollmentText	= "Years to college enrollment:";
chunk	InvestmentYieldText	= "Average investment yield:";
chunk	CollegeCostIncreaseText	= "Yearly college cost inflation:";
chunk	AnnualCollegeCostText	= "Current annual college costs:";
chunk	AnnualInterestText	= "Interest rate:";
chunk	CurrentBalanceText	= "Current account balance:";
chunk	SavingsGoalText		= "Savings goal:";
chunk	FirstOdometerText	= "Odometer reading at last fill up:";
chunk	SecondOdometerText	= "Current odometer reading:";
chunk	NumberGallonsText	= "Amount of fuel added:";
chunk	NumberOfYearsText	= "Number of years:";
chunk	LeaseTermText		= "Lease term:";
chunk	PurchasePriceText	= "Purchase price:";
chunk	MonthlyPaymentText	= "Monthly payment:";
chunk	ExistingMortgageText	= "Current mortgage principal:";
chunk	ClosingCostsText	= "Closing costs:";
chunk	RealEstateFeesText	= "Real estate agent commission:";
chunk	SalePriceText		= "Sale price:";
chunk	LoanPointsText		= "Loan points:";
chunk	NumberMonthsReachGoalText	= "Time to achieve goal:";
chunk	LoanAmountText		= "Loan amount:";

/* Common Strings for Units */

chunk	DollarText	= "\\1";
localize not;
chunk	DollarYearText	= "\\1/year";
chunk	DollarMonthText	= "\\1/month";
chunk	DollarUnitText	= "\\1/unit";
chunk	PercentText	= "%";
chunk	PercentYearText	= "%/year";
chunk	YearsText	= "years";
chunk	MonthsText	= "months";
chunk	PointsText	= "points";
chunk	PeriodsText	= "periods";

chunk	MilesText	= "miles";
chunk	GallonsText	= "gallons";

chunk	MetricMiles	= "kilometers";
chunk	MetricGallons	= "liters";

/* Common Strings for Numbers */

chunk	ZeroText	= "0";
localize not;
chunk	FiveText	= "5";
localize not;
chunk	TenText		= "10";
localize not;
chunk	Eightp25Text	= "8.25";
chunk	TwentyText	= "20";
localize not;
chunk	ThirtyText	= "30";
localize not;
chunk	EightText	= "8";
localize not;
chunk	FiveHundredText	= "500";
localize not;
chunk	SevenFiftyText	= "750";
localize not;
chunk	ThreeKText	= "3000";
localize not;
chunk	TenKText	= "10000";
localize not;
chunk	TwentyKText	= "20000";
localize not;
chunk	SevenText	= "7";
localize not;
chunk	EightKText	= "8000";
localize not;
chunk	TwentyFourText	= "24";
localize not;
chunk	FiveKText	= "5000";
localize not;
chunk	ThirtySthFirstText	= "30456.2";
chunk	ThirtySthSecondText	= "30770.6";
chunk	HundredTwentyText	= "120";
localize not;
chunk	ThreeText	= "3";
localize not;
chunk	TwelveText	= "12";
localize not;
chunk	KText	= "1000";
localize not;
chunk	Sixty2092Text	= "62092";
localize not;
chunk	HundredKText	= "100000";
localize not;
chunk	TwoKText	= "2000";
localize not;
chunk	TwoText	= "2";
localize not;
chunk	One67KText	= "167000";
localize not;
chunk	One60KText	= "160000";
localize not;
chunk	K200Text	= "1200";
localize not;
chunk	SixText	= "6";
localize not;

/* So one can tell if this resource has been discarded */

chunk	Discarded	= data {BooleanByte BB_TRUE}
localize not;

/* Quick Help Strings */

chunk	QHMemGetStr	= "Get value from calculator";
chunk	QHMemSendStr	= "Send value to calculator";

chunk	QHDeleteStr	= "Delete the last digit entered";
chunk	QHClearStr	= "Clear";
chunk	QHEqualsStr	= "Equals";

chunk	QHStoreStr	= "Store current value in memory";
chunk	QHRecallStr	= "Recall value from memory";
chunk	QHMemPlusStr	= "Add current value to memory";
chunk	QHMemMinusStr	= "Subtract current value from memory";

chunk	QHPlusMinusStr	= "Change sign";
chunk	QHPlusStr	= "Add";
chunk	QHMinusStr	= "Subtract";
chunk	QHTimesStr	= "Multiply";
chunk	QHDivideStr	= "Divide";
chunk	QHOneOverStr	= "Invert";
chunk	QHSquareStr	= "Square";
chunk	QHSquareRootStr	= "Square-root";
chunk	QHLeftParenStr	= "Left Parentheses";
chunk	QHRightParenStr	= "Right Parentheses";
chunk	QHPercentStr	= "Percent";
chunk	QHEEStr		= "Scientific notation";

#if	_RPN_CAPABILITY
chunk	QHSwapStr	= "Swap current value with top of stack";
chunk	QHRollDownStr	= "Roll current value onto stack and pull from bottom";
#endif
chunk	QHEnterStr	= "Push the value onto the stack";

#if     _SCIENTIFIC_REP
chunk	QHDegreesStr	= "Degrees";
chunk	QHRadiansStr	= "Radians";
chunk	QHGradiansStr	= "Gradians";
chunk	QHInverseStr	= "Show/Hide Inverse Functions";
chunk	QHFactorialStr	= "Factorial";
chunk	QHSineStr	= "Sine";
chunk	QHArcSineStr	= "Arc-Sine";
chunk	QHCosineStr	= "Cosine";
chunk	QHArcCosineStr	= "Arc-Cosine";
chunk	QHTangentStr	= "Tangent";
chunk	QHArcTangentStr	= "Arc-Tangent";
chunk	QHYToXStr	= "First value raised to the power of the second";
chunk	QHLnStr		= "Natural Logarithm";
chunk	QHLogStr	= "Logarithm base-10";
chunk	QHEToXStr	= "e raised to the power of the value";
chunk	QH10ToXStr	= "10 raised to the power of the value";
chunk	QHPiStr		= "Pi = 3.14...";
chunk	QHeStr		= "e = 2.71...";
#endif

end	DataResource;

